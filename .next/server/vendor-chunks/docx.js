"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/docx";
exports.ids = ["vendor-chunks/docx"];
exports.modules = {

/***/ "(ssr)/./node_modules/docx/dist/index.mjs":
/*!******************************************!*\
  !*** ./node_modules/docx/dist/index.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractNumbering: () => (/* binding */ AbstractNumbering),\n/* harmony export */   Alignment: () => (/* binding */ Alignment),\n/* harmony export */   AlignmentAttributes: () => (/* binding */ AlignmentAttributes),\n/* harmony export */   AlignmentType: () => (/* binding */ AlignmentType),\n/* harmony export */   AnnotationReference: () => (/* binding */ AnnotationReference),\n/* harmony export */   Attributes: () => (/* binding */ Attributes),\n/* harmony export */   BaseEmphasisMark: () => (/* binding */ BaseEmphasisMark),\n/* harmony export */   BaseXmlComponent: () => (/* binding */ BaseXmlComponent),\n/* harmony export */   Body: () => (/* binding */ Body),\n/* harmony export */   Bookmark: () => (/* binding */ Bookmark),\n/* harmony export */   BookmarkEnd: () => (/* binding */ BookmarkEnd),\n/* harmony export */   BookmarkStart: () => (/* binding */ BookmarkStart),\n/* harmony export */   Border: () => (/* binding */ Border),\n/* harmony export */   BorderElement: () => (/* binding */ BorderElement),\n/* harmony export */   BorderStyle: () => (/* binding */ BorderStyle),\n/* harmony export */   BuilderElement: () => (/* binding */ BuilderElement),\n/* harmony export */   CarriageReturn: () => (/* binding */ CarriageReturn),\n/* harmony export */   CharacterSet: () => (/* binding */ CharacterSet),\n/* harmony export */   CheckBox: () => (/* binding */ CheckBox),\n/* harmony export */   CheckBoxSymbolElement: () => (/* binding */ CheckBoxSymbolElement),\n/* harmony export */   CheckBoxUtil: () => (/* binding */ CheckBoxUtil),\n/* harmony export */   Column: () => (/* binding */ Column),\n/* harmony export */   ColumnBreak: () => (/* binding */ ColumnBreak),\n/* harmony export */   Columns: () => (/* binding */ Columns),\n/* harmony export */   Comment: () => (/* binding */ Comment),\n/* harmony export */   CommentRangeEnd: () => (/* binding */ CommentRangeEnd),\n/* harmony export */   CommentRangeStart: () => (/* binding */ CommentRangeStart),\n/* harmony export */   CommentReference: () => (/* binding */ CommentReference),\n/* harmony export */   Comments: () => (/* binding */ Comments),\n/* harmony export */   ConcreteHyperlink: () => (/* binding */ ConcreteHyperlink),\n/* harmony export */   ConcreteNumbering: () => (/* binding */ ConcreteNumbering),\n/* harmony export */   ContinuationSeparator: () => (/* binding */ ContinuationSeparator),\n/* harmony export */   DayLong: () => (/* binding */ DayLong),\n/* harmony export */   DayShort: () => (/* binding */ DayShort),\n/* harmony export */   DeletedTextRun: () => (/* binding */ DeletedTextRun),\n/* harmony export */   Document: () => (/* binding */ File),\n/* harmony export */   DocumentAttributeNamespaces: () => (/* binding */ DocumentAttributeNamespaces),\n/* harmony export */   DocumentAttributes: () => (/* binding */ DocumentAttributes),\n/* harmony export */   DocumentBackground: () => (/* binding */ DocumentBackground),\n/* harmony export */   DocumentBackgroundAttributes: () => (/* binding */ DocumentBackgroundAttributes),\n/* harmony export */   DocumentDefaults: () => (/* binding */ DocumentDefaults),\n/* harmony export */   DocumentGridType: () => (/* binding */ DocumentGridType),\n/* harmony export */   DotEmphasisMark: () => (/* binding */ DotEmphasisMark),\n/* harmony export */   Drawing: () => (/* binding */ Drawing),\n/* harmony export */   DropCapType: () => (/* binding */ DropCapType),\n/* harmony export */   EMPTY_OBJECT: () => (/* binding */ EMPTY_OBJECT),\n/* harmony export */   EmphasisMark: () => (/* binding */ EmphasisMark),\n/* harmony export */   EmphasisMarkType: () => (/* binding */ EmphasisMarkType),\n/* harmony export */   EmptyElement: () => (/* binding */ EmptyElement),\n/* harmony export */   EndnoteReference: () => (/* binding */ EndnoteReference),\n/* harmony export */   ExternalHyperlink: () => (/* binding */ ExternalHyperlink),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FileChild: () => (/* binding */ FileChild),\n/* harmony export */   FootNoteReferenceRunAttributes: () => (/* binding */ FootNoteReferenceRunAttributes),\n/* harmony export */   FootNotes: () => (/* binding */ FootNotes),\n/* harmony export */   Footer: () => (/* binding */ Footer2),\n/* harmony export */   FooterWrapper: () => (/* binding */ FooterWrapper),\n/* harmony export */   FootnoteReference: () => (/* binding */ FootnoteReference),\n/* harmony export */   FootnoteReferenceElement: () => (/* binding */ FootnoteReferenceElement),\n/* harmony export */   FootnoteReferenceRun: () => (/* binding */ FootnoteReferenceRun),\n/* harmony export */   FrameAnchorType: () => (/* binding */ FrameAnchorType),\n/* harmony export */   FrameWrap: () => (/* binding */ FrameWrap),\n/* harmony export */   GridSpan: () => (/* binding */ GridSpan),\n/* harmony export */   Header: () => (/* binding */ Header2),\n/* harmony export */   HeaderFooterReference: () => (/* binding */ HeaderFooterReference),\n/* harmony export */   HeaderFooterReferenceType: () => (/* binding */ HeaderFooterReferenceType),\n/* harmony export */   HeaderFooterType: () => (/* binding */ HeaderFooterType),\n/* harmony export */   HeaderWrapper: () => (/* binding */ HeaderWrapper),\n/* harmony export */   HeadingLevel: () => (/* binding */ HeadingLevel),\n/* harmony export */   HeightRule: () => (/* binding */ HeightRule),\n/* harmony export */   HighlightColor: () => (/* binding */ HighlightColor),\n/* harmony export */   HorizontalPositionAlign: () => (/* binding */ HorizontalPositionAlign),\n/* harmony export */   HorizontalPositionRelativeFrom: () => (/* binding */ HorizontalPositionRelativeFrom),\n/* harmony export */   HpsMeasureElement: () => (/* binding */ HpsMeasureElement),\n/* harmony export */   HyperlinkType: () => (/* binding */ HyperlinkType),\n/* harmony export */   IgnoreIfEmptyXmlComponent: () => (/* binding */ IgnoreIfEmptyXmlComponent),\n/* harmony export */   ImageRun: () => (/* binding */ ImageRun),\n/* harmony export */   ImportedRootElementAttributes: () => (/* binding */ ImportedRootElementAttributes),\n/* harmony export */   ImportedXmlComponent: () => (/* binding */ ImportedXmlComponent),\n/* harmony export */   Indent: () => (/* binding */ Indent),\n/* harmony export */   InitializableXmlComponent: () => (/* binding */ InitializableXmlComponent),\n/* harmony export */   InsertedTextRun: () => (/* binding */ InsertedTextRun),\n/* harmony export */   InternalHyperlink: () => (/* binding */ InternalHyperlink),\n/* harmony export */   LastRenderedPageBreak: () => (/* binding */ LastRenderedPageBreak),\n/* harmony export */   LeaderType: () => (/* binding */ LeaderType),\n/* harmony export */   Level: () => (/* binding */ Level),\n/* harmony export */   LevelBase: () => (/* binding */ LevelBase),\n/* harmony export */   LevelForOverride: () => (/* binding */ LevelForOverride),\n/* harmony export */   LevelFormat: () => (/* binding */ LevelFormat),\n/* harmony export */   LevelOverride: () => (/* binding */ LevelOverride),\n/* harmony export */   LevelSuffix: () => (/* binding */ LevelSuffix),\n/* harmony export */   LineNumberRestartFormat: () => (/* binding */ LineNumberRestartFormat),\n/* harmony export */   LineRuleType: () => (/* binding */ LineRuleType),\n/* harmony export */   Math: () => (/* binding */ Math$1),\n/* harmony export */   MathAngledBrackets: () => (/* binding */ MathAngledBrackets),\n/* harmony export */   MathCurlyBrackets: () => (/* binding */ MathCurlyBrackets),\n/* harmony export */   MathDegree: () => (/* binding */ MathDegree),\n/* harmony export */   MathDenominator: () => (/* binding */ MathDenominator),\n/* harmony export */   MathFraction: () => (/* binding */ MathFraction),\n/* harmony export */   MathFunction: () => (/* binding */ MathFunction),\n/* harmony export */   MathFunctionName: () => (/* binding */ MathFunctionName),\n/* harmony export */   MathFunctionProperties: () => (/* binding */ MathFunctionProperties),\n/* harmony export */   MathIntegral: () => (/* binding */ MathIntegral),\n/* harmony export */   MathLimit: () => (/* binding */ MathLimit),\n/* harmony export */   MathLimitLower: () => (/* binding */ MathLimitLower),\n/* harmony export */   MathLimitUpper: () => (/* binding */ MathLimitUpper),\n/* harmony export */   MathNumerator: () => (/* binding */ MathNumerator),\n/* harmony export */   MathPreSubSuperScript: () => (/* binding */ MathPreSubSuperScript),\n/* harmony export */   MathRadical: () => (/* binding */ MathRadical),\n/* harmony export */   MathRadicalProperties: () => (/* binding */ MathRadicalProperties),\n/* harmony export */   MathRoundBrackets: () => (/* binding */ MathRoundBrackets),\n/* harmony export */   MathRun: () => (/* binding */ MathRun),\n/* harmony export */   MathSquareBrackets: () => (/* binding */ MathSquareBrackets),\n/* harmony export */   MathSubScript: () => (/* binding */ MathSubScript),\n/* harmony export */   MathSubSuperScript: () => (/* binding */ MathSubSuperScript),\n/* harmony export */   MathSum: () => (/* binding */ MathSum),\n/* harmony export */   MathSuperScript: () => (/* binding */ MathSuperScript),\n/* harmony export */   Media: () => (/* binding */ Media),\n/* harmony export */   MonthLong: () => (/* binding */ MonthLong),\n/* harmony export */   MonthShort: () => (/* binding */ MonthShort),\n/* harmony export */   NextAttributeComponent: () => (/* binding */ NextAttributeComponent),\n/* harmony export */   NoBreakHyphen: () => (/* binding */ NoBreakHyphen),\n/* harmony export */   NumberFormat: () => (/* binding */ NumberFormat$1),\n/* harmony export */   NumberProperties: () => (/* binding */ NumberProperties),\n/* harmony export */   NumberValueElement: () => (/* binding */ NumberValueElement),\n/* harmony export */   Numbering: () => (/* binding */ Numbering),\n/* harmony export */   OnOffElement: () => (/* binding */ OnOffElement),\n/* harmony export */   OutlineLevel: () => (/* binding */ OutlineLevel),\n/* harmony export */   OverlapType: () => (/* binding */ OverlapType),\n/* harmony export */   Packer: () => (/* binding */ Packer),\n/* harmony export */   PageBorderDisplay: () => (/* binding */ PageBorderDisplay),\n/* harmony export */   PageBorderOffsetFrom: () => (/* binding */ PageBorderOffsetFrom),\n/* harmony export */   PageBorderZOrder: () => (/* binding */ PageBorderZOrder),\n/* harmony export */   PageBorders: () => (/* binding */ PageBorders),\n/* harmony export */   PageBreak: () => (/* binding */ PageBreak),\n/* harmony export */   PageBreakBefore: () => (/* binding */ PageBreakBefore),\n/* harmony export */   PageMargin: () => (/* binding */ PageMargin),\n/* harmony export */   PageNumber: () => (/* binding */ PageNumber),\n/* harmony export */   PageNumberElement: () => (/* binding */ PageNumberElement),\n/* harmony export */   PageNumberSeparator: () => (/* binding */ PageNumberSeparator),\n/* harmony export */   PageNumberType: () => (/* binding */ PageNumberType),\n/* harmony export */   PageNumberTypeAttributes: () => (/* binding */ PageNumberTypeAttributes),\n/* harmony export */   PageOrientation: () => (/* binding */ PageOrientation),\n/* harmony export */   PageReference: () => (/* binding */ PageReference),\n/* harmony export */   PageTextDirection: () => (/* binding */ PageTextDirection),\n/* harmony export */   PageTextDirectionType: () => (/* binding */ PageTextDirectionType),\n/* harmony export */   Paragraph: () => (/* binding */ Paragraph),\n/* harmony export */   ParagraphProperties: () => (/* binding */ ParagraphProperties),\n/* harmony export */   ParagraphPropertiesDefaults: () => (/* binding */ ParagraphPropertiesDefaults),\n/* harmony export */   PatchType: () => (/* binding */ PatchType),\n/* harmony export */   PositionalTab: () => (/* binding */ PositionalTab),\n/* harmony export */   PositionalTabAlignment: () => (/* binding */ PositionalTabAlignment),\n/* harmony export */   PositionalTabLeader: () => (/* binding */ PositionalTabLeader),\n/* harmony export */   PositionalTabRelativeTo: () => (/* binding */ PositionalTabRelativeTo),\n/* harmony export */   PrettifyType: () => (/* binding */ PrettifyType),\n/* harmony export */   RelativeHorizontalPosition: () => (/* binding */ RelativeHorizontalPosition),\n/* harmony export */   RelativeVerticalPosition: () => (/* binding */ RelativeVerticalPosition),\n/* harmony export */   Run: () => (/* binding */ Run),\n/* harmony export */   RunFonts: () => (/* binding */ RunFonts),\n/* harmony export */   RunProperties: () => (/* binding */ RunProperties),\n/* harmony export */   RunPropertiesChange: () => (/* binding */ RunPropertiesChange),\n/* harmony export */   RunPropertiesDefaults: () => (/* binding */ RunPropertiesDefaults),\n/* harmony export */   SectionProperties: () => (/* binding */ SectionProperties),\n/* harmony export */   SectionType: () => (/* binding */ SectionType),\n/* harmony export */   SectionTypeAttributes: () => (/* binding */ SectionTypeAttributes),\n/* harmony export */   Separator: () => (/* binding */ Separator),\n/* harmony export */   SequentialIdentifier: () => (/* binding */ SequentialIdentifier),\n/* harmony export */   Shading: () => (/* binding */ Shading),\n/* harmony export */   ShadingType: () => (/* binding */ ShadingType),\n/* harmony export */   SimpleField: () => (/* binding */ SimpleField),\n/* harmony export */   SimpleMailMergeField: () => (/* binding */ SimpleMailMergeField),\n/* harmony export */   SoftHyphen: () => (/* binding */ SoftHyphen),\n/* harmony export */   SpaceType: () => (/* binding */ SpaceType),\n/* harmony export */   Spacing: () => (/* binding */ Spacing),\n/* harmony export */   StringContainer: () => (/* binding */ StringContainer),\n/* harmony export */   StringEnumValueElement: () => (/* binding */ StringEnumValueElement),\n/* harmony export */   StringValueElement: () => (/* binding */ StringValueElement),\n/* harmony export */   Style: () => (/* binding */ Style$1),\n/* harmony export */   StyleForCharacter: () => (/* binding */ StyleForCharacter),\n/* harmony export */   StyleForParagraph: () => (/* binding */ StyleForParagraph),\n/* harmony export */   StyleLevel: () => (/* binding */ StyleLevel),\n/* harmony export */   Styles: () => (/* binding */ Styles),\n/* harmony export */   SymbolRun: () => (/* binding */ SymbolRun),\n/* harmony export */   TDirection: () => (/* binding */ TDirection),\n/* harmony export */   Tab: () => (/* binding */ Tab),\n/* harmony export */   TabAttributes: () => (/* binding */ TabAttributes),\n/* harmony export */   TabStop: () => (/* binding */ TabStop),\n/* harmony export */   TabStopItem: () => (/* binding */ TabStopItem),\n/* harmony export */   TabStopPosition: () => (/* binding */ TabStopPosition),\n/* harmony export */   TabStopType: () => (/* binding */ TabStopType),\n/* harmony export */   Table: () => (/* binding */ Table),\n/* harmony export */   TableAnchorType: () => (/* binding */ TableAnchorType),\n/* harmony export */   TableBorders: () => (/* binding */ TableBorders),\n/* harmony export */   TableCell: () => (/* binding */ TableCell),\n/* harmony export */   TableCellBorders: () => (/* binding */ TableCellBorders),\n/* harmony export */   TableFloatProperties: () => (/* binding */ TableFloatProperties),\n/* harmony export */   TableLayout: () => (/* binding */ TableLayout),\n/* harmony export */   TableLayoutType: () => (/* binding */ TableLayoutType),\n/* harmony export */   TableOfContents: () => (/* binding */ TableOfContents),\n/* harmony export */   TableProperties: () => (/* binding */ TableProperties),\n/* harmony export */   TableRow: () => (/* binding */ TableRow),\n/* harmony export */   TableRowHeight: () => (/* binding */ TableRowHeight),\n/* harmony export */   TableRowHeightAttributes: () => (/* binding */ TableRowHeightAttributes),\n/* harmony export */   TableRowProperties: () => (/* binding */ TableRowProperties),\n/* harmony export */   TableWidthElement: () => (/* binding */ TableWidthElement),\n/* harmony export */   TextDirection: () => (/* binding */ TextDirection),\n/* harmony export */   TextEffect: () => (/* binding */ TextEffect),\n/* harmony export */   TextRun: () => (/* binding */ TextRun),\n/* harmony export */   TextWrappingSide: () => (/* binding */ TextWrappingSide),\n/* harmony export */   TextWrappingType: () => (/* binding */ TextWrappingType),\n/* harmony export */   Textbox: () => (/* binding */ Textbox),\n/* harmony export */   ThematicBreak: () => (/* binding */ ThematicBreak),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   Underline: () => (/* binding */ Underline),\n/* harmony export */   UnderlineType: () => (/* binding */ UnderlineType),\n/* harmony export */   VerticalAlign: () => (/* binding */ VerticalAlign2),\n/* harmony export */   VerticalAlignAttributes: () => (/* binding */ VerticalAlignAttributes),\n/* harmony export */   VerticalAlignElement: () => (/* binding */ VerticalAlignElement),\n/* harmony export */   VerticalAlignSection: () => (/* binding */ VerticalAlignSection),\n/* harmony export */   VerticalAlignTable: () => (/* binding */ VerticalAlignTable),\n/* harmony export */   VerticalMerge: () => (/* binding */ VerticalMerge),\n/* harmony export */   VerticalMergeType: () => (/* binding */ VerticalMergeType),\n/* harmony export */   VerticalPositionAlign: () => (/* binding */ VerticalPositionAlign),\n/* harmony export */   VerticalPositionRelativeFrom: () => (/* binding */ VerticalPositionRelativeFrom),\n/* harmony export */   WORKAROUND2: () => (/* binding */ WORKAROUND2),\n/* harmony export */   WORKAROUND3: () => (/* binding */ WORKAROUND3),\n/* harmony export */   WORKAROUND4: () => (/* binding */ WORKAROUND4),\n/* harmony export */   WidthType: () => (/* binding */ WidthType),\n/* harmony export */   WrapNone: () => (/* binding */ WrapNone),\n/* harmony export */   WrapSquare: () => (/* binding */ WrapSquare),\n/* harmony export */   WrapTight: () => (/* binding */ WrapTight),\n/* harmony export */   WrapTopAndBottom: () => (/* binding */ WrapTopAndBottom),\n/* harmony export */   XmlAttributeComponent: () => (/* binding */ XmlAttributeComponent),\n/* harmony export */   XmlComponent: () => (/* binding */ XmlComponent),\n/* harmony export */   YearLong: () => (/* binding */ YearLong),\n/* harmony export */   YearShort: () => (/* binding */ YearShort),\n/* harmony export */   abstractNumUniqueNumericIdGen: () => (/* binding */ abstractNumUniqueNumericIdGen),\n/* harmony export */   bookmarkUniqueNumericIdGen: () => (/* binding */ bookmarkUniqueNumericIdGen),\n/* harmony export */   concreteNumUniqueNumericIdGen: () => (/* binding */ concreteNumUniqueNumericIdGen),\n/* harmony export */   convertInchesToTwip: () => (/* binding */ convertInchesToTwip),\n/* harmony export */   convertMillimetersToTwip: () => (/* binding */ convertMillimetersToTwip),\n/* harmony export */   convertToXmlComponent: () => (/* binding */ convertToXmlComponent),\n/* harmony export */   createDocumentGrid: () => (/* binding */ createDocumentGrid),\n/* harmony export */   createFrameProperties: () => (/* binding */ createFrameProperties),\n/* harmony export */   createHorizontalPosition: () => (/* binding */ createHorizontalPosition),\n/* harmony export */   createLineNumberType: () => (/* binding */ createLineNumberType),\n/* harmony export */   createMathAccentCharacter: () => (/* binding */ createMathAccentCharacter),\n/* harmony export */   createMathBase: () => (/* binding */ createMathBase),\n/* harmony export */   createMathLimitLocation: () => (/* binding */ createMathLimitLocation),\n/* harmony export */   createMathNAryProperties: () => (/* binding */ createMathNAryProperties),\n/* harmony export */   createMathPreSubSuperScriptProperties: () => (/* binding */ createMathPreSubSuperScriptProperties),\n/* harmony export */   createMathSubScriptElement: () => (/* binding */ createMathSubScriptElement),\n/* harmony export */   createMathSubScriptProperties: () => (/* binding */ createMathSubScriptProperties),\n/* harmony export */   createMathSubSuperScriptProperties: () => (/* binding */ createMathSubSuperScriptProperties),\n/* harmony export */   createMathSuperScriptElement: () => (/* binding */ createMathSuperScriptElement),\n/* harmony export */   createMathSuperScriptProperties: () => (/* binding */ createMathSuperScriptProperties),\n/* harmony export */   createPageSize: () => (/* binding */ createPageSize),\n/* harmony export */   createSimplePos: () => (/* binding */ createSimplePos),\n/* harmony export */   createStringElement: () => (/* binding */ createStringElement),\n/* harmony export */   createVerticalPosition: () => (/* binding */ createVerticalPosition),\n/* harmony export */   dateTimeValue: () => (/* binding */ dateTimeValue),\n/* harmony export */   decimalNumber: () => (/* binding */ decimalNumber),\n/* harmony export */   docPropertiesUniqueNumericIdGen: () => (/* binding */ docPropertiesUniqueNumericIdGen),\n/* harmony export */   eighthPointMeasureValue: () => (/* binding */ eighthPointMeasureValue),\n/* harmony export */   hashedId: () => (/* binding */ hashedId),\n/* harmony export */   hexColorValue: () => (/* binding */ hexColorValue),\n/* harmony export */   hpsMeasureValue: () => (/* binding */ hpsMeasureValue),\n/* harmony export */   longHexNumber: () => (/* binding */ longHexNumber),\n/* harmony export */   measurementOrPercentValue: () => (/* binding */ measurementOrPercentValue),\n/* harmony export */   patchDetector: () => (/* binding */ patchDetector),\n/* harmony export */   patchDocument: () => (/* binding */ patchDocument),\n/* harmony export */   percentageValue: () => (/* binding */ percentageValue),\n/* harmony export */   pointMeasureValue: () => (/* binding */ pointMeasureValue),\n/* harmony export */   positiveUniversalMeasureValue: () => (/* binding */ positiveUniversalMeasureValue),\n/* harmony export */   sectionMarginDefaults: () => (/* binding */ sectionMarginDefaults),\n/* harmony export */   sectionPageSizeDefaults: () => (/* binding */ sectionPageSizeDefaults),\n/* harmony export */   shortHexNumber: () => (/* binding */ shortHexNumber),\n/* harmony export */   signedHpsMeasureValue: () => (/* binding */ signedHpsMeasureValue),\n/* harmony export */   signedTwipsMeasureValue: () => (/* binding */ signedTwipsMeasureValue),\n/* harmony export */   twipsMeasureValue: () => (/* binding */ twipsMeasureValue),\n/* harmony export */   uCharHexNumber: () => (/* binding */ uCharHexNumber),\n/* harmony export */   uniqueId: () => (/* binding */ uniqueId),\n/* harmony export */   uniqueNumericIdCreator: () => (/* binding */ uniqueNumericIdCreator),\n/* harmony export */   uniqueUuid: () => (/* binding */ uniqueUuid),\n/* harmony export */   universalMeasureValue: () => (/* binding */ universalMeasureValue),\n/* harmony export */   unsignedDecimalNumber: () => (/* binding */ unsignedDecimalNumber)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\nclass BaseXmlComponent {\n    constructor(rootKey){\n        __publicField(this, \"rootKey\");\n        this.rootKey = rootKey;\n    }\n}\nconst EMPTY_OBJECT = Object.seal({});\nclass XmlComponent extends BaseXmlComponent {\n    constructor(rootKey){\n        super(rootKey);\n        // eslint-disable-next-line functional/prefer-readonly-type, @typescript-eslint/no-explicit-any\n        __publicField(this, \"root\");\n        this.root = new Array();\n    }\n    // This method is called by the formatter to get the XML representation of this component.\n    // It is called recursively for all child components.\n    // It is a serializer to be used in the xml library.\n    // https://www.npmjs.com/package/xml\n    // Child components can override this method to customize the XML representation, or execute side effects.\n    prepForXml(context) {\n        var _a;\n        context.stack.push(this);\n        const children = this.root.map((comp)=>{\n            if (comp instanceof BaseXmlComponent) {\n                return comp.prepForXml(context);\n            }\n            return comp;\n        }).filter((comp)=>comp !== void 0);\n        context.stack.pop();\n        return {\n            [this.rootKey]: children.length ? children.length === 1 && ((_a = children[0]) == null ? void 0 : _a._attr) ? children[0] : children : EMPTY_OBJECT\n        };\n    }\n    /**\n   * @deprecated Do not use this method. It is only used internally by the library. It will be removed in a future version.\n   */ addChildElement(child) {\n        this.root.push(child);\n        return this;\n    }\n}\nclass IgnoreIfEmptyXmlComponent extends XmlComponent {\n    prepForXml(context) {\n        const result = super.prepForXml(context);\n        if (result && (typeof result[this.rootKey] !== \"object\" || Object.keys(result[this.rootKey]).length)) {\n            return result;\n        }\n        return void 0;\n    }\n}\nclass XmlAttributeComponent extends BaseXmlComponent {\n    constructor(root){\n        super(\"_attr\");\n        __publicField(this, \"xmlKeys\");\n        this.root = root;\n    }\n    prepForXml(_) {\n        const attrs = {};\n        Object.entries(this.root).forEach(([key, value])=>{\n            if (value !== void 0) {\n                const newKey = this.xmlKeys && this.xmlKeys[key] || key;\n                attrs[newKey] = value;\n            }\n        });\n        return {\n            _attr: attrs\n        };\n    }\n}\nclass NextAttributeComponent extends BaseXmlComponent {\n    constructor(root){\n        super(\"_attr\");\n        this.root = root;\n    }\n    prepForXml(_) {\n        const attrs = Object.values(this.root).filter(({ value })=>value !== void 0).reduce((acc, { key, value })=>__spreadProps(__spreadValues({}, acc), {\n                [key]: value\n            }), {});\n        return {\n            _attr: attrs\n        };\n    }\n}\nclass Attributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\",\n            color: \"w:color\",\n            fill: \"w:fill\",\n            space: \"w:space\",\n            sz: \"w:sz\",\n            type: \"w:type\",\n            rsidR: \"w:rsidR\",\n            rsidRPr: \"w:rsidRPr\",\n            rsidSect: \"w:rsidSect\",\n            w: \"w:w\",\n            h: \"w:h\",\n            top: \"w:top\",\n            right: \"w:right\",\n            bottom: \"w:bottom\",\n            left: \"w:left\",\n            header: \"w:header\",\n            footer: \"w:footer\",\n            gutter: \"w:gutter\",\n            linePitch: \"w:linePitch\",\n            pos: \"w:pos\"\n        });\n    }\n}\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nfunction getDefaultExportFromCjs$1(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nvar sax = {};\nvar events = {\n    exports: {}\n};\nvar hasRequiredEvents;\nfunction requireEvents() {\n    if (hasRequiredEvents) return events.exports;\n    hasRequiredEvents = 1;\n    var R = typeof Reflect === \"object\" ? Reflect : null;\n    var ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n        return Function.prototype.apply.call(target, receiver, args);\n    };\n    var ReflectOwnKeys;\n    if (R && typeof R.ownKeys === \"function\") {\n        ReflectOwnKeys = R.ownKeys;\n    } else if (Object.getOwnPropertySymbols) {\n        ReflectOwnKeys = function ReflectOwnKeys2(target) {\n            return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n        };\n    } else {\n        ReflectOwnKeys = function ReflectOwnKeys2(target) {\n            return Object.getOwnPropertyNames(target);\n        };\n    }\n    function ProcessEmitWarning(warning) {\n        if (console && console.warn) console.warn(warning);\n    }\n    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n        return value !== value;\n    };\n    function EventEmitter() {\n        EventEmitter.init.call(this);\n    }\n    events.exports = EventEmitter;\n    events.exports.once = once;\n    EventEmitter.EventEmitter = EventEmitter;\n    EventEmitter.prototype._events = void 0;\n    EventEmitter.prototype._eventsCount = 0;\n    EventEmitter.prototype._maxListeners = void 0;\n    var defaultMaxListeners = 10;\n    function checkListener(listener) {\n        if (typeof listener !== \"function\") {\n            throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n        }\n    }\n    Object.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n        enumerable: true,\n        get: function() {\n            return defaultMaxListeners;\n        },\n        set: function(arg) {\n            if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n                throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n            }\n            defaultMaxListeners = arg;\n        }\n    });\n    EventEmitter.init = function() {\n        if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n            this._events = /* @__PURE__ */ Object.create(null);\n            this._eventsCount = 0;\n        }\n        this._maxListeners = this._maxListeners || void 0;\n    };\n    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n        if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n            throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n        }\n        this._maxListeners = n;\n        return this;\n    };\n    function _getMaxListeners(that) {\n        if (that._maxListeners === void 0) return EventEmitter.defaultMaxListeners;\n        return that._maxListeners;\n    }\n    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n        return _getMaxListeners(this);\n    };\n    EventEmitter.prototype.emit = function emit(type2) {\n        var args = [];\n        for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);\n        var doError = type2 === \"error\";\n        var events2 = this._events;\n        if (events2 !== void 0) doError = doError && events2.error === void 0;\n        else if (!doError) return false;\n        if (doError) {\n            var er;\n            if (args.length > 0) er = args[0];\n            if (er instanceof Error) {\n                throw er;\n            }\n            var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n            err.context = er;\n            throw err;\n        }\n        var handler = events2[type2];\n        if (handler === void 0) return false;\n        if (typeof handler === \"function\") {\n            ReflectApply(handler, this, args);\n        } else {\n            var len = handler.length;\n            var listeners = arrayClone(handler, len);\n            for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);\n        }\n        return true;\n    };\n    function _addListener(target, type2, listener, prepend) {\n        var m;\n        var events2;\n        var existing;\n        checkListener(listener);\n        events2 = target._events;\n        if (events2 === void 0) {\n            events2 = target._events = /* @__PURE__ */ Object.create(null);\n            target._eventsCount = 0;\n        } else {\n            if (events2.newListener !== void 0) {\n                target.emit(\"newListener\", type2, listener.listener ? listener.listener : listener);\n                events2 = target._events;\n            }\n            existing = events2[type2];\n        }\n        if (existing === void 0) {\n            existing = events2[type2] = listener;\n            ++target._eventsCount;\n        } else {\n            if (typeof existing === \"function\") {\n                existing = events2[type2] = prepend ? [\n                    listener,\n                    existing\n                ] : [\n                    existing,\n                    listener\n                ];\n            } else if (prepend) {\n                existing.unshift(listener);\n            } else {\n                existing.push(listener);\n            }\n            m = _getMaxListeners(target);\n            if (m > 0 && existing.length > m && !existing.warned) {\n                existing.warned = true;\n                var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type2) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n                w.name = \"MaxListenersExceededWarning\";\n                w.emitter = target;\n                w.type = type2;\n                w.count = existing.length;\n                ProcessEmitWarning(w);\n            }\n        }\n        return target;\n    }\n    EventEmitter.prototype.addListener = function addListener(type2, listener) {\n        return _addListener(this, type2, listener, false);\n    };\n    EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n    EventEmitter.prototype.prependListener = function prependListener(type2, listener) {\n        return _addListener(this, type2, listener, true);\n    };\n    function onceWrapper() {\n        if (!this.fired) {\n            this.target.removeListener(this.type, this.wrapFn);\n            this.fired = true;\n            if (arguments.length === 0) return this.listener.call(this.target);\n            return this.listener.apply(this.target, arguments);\n        }\n    }\n    function _onceWrap(target, type2, listener) {\n        var state2 = {\n            fired: false,\n            wrapFn: void 0,\n            target,\n            type: type2,\n            listener\n        };\n        var wrapped = onceWrapper.bind(state2);\n        wrapped.listener = listener;\n        state2.wrapFn = wrapped;\n        return wrapped;\n    }\n    EventEmitter.prototype.once = function once2(type2, listener) {\n        checkListener(listener);\n        this.on(type2, _onceWrap(this, type2, listener));\n        return this;\n    };\n    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type2, listener) {\n        checkListener(listener);\n        this.prependListener(type2, _onceWrap(this, type2, listener));\n        return this;\n    };\n    EventEmitter.prototype.removeListener = function removeListener(type2, listener) {\n        var list, events2, position, i, originalListener;\n        checkListener(listener);\n        events2 = this._events;\n        if (events2 === void 0) return this;\n        list = events2[type2];\n        if (list === void 0) return this;\n        if (list === listener || list.listener === listener) {\n            if (--this._eventsCount === 0) this._events = /* @__PURE__ */ Object.create(null);\n            else {\n                delete events2[type2];\n                if (events2.removeListener) this.emit(\"removeListener\", type2, list.listener || listener);\n            }\n        } else if (typeof list !== \"function\") {\n            position = -1;\n            for(i = list.length - 1; i >= 0; i--){\n                if (list[i] === listener || list[i].listener === listener) {\n                    originalListener = list[i].listener;\n                    position = i;\n                    break;\n                }\n            }\n            if (position < 0) return this;\n            if (position === 0) list.shift();\n            else {\n                spliceOne(list, position);\n            }\n            if (list.length === 1) events2[type2] = list[0];\n            if (events2.removeListener !== void 0) this.emit(\"removeListener\", type2, originalListener || listener);\n        }\n        return this;\n    };\n    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type2) {\n        var listeners, events2, i;\n        events2 = this._events;\n        if (events2 === void 0) return this;\n        if (events2.removeListener === void 0) {\n            if (arguments.length === 0) {\n                this._events = /* @__PURE__ */ Object.create(null);\n                this._eventsCount = 0;\n            } else if (events2[type2] !== void 0) {\n                if (--this._eventsCount === 0) this._events = /* @__PURE__ */ Object.create(null);\n                else delete events2[type2];\n            }\n            return this;\n        }\n        if (arguments.length === 0) {\n            var keys = Object.keys(events2);\n            var key;\n            for(i = 0; i < keys.length; ++i){\n                key = keys[i];\n                if (key === \"removeListener\") continue;\n                this.removeAllListeners(key);\n            }\n            this.removeAllListeners(\"removeListener\");\n            this._events = /* @__PURE__ */ Object.create(null);\n            this._eventsCount = 0;\n            return this;\n        }\n        listeners = events2[type2];\n        if (typeof listeners === \"function\") {\n            this.removeListener(type2, listeners);\n        } else if (listeners !== void 0) {\n            for(i = listeners.length - 1; i >= 0; i--){\n                this.removeListener(type2, listeners[i]);\n            }\n        }\n        return this;\n    };\n    function _listeners(target, type2, unwrap) {\n        var events2 = target._events;\n        if (events2 === void 0) return [];\n        var evlistener = events2[type2];\n        if (evlistener === void 0) return [];\n        if (typeof evlistener === \"function\") return unwrap ? [\n            evlistener.listener || evlistener\n        ] : [\n            evlistener\n        ];\n        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n    }\n    EventEmitter.prototype.listeners = function listeners(type2) {\n        return _listeners(this, type2, true);\n    };\n    EventEmitter.prototype.rawListeners = function rawListeners(type2) {\n        return _listeners(this, type2, false);\n    };\n    EventEmitter.listenerCount = function(emitter, type2) {\n        if (typeof emitter.listenerCount === \"function\") {\n            return emitter.listenerCount(type2);\n        } else {\n            return listenerCount.call(emitter, type2);\n        }\n    };\n    EventEmitter.prototype.listenerCount = listenerCount;\n    function listenerCount(type2) {\n        var events2 = this._events;\n        if (events2 !== void 0) {\n            var evlistener = events2[type2];\n            if (typeof evlistener === \"function\") {\n                return 1;\n            } else if (evlistener !== void 0) {\n                return evlistener.length;\n            }\n        }\n        return 0;\n    }\n    EventEmitter.prototype.eventNames = function eventNames() {\n        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n    };\n    function arrayClone(arr, n) {\n        var copy = new Array(n);\n        for(var i = 0; i < n; ++i)copy[i] = arr[i];\n        return copy;\n    }\n    function spliceOne(list, index) {\n        for(; index + 1 < list.length; index++)list[index] = list[index + 1];\n        list.pop();\n    }\n    function unwrapListeners(arr) {\n        var ret = new Array(arr.length);\n        for(var i = 0; i < ret.length; ++i){\n            ret[i] = arr[i].listener || arr[i];\n        }\n        return ret;\n    }\n    function once(emitter, name) {\n        return new Promise(function(resolve, reject) {\n            function errorListener(err) {\n                emitter.removeListener(name, resolver);\n                reject(err);\n            }\n            function resolver() {\n                if (typeof emitter.removeListener === \"function\") {\n                    emitter.removeListener(\"error\", errorListener);\n                }\n                resolve([].slice.call(arguments));\n            }\n            eventTargetAgnosticAddListener(emitter, name, resolver, {\n                once: true\n            });\n            if (name !== \"error\") {\n                addErrorHandlerIfEventEmitter(emitter, errorListener, {\n                    once: true\n                });\n            }\n        });\n    }\n    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n        if (typeof emitter.on === \"function\") {\n            eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n        }\n    }\n    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n        if (typeof emitter.on === \"function\") {\n            if (flags.once) {\n                emitter.once(name, listener);\n            } else {\n                emitter.on(name, listener);\n            }\n        } else if (typeof emitter.addEventListener === \"function\") {\n            emitter.addEventListener(name, function wrapListener(arg) {\n                if (flags.once) {\n                    emitter.removeEventListener(name, wrapListener);\n                }\n                listener(arg);\n            });\n        } else {\n            throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n        }\n    }\n    return events.exports;\n}\nvar inherits_browser = {\n    exports: {}\n};\nvar hasRequiredInherits_browser;\nfunction requireInherits_browser() {\n    if (hasRequiredInherits_browser) return inherits_browser.exports;\n    hasRequiredInherits_browser = 1;\n    if (typeof Object.create === \"function\") {\n        inherits_browser.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n                ctor.super_ = superCtor;\n                ctor.prototype = Object.create(superCtor.prototype, {\n                    constructor: {\n                        value: ctor,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n            }\n        };\n    } else {\n        inherits_browser.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n                ctor.super_ = superCtor;\n                var TempCtor = function() {};\n                TempCtor.prototype = superCtor.prototype;\n                ctor.prototype = new TempCtor();\n                ctor.prototype.constructor = ctor;\n            }\n        };\n    }\n    return inherits_browser.exports;\n}\nfunction getDefaultExportFromCjs(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nvar browser$1 = {\n    exports: {}\n};\nvar process = browser$1.exports = {};\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        return setTimeout(fun, 0);\n    }\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e2) {\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        return clearTimeout(marker);\n    }\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            return cachedClearTimeout.call(null, marker);\n        } catch (e2) {\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n    while(len){\n        currentQueue = queue;\n        queue = [];\n        while(++queueIndex < len){\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nprocess.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for(var i = 1; i < arguments.length; i++){\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\nprocess.title = \"browser\";\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = \"\";\nprocess.versions = {};\nfunction noop() {}\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function(name) {\n    return [];\n};\nprocess.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\nprocess.cwd = function() {\n    return \"/\";\n};\nprocess.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\nprocess.umask = function() {\n    return 0;\n};\nvar browserExports = browser$1.exports;\nconst process$1 = /* @__PURE__ */ getDefaultExportFromCjs(browserExports);\nvar streamBrowser;\nvar hasRequiredStreamBrowser;\nfunction requireStreamBrowser() {\n    if (hasRequiredStreamBrowser) return streamBrowser;\n    hasRequiredStreamBrowser = 1;\n    streamBrowser = requireEvents().EventEmitter;\n    return streamBrowser;\n}\nvar buffer = {};\nvar base64Js = {};\nvar hasRequiredBase64Js;\nfunction requireBase64Js() {\n    if (hasRequiredBase64Js) return base64Js;\n    hasRequiredBase64Js = 1;\n    base64Js.byteLength = byteLength;\n    base64Js.toByteArray = toByteArray;\n    base64Js.fromByteArray = fromByteArray;\n    var lookup = [];\n    var revLookup = [];\n    var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n    var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for(var i = 0, len = code.length; i < len; ++i){\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n    }\n    revLookup[\"-\".charCodeAt(0)] = 62;\n    revLookup[\"_\".charCodeAt(0)] = 63;\n    function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n            throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1) validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [\n            validLen,\n            placeHoldersLen\n        ];\n    }\n    function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for(i2 = 0; i2 < len2; i2 += 4){\n            tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n            arr[curByte++] = tmp >> 16 & 255;\n            arr[curByte++] = tmp >> 8 & 255;\n            arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n            tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n            arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n            tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n            arr[curByte++] = tmp >> 8 & 255;\n            arr[curByte++] = tmp & 255;\n        }\n        return arr;\n    }\n    function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n    }\n    function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for(var i2 = start; i2 < end; i2 += 3){\n            tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n            output.push(tripletToBase64(tmp));\n        }\n        return output.join(\"\");\n    }\n    function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for(var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength){\n            parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n            tmp = uint8[len2 - 1];\n            parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\");\n        } else if (extraBytes === 2) {\n            tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n            parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\");\n        }\n        return parts.join(\"\");\n    }\n    return base64Js;\n}\nvar ieee754 = {};\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var hasRequiredIeee754;\nfunction requireIeee754() {\n    if (hasRequiredIeee754) return ieee754;\n    hasRequiredIeee754 = 1;\n    ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s = buffer2[offset + i];\n        i += d;\n        e = s & (1 << -nBits) - 1;\n        s >>= -nBits;\n        nBits += eLen;\n        for(; nBits > 0; e = e * 256 + buffer2[offset + i], i += d, nBits -= 8){}\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for(; nBits > 0; m = m * 256 + buffer2[offset + i], i += d, nBits -= 8){}\n        if (e === 0) {\n            e = 1 - eBias;\n        } else if (e === eMax) {\n            return m ? NaN : (s ? -1 : 1) * Infinity;\n        } else {\n            m = m + Math.pow(2, mLen);\n            e = e - eBias;\n        }\n        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n    };\n    ieee754.write = function(buffer2, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n            m = isNaN(value) ? 1 : 0;\n            e = eMax;\n        } else {\n            e = Math.floor(Math.log(value) / Math.LN2);\n            if (value * (c = Math.pow(2, -e)) < 1) {\n                e--;\n                c *= 2;\n            }\n            if (e + eBias >= 1) {\n                value += rt / c;\n            } else {\n                value += rt * Math.pow(2, 1 - eBias);\n            }\n            if (value * c >= 2) {\n                e++;\n                c /= 2;\n            }\n            if (e + eBias >= eMax) {\n                m = 0;\n                e = eMax;\n            } else if (e + eBias >= 1) {\n                m = (value * c - 1) * Math.pow(2, mLen);\n                e = e + eBias;\n            } else {\n                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n                e = 0;\n            }\n        }\n        for(; mLen >= 8; buffer2[offset + i] = m & 255, i += d, m /= 256, mLen -= 8){}\n        e = e << mLen | m;\n        eLen += mLen;\n        for(; eLen > 0; buffer2[offset + i] = e & 255, i += d, e /= 256, eLen -= 8){}\n        buffer2[offset + i - d] |= s * 128;\n    };\n    return ieee754;\n}\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ var hasRequiredBuffer;\nfunction requireBuffer() {\n    if (hasRequiredBuffer) return buffer;\n    hasRequiredBuffer = 1;\n    (function(exports) {\n        var base64 = requireBase64Js();\n        var ieee7542 = requireIeee754();\n        var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n        exports.Buffer = Buffer2;\n        exports.SlowBuffer = SlowBuffer;\n        exports.INSPECT_MAX_BYTES = 50;\n        var K_MAX_LENGTH = 2147483647;\n        exports.kMaxLength = K_MAX_LENGTH;\n        Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n        if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n            console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n        }\n        function typedArraySupport() {\n            try {\n                var arr = new Uint8Array(1);\n                var proto = {\n                    foo: function() {\n                        return 42;\n                    }\n                };\n                Object.setPrototypeOf(proto, Uint8Array.prototype);\n                Object.setPrototypeOf(arr, proto);\n                return arr.foo() === 42;\n            } catch (e) {\n                return false;\n            }\n        }\n        Object.defineProperty(Buffer2.prototype, \"parent\", {\n            enumerable: true,\n            get: function() {\n                if (!Buffer2.isBuffer(this)) return void 0;\n                return this.buffer;\n            }\n        });\n        Object.defineProperty(Buffer2.prototype, \"offset\", {\n            enumerable: true,\n            get: function() {\n                if (!Buffer2.isBuffer(this)) return void 0;\n                return this.byteOffset;\n            }\n        });\n        function createBuffer(length) {\n            if (length > K_MAX_LENGTH) {\n                throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n            }\n            var buf = new Uint8Array(length);\n            Object.setPrototypeOf(buf, Buffer2.prototype);\n            return buf;\n        }\n        function Buffer2(arg, encodingOrOffset, length) {\n            if (typeof arg === \"number\") {\n                if (typeof encodingOrOffset === \"string\") {\n                    throw new TypeError('The \"string\" argument must be of type string. Received type number');\n                }\n                return allocUnsafe(arg);\n            }\n            return from(arg, encodingOrOffset, length);\n        }\n        Buffer2.poolSize = 8192;\n        function from(value, encodingOrOffset, length) {\n            if (typeof value === \"string\") {\n                return fromString(value, encodingOrOffset);\n            }\n            if (ArrayBuffer.isView(value)) {\n                return fromArrayView(value);\n            }\n            if (value == null) {\n                throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n            }\n            if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n                return fromArrayBuffer(value, encodingOrOffset, length);\n            }\n            if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n                return fromArrayBuffer(value, encodingOrOffset, length);\n            }\n            if (typeof value === \"number\") {\n                throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n            }\n            var valueOf = value.valueOf && value.valueOf();\n            if (valueOf != null && valueOf !== value) {\n                return Buffer2.from(valueOf, encodingOrOffset, length);\n            }\n            var b = fromObject(value);\n            if (b) return b;\n            if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n                return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n            }\n            throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n        }\n        Buffer2.from = function(value, encodingOrOffset, length) {\n            return from(value, encodingOrOffset, length);\n        };\n        Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);\n        Object.setPrototypeOf(Buffer2, Uint8Array);\n        function assertSize(size) {\n            if (typeof size !== \"number\") {\n                throw new TypeError('\"size\" argument must be of type number');\n            } else if (size < 0) {\n                throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n            }\n        }\n        function alloc(size, fill, encoding) {\n            assertSize(size);\n            if (size <= 0) {\n                return createBuffer(size);\n            }\n            if (fill !== void 0) {\n                return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n            }\n            return createBuffer(size);\n        }\n        Buffer2.alloc = function(size, fill, encoding) {\n            return alloc(size, fill, encoding);\n        };\n        function allocUnsafe(size) {\n            assertSize(size);\n            return createBuffer(size < 0 ? 0 : checked(size) | 0);\n        }\n        Buffer2.allocUnsafe = function(size) {\n            return allocUnsafe(size);\n        };\n        Buffer2.allocUnsafeSlow = function(size) {\n            return allocUnsafe(size);\n        };\n        function fromString(string, encoding) {\n            if (typeof encoding !== \"string\" || encoding === \"\") {\n                encoding = \"utf8\";\n            }\n            if (!Buffer2.isEncoding(encoding)) {\n                throw new TypeError(\"Unknown encoding: \" + encoding);\n            }\n            var length = byteLength(string, encoding) | 0;\n            var buf = createBuffer(length);\n            var actual = buf.write(string, encoding);\n            if (actual !== length) {\n                buf = buf.slice(0, actual);\n            }\n            return buf;\n        }\n        function fromArrayLike(array) {\n            var length = array.length < 0 ? 0 : checked(array.length) | 0;\n            var buf = createBuffer(length);\n            for(var i = 0; i < length; i += 1){\n                buf[i] = array[i] & 255;\n            }\n            return buf;\n        }\n        function fromArrayView(arrayView) {\n            if (isInstance(arrayView, Uint8Array)) {\n                var copy = new Uint8Array(arrayView);\n                return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n            }\n            return fromArrayLike(arrayView);\n        }\n        function fromArrayBuffer(array, byteOffset, length) {\n            if (byteOffset < 0 || array.byteLength < byteOffset) {\n                throw new RangeError('\"offset\" is outside of buffer bounds');\n            }\n            if (array.byteLength < byteOffset + (length || 0)) {\n                throw new RangeError('\"length\" is outside of buffer bounds');\n            }\n            var buf;\n            if (byteOffset === void 0 && length === void 0) {\n                buf = new Uint8Array(array);\n            } else if (length === void 0) {\n                buf = new Uint8Array(array, byteOffset);\n            } else {\n                buf = new Uint8Array(array, byteOffset, length);\n            }\n            Object.setPrototypeOf(buf, Buffer2.prototype);\n            return buf;\n        }\n        function fromObject(obj) {\n            if (Buffer2.isBuffer(obj)) {\n                var len = checked(obj.length) | 0;\n                var buf = createBuffer(len);\n                if (buf.length === 0) {\n                    return buf;\n                }\n                obj.copy(buf, 0, 0, len);\n                return buf;\n            }\n            if (obj.length !== void 0) {\n                if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n                    return createBuffer(0);\n                }\n                return fromArrayLike(obj);\n            }\n            if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n                return fromArrayLike(obj.data);\n            }\n        }\n        function checked(length) {\n            if (length >= K_MAX_LENGTH) {\n                throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n            }\n            return length | 0;\n        }\n        function SlowBuffer(length) {\n            if (+length != length) {\n                length = 0;\n            }\n            return Buffer2.alloc(+length);\n        }\n        Buffer2.isBuffer = function isBuffer(b) {\n            return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n        };\n        Buffer2.compare = function compare(a, b) {\n            if (isInstance(a, Uint8Array)) a = Buffer2.from(a, a.offset, a.byteLength);\n            if (isInstance(b, Uint8Array)) b = Buffer2.from(b, b.offset, b.byteLength);\n            if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n                throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n            }\n            if (a === b) return 0;\n            var x = a.length;\n            var y = b.length;\n            for(var i = 0, len = Math.min(x, y); i < len; ++i){\n                if (a[i] !== b[i]) {\n                    x = a[i];\n                    y = b[i];\n                    break;\n                }\n            }\n            if (x < y) return -1;\n            if (y < x) return 1;\n            return 0;\n        };\n        Buffer2.isEncoding = function isEncoding(encoding) {\n            switch(String(encoding).toLowerCase()){\n                case \"hex\":\n                case \"utf8\":\n                case \"utf-8\":\n                case \"ascii\":\n                case \"latin1\":\n                case \"binary\":\n                case \"base64\":\n                case \"ucs2\":\n                case \"ucs-2\":\n                case \"utf16le\":\n                case \"utf-16le\":\n                    return true;\n                default:\n                    return false;\n            }\n        };\n        Buffer2.concat = function concat(list, length) {\n            if (!Array.isArray(list)) {\n                throw new TypeError('\"list\" argument must be an Array of Buffers');\n            }\n            if (list.length === 0) {\n                return Buffer2.alloc(0);\n            }\n            var i;\n            if (length === void 0) {\n                length = 0;\n                for(i = 0; i < list.length; ++i){\n                    length += list[i].length;\n                }\n            }\n            var buffer2 = Buffer2.allocUnsafe(length);\n            var pos = 0;\n            for(i = 0; i < list.length; ++i){\n                var buf = list[i];\n                if (isInstance(buf, Uint8Array)) {\n                    if (pos + buf.length > buffer2.length) {\n                        Buffer2.from(buf).copy(buffer2, pos);\n                    } else {\n                        Uint8Array.prototype.set.call(buffer2, buf, pos);\n                    }\n                } else if (!Buffer2.isBuffer(buf)) {\n                    throw new TypeError('\"list\" argument must be an Array of Buffers');\n                } else {\n                    buf.copy(buffer2, pos);\n                }\n                pos += buf.length;\n            }\n            return buffer2;\n        };\n        function byteLength(string, encoding) {\n            if (Buffer2.isBuffer(string)) {\n                return string.length;\n            }\n            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n                return string.byteLength;\n            }\n            if (typeof string !== \"string\") {\n                throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);\n            }\n            var len = string.length;\n            var mustMatch = arguments.length > 2 && arguments[2] === true;\n            if (!mustMatch && len === 0) return 0;\n            var loweredCase = false;\n            for(;;){\n                switch(encoding){\n                    case \"ascii\":\n                    case \"latin1\":\n                    case \"binary\":\n                        return len;\n                    case \"utf8\":\n                    case \"utf-8\":\n                        return utf8ToBytes(string).length;\n                    case \"ucs2\":\n                    case \"ucs-2\":\n                    case \"utf16le\":\n                    case \"utf-16le\":\n                        return len * 2;\n                    case \"hex\":\n                        return len >>> 1;\n                    case \"base64\":\n                        return base64ToBytes(string).length;\n                    default:\n                        if (loweredCase) {\n                            return mustMatch ? -1 : utf8ToBytes(string).length;\n                        }\n                        encoding = (\"\" + encoding).toLowerCase();\n                        loweredCase = true;\n                }\n            }\n        }\n        Buffer2.byteLength = byteLength;\n        function slowToString(encoding, start, end) {\n            var loweredCase = false;\n            if (start === void 0 || start < 0) {\n                start = 0;\n            }\n            if (start > this.length) {\n                return \"\";\n            }\n            if (end === void 0 || end > this.length) {\n                end = this.length;\n            }\n            if (end <= 0) {\n                return \"\";\n            }\n            end >>>= 0;\n            start >>>= 0;\n            if (end <= start) {\n                return \"\";\n            }\n            if (!encoding) encoding = \"utf8\";\n            while(true){\n                switch(encoding){\n                    case \"hex\":\n                        return hexSlice(this, start, end);\n                    case \"utf8\":\n                    case \"utf-8\":\n                        return utf8Slice(this, start, end);\n                    case \"ascii\":\n                        return asciiSlice(this, start, end);\n                    case \"latin1\":\n                    case \"binary\":\n                        return latin1Slice(this, start, end);\n                    case \"base64\":\n                        return base64Slice(this, start, end);\n                    case \"ucs2\":\n                    case \"ucs-2\":\n                    case \"utf16le\":\n                    case \"utf-16le\":\n                        return utf16leSlice(this, start, end);\n                    default:\n                        if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n                        encoding = (encoding + \"\").toLowerCase();\n                        loweredCase = true;\n                }\n            }\n        }\n        Buffer2.prototype._isBuffer = true;\n        function swap(b, n, m) {\n            var i = b[n];\n            b[n] = b[m];\n            b[m] = i;\n        }\n        Buffer2.prototype.swap16 = function swap16() {\n            var len = this.length;\n            if (len % 2 !== 0) {\n                throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n            }\n            for(var i = 0; i < len; i += 2){\n                swap(this, i, i + 1);\n            }\n            return this;\n        };\n        Buffer2.prototype.swap32 = function swap32() {\n            var len = this.length;\n            if (len % 4 !== 0) {\n                throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n            }\n            for(var i = 0; i < len; i += 4){\n                swap(this, i, i + 3);\n                swap(this, i + 1, i + 2);\n            }\n            return this;\n        };\n        Buffer2.prototype.swap64 = function swap64() {\n            var len = this.length;\n            if (len % 8 !== 0) {\n                throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n            }\n            for(var i = 0; i < len; i += 8){\n                swap(this, i, i + 7);\n                swap(this, i + 1, i + 6);\n                swap(this, i + 2, i + 5);\n                swap(this, i + 3, i + 4);\n            }\n            return this;\n        };\n        Buffer2.prototype.toString = function toString() {\n            var length = this.length;\n            if (length === 0) return \"\";\n            if (arguments.length === 0) return utf8Slice(this, 0, length);\n            return slowToString.apply(this, arguments);\n        };\n        Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n        Buffer2.prototype.equals = function equals(b) {\n            if (!Buffer2.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n            if (this === b) return true;\n            return Buffer2.compare(this, b) === 0;\n        };\n        Buffer2.prototype.inspect = function inspect() {\n            var str = \"\";\n            var max2 = exports.INSPECT_MAX_BYTES;\n            str = this.toString(\"hex\", 0, max2).replace(/(.{2})/g, \"$1 \").trim();\n            if (this.length > max2) str += \" ... \";\n            return \"<Buffer \" + str + \">\";\n        };\n        if (customInspectSymbol) {\n            Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n        }\n        Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n            if (isInstance(target, Uint8Array)) {\n                target = Buffer2.from(target, target.offset, target.byteLength);\n            }\n            if (!Buffer2.isBuffer(target)) {\n                throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);\n            }\n            if (start === void 0) {\n                start = 0;\n            }\n            if (end === void 0) {\n                end = target ? target.length : 0;\n            }\n            if (thisStart === void 0) {\n                thisStart = 0;\n            }\n            if (thisEnd === void 0) {\n                thisEnd = this.length;\n            }\n            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n                throw new RangeError(\"out of range index\");\n            }\n            if (thisStart >= thisEnd && start >= end) {\n                return 0;\n            }\n            if (thisStart >= thisEnd) {\n                return -1;\n            }\n            if (start >= end) {\n                return 1;\n            }\n            start >>>= 0;\n            end >>>= 0;\n            thisStart >>>= 0;\n            thisEnd >>>= 0;\n            if (this === target) return 0;\n            var x = thisEnd - thisStart;\n            var y = end - start;\n            var len = Math.min(x, y);\n            var thisCopy = this.slice(thisStart, thisEnd);\n            var targetCopy = target.slice(start, end);\n            for(var i = 0; i < len; ++i){\n                if (thisCopy[i] !== targetCopy[i]) {\n                    x = thisCopy[i];\n                    y = targetCopy[i];\n                    break;\n                }\n            }\n            if (x < y) return -1;\n            if (y < x) return 1;\n            return 0;\n        };\n        function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {\n            if (buffer2.length === 0) return -1;\n            if (typeof byteOffset === \"string\") {\n                encoding = byteOffset;\n                byteOffset = 0;\n            } else if (byteOffset > 2147483647) {\n                byteOffset = 2147483647;\n            } else if (byteOffset < -2147483648) {\n                byteOffset = -2147483648;\n            }\n            byteOffset = +byteOffset;\n            if (numberIsNaN(byteOffset)) {\n                byteOffset = dir ? 0 : buffer2.length - 1;\n            }\n            if (byteOffset < 0) byteOffset = buffer2.length + byteOffset;\n            if (byteOffset >= buffer2.length) {\n                if (dir) return -1;\n                else byteOffset = buffer2.length - 1;\n            } else if (byteOffset < 0) {\n                if (dir) byteOffset = 0;\n                else return -1;\n            }\n            if (typeof val === \"string\") {\n                val = Buffer2.from(val, encoding);\n            }\n            if (Buffer2.isBuffer(val)) {\n                if (val.length === 0) {\n                    return -1;\n                }\n                return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);\n            } else if (typeof val === \"number\") {\n                val = val & 255;\n                if (typeof Uint8Array.prototype.indexOf === \"function\") {\n                    if (dir) {\n                        return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);\n                    } else {\n                        return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);\n                    }\n                }\n                return arrayIndexOf(buffer2, [\n                    val\n                ], byteOffset, encoding, dir);\n            }\n            throw new TypeError(\"val must be string, number or Buffer\");\n        }\n        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n            var indexSize = 1;\n            var arrLength = arr.length;\n            var valLength = val.length;\n            if (encoding !== void 0) {\n                encoding = String(encoding).toLowerCase();\n                if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n                    if (arr.length < 2 || val.length < 2) {\n                        return -1;\n                    }\n                    indexSize = 2;\n                    arrLength /= 2;\n                    valLength /= 2;\n                    byteOffset /= 2;\n                }\n            }\n            function read(buf, i2) {\n                if (indexSize === 1) {\n                    return buf[i2];\n                } else {\n                    return buf.readUInt16BE(i2 * indexSize);\n                }\n            }\n            var i;\n            if (dir) {\n                var foundIndex = -1;\n                for(i = byteOffset; i < arrLength; i++){\n                    if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                        if (foundIndex === -1) foundIndex = i;\n                        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n                    } else {\n                        if (foundIndex !== -1) i -= i - foundIndex;\n                        foundIndex = -1;\n                    }\n                }\n            } else {\n                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n                for(i = byteOffset; i >= 0; i--){\n                    var found = true;\n                    for(var j = 0; j < valLength; j++){\n                        if (read(arr, i + j) !== read(val, j)) {\n                            found = false;\n                            break;\n                        }\n                    }\n                    if (found) return i;\n                }\n            }\n            return -1;\n        }\n        Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n            return this.indexOf(val, byteOffset, encoding) !== -1;\n        };\n        Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n        };\n        Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n        };\n        function hexWrite(buf, string, offset, length) {\n            offset = Number(offset) || 0;\n            var remaining = buf.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = Number(length);\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n            var strLen = string.length;\n            if (length > strLen / 2) {\n                length = strLen / 2;\n            }\n            for(var i = 0; i < length; ++i){\n                var parsed = parseInt(string.substr(i * 2, 2), 16);\n                if (numberIsNaN(parsed)) return i;\n                buf[offset + i] = parsed;\n            }\n            return i;\n        }\n        function utf8Write(buf, string, offset, length) {\n            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n        }\n        function asciiWrite(buf, string, offset, length) {\n            return blitBuffer(asciiToBytes(string), buf, offset, length);\n        }\n        function base64Write(buf, string, offset, length) {\n            return blitBuffer(base64ToBytes(string), buf, offset, length);\n        }\n        function ucs2Write(buf, string, offset, length) {\n            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n        }\n        Buffer2.prototype.write = function write(string, offset, length, encoding) {\n            if (offset === void 0) {\n                encoding = \"utf8\";\n                length = this.length;\n                offset = 0;\n            } else if (length === void 0 && typeof offset === \"string\") {\n                encoding = offset;\n                length = this.length;\n                offset = 0;\n            } else if (isFinite(offset)) {\n                offset = offset >>> 0;\n                if (isFinite(length)) {\n                    length = length >>> 0;\n                    if (encoding === void 0) encoding = \"utf8\";\n                } else {\n                    encoding = length;\n                    length = void 0;\n                }\n            } else {\n                throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n            }\n            var remaining = this.length - offset;\n            if (length === void 0 || length > remaining) length = remaining;\n            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n                throw new RangeError(\"Attempt to write outside buffer bounds\");\n            }\n            if (!encoding) encoding = \"utf8\";\n            var loweredCase = false;\n            for(;;){\n                switch(encoding){\n                    case \"hex\":\n                        return hexWrite(this, string, offset, length);\n                    case \"utf8\":\n                    case \"utf-8\":\n                        return utf8Write(this, string, offset, length);\n                    case \"ascii\":\n                    case \"latin1\":\n                    case \"binary\":\n                        return asciiWrite(this, string, offset, length);\n                    case \"base64\":\n                        return base64Write(this, string, offset, length);\n                    case \"ucs2\":\n                    case \"ucs-2\":\n                    case \"utf16le\":\n                    case \"utf-16le\":\n                        return ucs2Write(this, string, offset, length);\n                    default:\n                        if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n                        encoding = (\"\" + encoding).toLowerCase();\n                        loweredCase = true;\n                }\n            }\n        };\n        Buffer2.prototype.toJSON = function toJSON() {\n            return {\n                type: \"Buffer\",\n                data: Array.prototype.slice.call(this._arr || this, 0)\n            };\n        };\n        function base64Slice(buf, start, end) {\n            if (start === 0 && end === buf.length) {\n                return base64.fromByteArray(buf);\n            } else {\n                return base64.fromByteArray(buf.slice(start, end));\n            }\n        }\n        function utf8Slice(buf, start, end) {\n            end = Math.min(buf.length, end);\n            var res = [];\n            var i = start;\n            while(i < end){\n                var firstByte = buf[i];\n                var codePoint = null;\n                var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n                if (i + bytesPerSequence <= end) {\n                    var secondByte, thirdByte, fourthByte, tempCodePoint;\n                    switch(bytesPerSequence){\n                        case 1:\n                            if (firstByte < 128) {\n                                codePoint = firstByte;\n                            }\n                            break;\n                        case 2:\n                            secondByte = buf[i + 1];\n                            if ((secondByte & 192) === 128) {\n                                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                                if (tempCodePoint > 127) {\n                                    codePoint = tempCodePoint;\n                                }\n                            }\n                            break;\n                        case 3:\n                            secondByte = buf[i + 1];\n                            thirdByte = buf[i + 2];\n                            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                                    codePoint = tempCodePoint;\n                                }\n                            }\n                            break;\n                        case 4:\n                            secondByte = buf[i + 1];\n                            thirdByte = buf[i + 2];\n                            fourthByte = buf[i + 3];\n                            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                                    codePoint = tempCodePoint;\n                                }\n                            }\n                    }\n                }\n                if (codePoint === null) {\n                    codePoint = 65533;\n                    bytesPerSequence = 1;\n                } else if (codePoint > 65535) {\n                    codePoint -= 65536;\n                    res.push(codePoint >>> 10 & 1023 | 55296);\n                    codePoint = 56320 | codePoint & 1023;\n                }\n                res.push(codePoint);\n                i += bytesPerSequence;\n            }\n            return decodeCodePointsArray(res);\n        }\n        var MAX_ARGUMENTS_LENGTH = 4096;\n        function decodeCodePointsArray(codePoints) {\n            var len = codePoints.length;\n            if (len <= MAX_ARGUMENTS_LENGTH) {\n                return String.fromCharCode.apply(String, codePoints);\n            }\n            var res = \"\";\n            var i = 0;\n            while(i < len){\n                res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n            }\n            return res;\n        }\n        function asciiSlice(buf, start, end) {\n            var ret = \"\";\n            end = Math.min(buf.length, end);\n            for(var i = start; i < end; ++i){\n                ret += String.fromCharCode(buf[i] & 127);\n            }\n            return ret;\n        }\n        function latin1Slice(buf, start, end) {\n            var ret = \"\";\n            end = Math.min(buf.length, end);\n            for(var i = start; i < end; ++i){\n                ret += String.fromCharCode(buf[i]);\n            }\n            return ret;\n        }\n        function hexSlice(buf, start, end) {\n            var len = buf.length;\n            if (!start || start < 0) start = 0;\n            if (!end || end < 0 || end > len) end = len;\n            var out = \"\";\n            for(var i = start; i < end; ++i){\n                out += hexSliceLookupTable[buf[i]];\n            }\n            return out;\n        }\n        function utf16leSlice(buf, start, end) {\n            var bytes = buf.slice(start, end);\n            var res = \"\";\n            for(var i = 0; i < bytes.length - 1; i += 2){\n                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n            }\n            return res;\n        }\n        Buffer2.prototype.slice = function slice(start, end) {\n            var len = this.length;\n            start = ~~start;\n            end = end === void 0 ? len : ~~end;\n            if (start < 0) {\n                start += len;\n                if (start < 0) start = 0;\n            } else if (start > len) {\n                start = len;\n            }\n            if (end < 0) {\n                end += len;\n                if (end < 0) end = 0;\n            } else if (end > len) {\n                end = len;\n            }\n            if (end < start) end = start;\n            var newBuf = this.subarray(start, end);\n            Object.setPrototypeOf(newBuf, Buffer2.prototype);\n            return newBuf;\n        };\n        function checkOffset(offset, ext, length) {\n            if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n            if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n        }\n        Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n            offset = offset >>> 0;\n            byteLength2 = byteLength2 >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength2, this.length);\n            var val = this[offset];\n            var mul = 1;\n            var i = 0;\n            while(++i < byteLength2 && (mul *= 256)){\n                val += this[offset + i] * mul;\n            }\n            return val;\n        };\n        Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n            offset = offset >>> 0;\n            byteLength2 = byteLength2 >>> 0;\n            if (!noAssert) {\n                checkOffset(offset, byteLength2, this.length);\n            }\n            var val = this[offset + --byteLength2];\n            var mul = 1;\n            while(byteLength2 > 0 && (mul *= 256)){\n                val += this[offset + --byteLength2] * mul;\n            }\n            return val;\n        };\n        Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 1, this.length);\n            return this[offset];\n        };\n        Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            return this[offset] | this[offset + 1] << 8;\n        };\n        Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            return this[offset] << 8 | this[offset + 1];\n        };\n        Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n        };\n        Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n        };\n        Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n            offset = offset >>> 0;\n            byteLength2 = byteLength2 >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength2, this.length);\n            var val = this[offset];\n            var mul = 1;\n            var i = 0;\n            while(++i < byteLength2 && (mul *= 256)){\n                val += this[offset + i] * mul;\n            }\n            mul *= 128;\n            if (val >= mul) val -= Math.pow(2, 8 * byteLength2);\n            return val;\n        };\n        Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n            offset = offset >>> 0;\n            byteLength2 = byteLength2 >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength2, this.length);\n            var i = byteLength2;\n            var mul = 1;\n            var val = this[offset + --i];\n            while(i > 0 && (mul *= 256)){\n                val += this[offset + --i] * mul;\n            }\n            mul *= 128;\n            if (val >= mul) val -= Math.pow(2, 8 * byteLength2);\n            return val;\n        };\n        Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 1, this.length);\n            if (!(this[offset] & 128)) return this[offset];\n            return (255 - this[offset] + 1) * -1;\n        };\n        Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            var val = this[offset] | this[offset + 1] << 8;\n            return val & 32768 ? val | 4294901760 : val;\n        };\n        Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            var val = this[offset + 1] | this[offset] << 8;\n            return val & 32768 ? val | 4294901760 : val;\n        };\n        Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n        };\n        Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n        };\n        Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return ieee7542.read(this, offset, true, 23, 4);\n        };\n        Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return ieee7542.read(this, offset, false, 23, 4);\n        };\n        Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 8, this.length);\n            return ieee7542.read(this, offset, true, 52, 8);\n        };\n        Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 8, this.length);\n            return ieee7542.read(this, offset, false, 52, 8);\n        };\n        function checkInt(buf, value, offset, ext, max2, min2) {\n            if (!Buffer2.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n            if (value > max2 || value < min2) throw new RangeError('\"value\" argument is out of bounds');\n            if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n        }\n        Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            byteLength2 = byteLength2 >>> 0;\n            if (!noAssert) {\n                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n                checkInt(this, value, offset, byteLength2, maxBytes, 0);\n            }\n            var mul = 1;\n            var i = 0;\n            this[offset] = value & 255;\n            while(++i < byteLength2 && (mul *= 256)){\n                this[offset + i] = value / mul & 255;\n            }\n            return offset + byteLength2;\n        };\n        Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            byteLength2 = byteLength2 >>> 0;\n            if (!noAssert) {\n                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n                checkInt(this, value, offset, byteLength2, maxBytes, 0);\n            }\n            var i = byteLength2 - 1;\n            var mul = 1;\n            this[offset + i] = value & 255;\n            while(--i >= 0 && (mul *= 256)){\n                this[offset + i] = value / mul & 255;\n            }\n            return offset + byteLength2;\n        };\n        Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 1, 255, 0);\n            this[offset] = value & 255;\n            return offset + 1;\n        };\n        Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);\n            this[offset] = value & 255;\n            this[offset + 1] = value >>> 8;\n            return offset + 2;\n        };\n        Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);\n            this[offset] = value >>> 8;\n            this[offset + 1] = value & 255;\n            return offset + 2;\n        };\n        Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);\n            this[offset + 3] = value >>> 24;\n            this[offset + 2] = value >>> 16;\n            this[offset + 1] = value >>> 8;\n            this[offset] = value & 255;\n            return offset + 4;\n        };\n        Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);\n            this[offset] = value >>> 24;\n            this[offset + 1] = value >>> 16;\n            this[offset + 2] = value >>> 8;\n            this[offset + 3] = value & 255;\n            return offset + 4;\n        };\n        Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n                var limit = Math.pow(2, 8 * byteLength2 - 1);\n                checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n            }\n            var i = 0;\n            var mul = 1;\n            var sub = 0;\n            this[offset] = value & 255;\n            while(++i < byteLength2 && (mul *= 256)){\n                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n                    sub = 1;\n                }\n                this[offset + i] = (value / mul >> 0) - sub & 255;\n            }\n            return offset + byteLength2;\n        };\n        Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n                var limit = Math.pow(2, 8 * byteLength2 - 1);\n                checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n            }\n            var i = byteLength2 - 1;\n            var mul = 1;\n            var sub = 0;\n            this[offset + i] = value & 255;\n            while(--i >= 0 && (mul *= 256)){\n                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n                    sub = 1;\n                }\n                this[offset + i] = (value / mul >> 0) - sub & 255;\n            }\n            return offset + byteLength2;\n        };\n        Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 1, 127, -128);\n            if (value < 0) value = 255 + value + 1;\n            this[offset] = value & 255;\n            return offset + 1;\n        };\n        Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);\n            this[offset] = value & 255;\n            this[offset + 1] = value >>> 8;\n            return offset + 2;\n        };\n        Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);\n            this[offset] = value >>> 8;\n            this[offset + 1] = value & 255;\n            return offset + 2;\n        };\n        Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);\n            this[offset] = value & 255;\n            this[offset + 1] = value >>> 8;\n            this[offset + 2] = value >>> 16;\n            this[offset + 3] = value >>> 24;\n            return offset + 4;\n        };\n        Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);\n            if (value < 0) value = 4294967295 + value + 1;\n            this[offset] = value >>> 24;\n            this[offset + 1] = value >>> 16;\n            this[offset + 2] = value >>> 8;\n            this[offset + 3] = value & 255;\n            return offset + 4;\n        };\n        function checkIEEE754(buf, value, offset, ext, max2, min2) {\n            if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n            if (offset < 0) throw new RangeError(\"Index out of range\");\n        }\n        function writeFloat(buf, value, offset, littleEndian, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n                checkIEEE754(buf, value, offset, 4);\n            }\n            ieee7542.write(buf, value, offset, littleEndian, 23, 4);\n            return offset + 4;\n        }\n        Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n            return writeFloat(this, value, offset, true, noAssert);\n        };\n        Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n            return writeFloat(this, value, offset, false, noAssert);\n        };\n        function writeDouble(buf, value, offset, littleEndian, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n                checkIEEE754(buf, value, offset, 8);\n            }\n            ieee7542.write(buf, value, offset, littleEndian, 52, 8);\n            return offset + 8;\n        }\n        Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n            return writeDouble(this, value, offset, true, noAssert);\n        };\n        Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n            return writeDouble(this, value, offset, false, noAssert);\n        };\n        Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n            if (!Buffer2.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n            if (!start) start = 0;\n            if (!end && end !== 0) end = this.length;\n            if (targetStart >= target.length) targetStart = target.length;\n            if (!targetStart) targetStart = 0;\n            if (end > 0 && end < start) end = start;\n            if (end === start) return 0;\n            if (target.length === 0 || this.length === 0) return 0;\n            if (targetStart < 0) {\n                throw new RangeError(\"targetStart out of bounds\");\n            }\n            if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n            if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n            if (end > this.length) end = this.length;\n            if (target.length - targetStart < end - start) {\n                end = target.length - targetStart + start;\n            }\n            var len = end - start;\n            if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n                this.copyWithin(targetStart, start, end);\n            } else {\n                Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n            }\n            return len;\n        };\n        Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n            if (typeof val === \"string\") {\n                if (typeof start === \"string\") {\n                    encoding = start;\n                    start = 0;\n                    end = this.length;\n                } else if (typeof end === \"string\") {\n                    encoding = end;\n                    end = this.length;\n                }\n                if (encoding !== void 0 && typeof encoding !== \"string\") {\n                    throw new TypeError(\"encoding must be a string\");\n                }\n                if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n                    throw new TypeError(\"Unknown encoding: \" + encoding);\n                }\n                if (val.length === 1) {\n                    var code = val.charCodeAt(0);\n                    if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n                        val = code;\n                    }\n                }\n            } else if (typeof val === \"number\") {\n                val = val & 255;\n            } else if (typeof val === \"boolean\") {\n                val = Number(val);\n            }\n            if (start < 0 || this.length < start || this.length < end) {\n                throw new RangeError(\"Out of range index\");\n            }\n            if (end <= start) {\n                return this;\n            }\n            start = start >>> 0;\n            end = end === void 0 ? this.length : end >>> 0;\n            if (!val) val = 0;\n            var i;\n            if (typeof val === \"number\") {\n                for(i = start; i < end; ++i){\n                    this[i] = val;\n                }\n            } else {\n                var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n                var len = bytes.length;\n                if (len === 0) {\n                    throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n                }\n                for(i = 0; i < end - start; ++i){\n                    this[i + start] = bytes[i % len];\n                }\n            }\n            return this;\n        };\n        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n        function base64clean(str) {\n            str = str.split(\"=\")[0];\n            str = str.trim().replace(INVALID_BASE64_RE, \"\");\n            if (str.length < 2) return \"\";\n            while(str.length % 4 !== 0){\n                str = str + \"=\";\n            }\n            return str;\n        }\n        function utf8ToBytes(string, units) {\n            units = units || Infinity;\n            var codePoint;\n            var length = string.length;\n            var leadSurrogate = null;\n            var bytes = [];\n            for(var i = 0; i < length; ++i){\n                codePoint = string.charCodeAt(i);\n                if (codePoint > 55295 && codePoint < 57344) {\n                    if (!leadSurrogate) {\n                        if (codePoint > 56319) {\n                            if ((units -= 3) > -1) bytes.push(239, 191, 189);\n                            continue;\n                        } else if (i + 1 === length) {\n                            if ((units -= 3) > -1) bytes.push(239, 191, 189);\n                            continue;\n                        }\n                        leadSurrogate = codePoint;\n                        continue;\n                    }\n                    if (codePoint < 56320) {\n                        if ((units -= 3) > -1) bytes.push(239, 191, 189);\n                        leadSurrogate = codePoint;\n                        continue;\n                    }\n                    codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n                } else if (leadSurrogate) {\n                    if ((units -= 3) > -1) bytes.push(239, 191, 189);\n                }\n                leadSurrogate = null;\n                if (codePoint < 128) {\n                    if ((units -= 1) < 0) break;\n                    bytes.push(codePoint);\n                } else if (codePoint < 2048) {\n                    if ((units -= 2) < 0) break;\n                    bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);\n                } else if (codePoint < 65536) {\n                    if ((units -= 3) < 0) break;\n                    bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n                } else if (codePoint < 1114112) {\n                    if ((units -= 4) < 0) break;\n                    bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n                } else {\n                    throw new Error(\"Invalid code point\");\n                }\n            }\n            return bytes;\n        }\n        function asciiToBytes(str) {\n            var byteArray = [];\n            for(var i = 0; i < str.length; ++i){\n                byteArray.push(str.charCodeAt(i) & 255);\n            }\n            return byteArray;\n        }\n        function utf16leToBytes(str, units) {\n            var c, hi, lo;\n            var byteArray = [];\n            for(var i = 0; i < str.length; ++i){\n                if ((units -= 2) < 0) break;\n                c = str.charCodeAt(i);\n                hi = c >> 8;\n                lo = c % 256;\n                byteArray.push(lo);\n                byteArray.push(hi);\n            }\n            return byteArray;\n        }\n        function base64ToBytes(str) {\n            return base64.toByteArray(base64clean(str));\n        }\n        function blitBuffer(src, dst, offset, length) {\n            for(var i = 0; i < length; ++i){\n                if (i + offset >= dst.length || i >= src.length) break;\n                dst[i + offset] = src[i];\n            }\n            return i;\n        }\n        function isInstance(obj, type2) {\n            return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;\n        }\n        function numberIsNaN(obj) {\n            return obj !== obj;\n        }\n        var hexSliceLookupTable = function() {\n            var alphabet = \"0123456789abcdef\";\n            var table = new Array(256);\n            for(var i = 0; i < 16; ++i){\n                var i16 = i * 16;\n                for(var j = 0; j < 16; ++j){\n                    table[i16 + j] = alphabet[i] + alphabet[j];\n                }\n            }\n            return table;\n        }();\n    })(buffer);\n    return buffer;\n}\nvar util = {};\nvar types = {};\nvar shams$1;\nvar hasRequiredShams$1;\nfunction requireShams$1() {\n    if (hasRequiredShams$1) return shams$1;\n    hasRequiredShams$1 = 1;\n    shams$1 = function hasSymbols2() {\n        if (typeof Symbol !== \"function\" || typeof Object.getOwnPropertySymbols !== \"function\") {\n            return false;\n        }\n        if (typeof Symbol.iterator === \"symbol\") {\n            return true;\n        }\n        var obj = {};\n        var sym = Symbol(\"test\");\n        var symObj = Object(sym);\n        if (typeof sym === \"string\") {\n            return false;\n        }\n        if (Object.prototype.toString.call(sym) !== \"[object Symbol]\") {\n            return false;\n        }\n        if (Object.prototype.toString.call(symObj) !== \"[object Symbol]\") {\n            return false;\n        }\n        var symVal = 42;\n        obj[sym] = symVal;\n        for(var _ in obj){\n            return false;\n        }\n        if (typeof Object.keys === \"function\" && Object.keys(obj).length !== 0) {\n            return false;\n        }\n        if (typeof Object.getOwnPropertyNames === \"function\" && Object.getOwnPropertyNames(obj).length !== 0) {\n            return false;\n        }\n        var syms = Object.getOwnPropertySymbols(obj);\n        if (syms.length !== 1 || syms[0] !== sym) {\n            return false;\n        }\n        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {\n            return false;\n        }\n        if (typeof Object.getOwnPropertyDescriptor === \"function\") {\n            var descriptor = /** @type {PropertyDescriptor} */ Object.getOwnPropertyDescriptor(obj, sym);\n            if (descriptor.value !== symVal || descriptor.enumerable !== true) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return shams$1;\n}\nvar shams;\nvar hasRequiredShams;\nfunction requireShams() {\n    if (hasRequiredShams) return shams;\n    hasRequiredShams = 1;\n    var hasSymbols2 = requireShams$1();\n    shams = function hasToStringTagShams() {\n        return hasSymbols2() && !!Symbol.toStringTag;\n    };\n    return shams;\n}\nvar esObjectAtoms;\nvar hasRequiredEsObjectAtoms;\nfunction requireEsObjectAtoms() {\n    if (hasRequiredEsObjectAtoms) return esObjectAtoms;\n    hasRequiredEsObjectAtoms = 1;\n    esObjectAtoms = Object;\n    return esObjectAtoms;\n}\nvar esErrors;\nvar hasRequiredEsErrors;\nfunction requireEsErrors() {\n    if (hasRequiredEsErrors) return esErrors;\n    hasRequiredEsErrors = 1;\n    esErrors = Error;\n    return esErrors;\n}\nvar _eval;\nvar hasRequired_eval;\nfunction require_eval() {\n    if (hasRequired_eval) return _eval;\n    hasRequired_eval = 1;\n    _eval = EvalError;\n    return _eval;\n}\nvar range;\nvar hasRequiredRange;\nfunction requireRange() {\n    if (hasRequiredRange) return range;\n    hasRequiredRange = 1;\n    range = RangeError;\n    return range;\n}\nvar ref;\nvar hasRequiredRef;\nfunction requireRef() {\n    if (hasRequiredRef) return ref;\n    hasRequiredRef = 1;\n    ref = ReferenceError;\n    return ref;\n}\nvar syntax;\nvar hasRequiredSyntax;\nfunction requireSyntax() {\n    if (hasRequiredSyntax) return syntax;\n    hasRequiredSyntax = 1;\n    syntax = SyntaxError;\n    return syntax;\n}\nvar type;\nvar hasRequiredType;\nfunction requireType() {\n    if (hasRequiredType) return type;\n    hasRequiredType = 1;\n    type = TypeError;\n    return type;\n}\nvar uri;\nvar hasRequiredUri;\nfunction requireUri() {\n    if (hasRequiredUri) return uri;\n    hasRequiredUri = 1;\n    uri = URIError;\n    return uri;\n}\nvar abs;\nvar hasRequiredAbs;\nfunction requireAbs() {\n    if (hasRequiredAbs) return abs;\n    hasRequiredAbs = 1;\n    abs = Math.abs;\n    return abs;\n}\nvar floor;\nvar hasRequiredFloor;\nfunction requireFloor() {\n    if (hasRequiredFloor) return floor;\n    hasRequiredFloor = 1;\n    floor = Math.floor;\n    return floor;\n}\nvar max;\nvar hasRequiredMax;\nfunction requireMax() {\n    if (hasRequiredMax) return max;\n    hasRequiredMax = 1;\n    max = Math.max;\n    return max;\n}\nvar min;\nvar hasRequiredMin;\nfunction requireMin() {\n    if (hasRequiredMin) return min;\n    hasRequiredMin = 1;\n    min = Math.min;\n    return min;\n}\nvar pow;\nvar hasRequiredPow;\nfunction requirePow() {\n    if (hasRequiredPow) return pow;\n    hasRequiredPow = 1;\n    pow = Math.pow;\n    return pow;\n}\nvar round;\nvar hasRequiredRound;\nfunction requireRound() {\n    if (hasRequiredRound) return round;\n    hasRequiredRound = 1;\n    round = Math.round;\n    return round;\n}\nvar _isNaN;\nvar hasRequired_isNaN;\nfunction require_isNaN() {\n    if (hasRequired_isNaN) return _isNaN;\n    hasRequired_isNaN = 1;\n    _isNaN = Number.isNaN || function isNaN2(a) {\n        return a !== a;\n    };\n    return _isNaN;\n}\nvar sign;\nvar hasRequiredSign;\nfunction requireSign() {\n    if (hasRequiredSign) return sign;\n    hasRequiredSign = 1;\n    var $isNaN = /* @__PURE__ */ require_isNaN();\n    sign = function sign2(number) {\n        if ($isNaN(number) || number === 0) {\n            return number;\n        }\n        return number < 0 ? -1 : 1;\n    };\n    return sign;\n}\nvar gOPD;\nvar hasRequiredGOPD;\nfunction requireGOPD() {\n    if (hasRequiredGOPD) return gOPD;\n    hasRequiredGOPD = 1;\n    gOPD = Object.getOwnPropertyDescriptor;\n    return gOPD;\n}\nvar gopd;\nvar hasRequiredGopd;\nfunction requireGopd() {\n    if (hasRequiredGopd) return gopd;\n    hasRequiredGopd = 1;\n    var $gOPD = /* @__PURE__ */ requireGOPD();\n    if ($gOPD) {\n        try {\n            $gOPD([], \"length\");\n        } catch (e) {\n            $gOPD = null;\n        }\n    }\n    gopd = $gOPD;\n    return gopd;\n}\nvar esDefineProperty;\nvar hasRequiredEsDefineProperty;\nfunction requireEsDefineProperty() {\n    if (hasRequiredEsDefineProperty) return esDefineProperty;\n    hasRequiredEsDefineProperty = 1;\n    var $defineProperty = Object.defineProperty || false;\n    if ($defineProperty) {\n        try {\n            $defineProperty({}, \"a\", {\n                value: 1\n            });\n        } catch (e) {\n            $defineProperty = false;\n        }\n    }\n    esDefineProperty = $defineProperty;\n    return esDefineProperty;\n}\nvar hasSymbols;\nvar hasRequiredHasSymbols;\nfunction requireHasSymbols() {\n    if (hasRequiredHasSymbols) return hasSymbols;\n    hasRequiredHasSymbols = 1;\n    var origSymbol = typeof Symbol !== \"undefined\" && Symbol;\n    var hasSymbolSham = requireShams$1();\n    hasSymbols = function hasNativeSymbols() {\n        if (typeof origSymbol !== \"function\") {\n            return false;\n        }\n        if (typeof Symbol !== \"function\") {\n            return false;\n        }\n        if (typeof origSymbol(\"foo\") !== \"symbol\") {\n            return false;\n        }\n        if (typeof Symbol(\"bar\") !== \"symbol\") {\n            return false;\n        }\n        return hasSymbolSham();\n    };\n    return hasSymbols;\n}\nvar Reflect_getPrototypeOf;\nvar hasRequiredReflect_getPrototypeOf;\nfunction requireReflect_getPrototypeOf() {\n    if (hasRequiredReflect_getPrototypeOf) return Reflect_getPrototypeOf;\n    hasRequiredReflect_getPrototypeOf = 1;\n    Reflect_getPrototypeOf = typeof Reflect !== \"undefined\" && Reflect.getPrototypeOf || null;\n    return Reflect_getPrototypeOf;\n}\nvar Object_getPrototypeOf;\nvar hasRequiredObject_getPrototypeOf;\nfunction requireObject_getPrototypeOf() {\n    if (hasRequiredObject_getPrototypeOf) return Object_getPrototypeOf;\n    hasRequiredObject_getPrototypeOf = 1;\n    var $Object = /* @__PURE__ */ requireEsObjectAtoms();\n    Object_getPrototypeOf = $Object.getPrototypeOf || null;\n    return Object_getPrototypeOf;\n}\nvar implementation;\nvar hasRequiredImplementation;\nfunction requireImplementation() {\n    if (hasRequiredImplementation) return implementation;\n    hasRequiredImplementation = 1;\n    var ERROR_MESSAGE = \"Function.prototype.bind called on incompatible \";\n    var toStr = Object.prototype.toString;\n    var max2 = Math.max;\n    var funcType = \"[object Function]\";\n    var concatty = function concatty2(a, b) {\n        var arr = [];\n        for(var i = 0; i < a.length; i += 1){\n            arr[i] = a[i];\n        }\n        for(var j = 0; j < b.length; j += 1){\n            arr[j + a.length] = b[j];\n        }\n        return arr;\n    };\n    var slicy = function slicy2(arrLike, offset) {\n        var arr = [];\n        for(var i = offset, j = 0; i < arrLike.length; i += 1, j += 1){\n            arr[j] = arrLike[i];\n        }\n        return arr;\n    };\n    var joiny = function(arr, joiner) {\n        var str = \"\";\n        for(var i = 0; i < arr.length; i += 1){\n            str += arr[i];\n            if (i + 1 < arr.length) {\n                str += joiner;\n            }\n        }\n        return str;\n    };\n    implementation = function bind(that) {\n        var target = this;\n        if (typeof target !== \"function\" || toStr.apply(target) !== funcType) {\n            throw new TypeError(ERROR_MESSAGE + target);\n        }\n        var args = slicy(arguments, 1);\n        var bound;\n        var binder = function() {\n            if (this instanceof bound) {\n                var result = target.apply(this, concatty(args, arguments));\n                if (Object(result) === result) {\n                    return result;\n                }\n                return this;\n            }\n            return target.apply(that, concatty(args, arguments));\n        };\n        var boundLength = max2(0, target.length - args.length);\n        var boundArgs = [];\n        for(var i = 0; i < boundLength; i++){\n            boundArgs[i] = \"$\" + i;\n        }\n        bound = Function(\"binder\", \"return function (\" + joiny(boundArgs, \",\") + \"){ return binder.apply(this,arguments); }\")(binder);\n        if (target.prototype) {\n            var Empty = function Empty2() {};\n            Empty.prototype = target.prototype;\n            bound.prototype = new Empty();\n            Empty.prototype = null;\n        }\n        return bound;\n    };\n    return implementation;\n}\nvar functionBind;\nvar hasRequiredFunctionBind;\nfunction requireFunctionBind() {\n    if (hasRequiredFunctionBind) return functionBind;\n    hasRequiredFunctionBind = 1;\n    var implementation2 = requireImplementation();\n    functionBind = Function.prototype.bind || implementation2;\n    return functionBind;\n}\nvar functionCall;\nvar hasRequiredFunctionCall;\nfunction requireFunctionCall() {\n    if (hasRequiredFunctionCall) return functionCall;\n    hasRequiredFunctionCall = 1;\n    functionCall = Function.prototype.call;\n    return functionCall;\n}\nvar functionApply;\nvar hasRequiredFunctionApply;\nfunction requireFunctionApply() {\n    if (hasRequiredFunctionApply) return functionApply;\n    hasRequiredFunctionApply = 1;\n    functionApply = Function.prototype.apply;\n    return functionApply;\n}\nvar reflectApply;\nvar hasRequiredReflectApply;\nfunction requireReflectApply() {\n    if (hasRequiredReflectApply) return reflectApply;\n    hasRequiredReflectApply = 1;\n    reflectApply = typeof Reflect !== \"undefined\" && Reflect && Reflect.apply;\n    return reflectApply;\n}\nvar actualApply;\nvar hasRequiredActualApply;\nfunction requireActualApply() {\n    if (hasRequiredActualApply) return actualApply;\n    hasRequiredActualApply = 1;\n    var bind = requireFunctionBind();\n    var $apply = requireFunctionApply();\n    var $call = requireFunctionCall();\n    var $reflectApply = requireReflectApply();\n    actualApply = $reflectApply || bind.call($call, $apply);\n    return actualApply;\n}\nvar callBindApplyHelpers;\nvar hasRequiredCallBindApplyHelpers;\nfunction requireCallBindApplyHelpers() {\n    if (hasRequiredCallBindApplyHelpers) return callBindApplyHelpers;\n    hasRequiredCallBindApplyHelpers = 1;\n    var bind = requireFunctionBind();\n    var $TypeError = /* @__PURE__ */ requireType();\n    var $call = requireFunctionCall();\n    var $actualApply = requireActualApply();\n    callBindApplyHelpers = function callBindBasic(args) {\n        if (args.length < 1 || typeof args[0] !== \"function\") {\n            throw new $TypeError(\"a function is required\");\n        }\n        return $actualApply(bind, $call, args);\n    };\n    return callBindApplyHelpers;\n}\nvar get;\nvar hasRequiredGet;\nfunction requireGet() {\n    if (hasRequiredGet) return get;\n    hasRequiredGet = 1;\n    var callBind2 = requireCallBindApplyHelpers();\n    var gOPD2 = /* @__PURE__ */ requireGopd();\n    var hasProtoAccessor;\n    try {\n        hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ [].__proto__ === Array.prototype;\n    } catch (e) {\n        if (!e || typeof e !== \"object\" || !(\"code\" in e) || e.code !== \"ERR_PROTO_ACCESS\") {\n            throw e;\n        }\n    }\n    var desc = !!hasProtoAccessor && gOPD2 && gOPD2(Object.prototype, /** @type {keyof typeof Object.prototype} */ \"__proto__\");\n    var $Object = Object;\n    var $getPrototypeOf = $Object.getPrototypeOf;\n    get = desc && typeof desc.get === \"function\" ? callBind2([\n        desc.get\n    ]) : typeof $getPrototypeOf === \"function\" ? /** @type {import('./get')} */ function getDunder(value) {\n        return $getPrototypeOf(value == null ? value : $Object(value));\n    } : false;\n    return get;\n}\nvar getProto;\nvar hasRequiredGetProto;\nfunction requireGetProto() {\n    if (hasRequiredGetProto) return getProto;\n    hasRequiredGetProto = 1;\n    var reflectGetProto = requireReflect_getPrototypeOf();\n    var originalGetProto = requireObject_getPrototypeOf();\n    var getDunderProto = /* @__PURE__ */ requireGet();\n    getProto = reflectGetProto ? function getProto2(O) {\n        return reflectGetProto(O);\n    } : originalGetProto ? function getProto2(O) {\n        if (!O || typeof O !== \"object\" && typeof O !== \"function\") {\n            throw new TypeError(\"getProto: not an object\");\n        }\n        return originalGetProto(O);\n    } : getDunderProto ? function getProto2(O) {\n        return getDunderProto(O);\n    } : null;\n    return getProto;\n}\nvar hasown;\nvar hasRequiredHasown;\nfunction requireHasown() {\n    if (hasRequiredHasown) return hasown;\n    hasRequiredHasown = 1;\n    var call = Function.prototype.call;\n    var $hasOwn = Object.prototype.hasOwnProperty;\n    var bind = requireFunctionBind();\n    hasown = bind.call(call, $hasOwn);\n    return hasown;\n}\nvar getIntrinsic;\nvar hasRequiredGetIntrinsic;\nfunction requireGetIntrinsic() {\n    if (hasRequiredGetIntrinsic) return getIntrinsic;\n    hasRequiredGetIntrinsic = 1;\n    var undefined$1;\n    var $Object = /* @__PURE__ */ requireEsObjectAtoms();\n    var $Error = /* @__PURE__ */ requireEsErrors();\n    var $EvalError = /* @__PURE__ */ require_eval();\n    var $RangeError = /* @__PURE__ */ requireRange();\n    var $ReferenceError = /* @__PURE__ */ requireRef();\n    var $SyntaxError = /* @__PURE__ */ requireSyntax();\n    var $TypeError = /* @__PURE__ */ requireType();\n    var $URIError = /* @__PURE__ */ requireUri();\n    var abs2 = /* @__PURE__ */ requireAbs();\n    var floor2 = /* @__PURE__ */ requireFloor();\n    var max2 = /* @__PURE__ */ requireMax();\n    var min2 = /* @__PURE__ */ requireMin();\n    var pow2 = /* @__PURE__ */ requirePow();\n    var round2 = /* @__PURE__ */ requireRound();\n    var sign2 = /* @__PURE__ */ requireSign();\n    var $Function = Function;\n    var getEvalledConstructor = function(expressionSyntax) {\n        try {\n            return $Function('\"use strict\"; return (' + expressionSyntax + \").constructor;\")();\n        } catch (e) {}\n    };\n    var $gOPD = /* @__PURE__ */ requireGopd();\n    var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();\n    var throwTypeError = function() {\n        throw new $TypeError();\n    };\n    var ThrowTypeError = $gOPD ? function() {\n        try {\n            arguments.callee;\n            return throwTypeError;\n        } catch (calleeThrows) {\n            try {\n                return $gOPD(arguments, \"callee\").get;\n            } catch (gOPDthrows) {\n                return throwTypeError;\n            }\n        }\n    }() : throwTypeError;\n    var hasSymbols2 = requireHasSymbols()();\n    var getProto2 = requireGetProto();\n    var $ObjectGPO = requireObject_getPrototypeOf();\n    var $ReflectGPO = requireReflect_getPrototypeOf();\n    var $apply = requireFunctionApply();\n    var $call = requireFunctionCall();\n    var needsEval = {};\n    var TypedArray = typeof Uint8Array === \"undefined\" || !getProto2 ? undefined$1 : getProto2(Uint8Array);\n    var INTRINSICS = {\n        __proto__: null,\n        \"%AggregateError%\": typeof AggregateError === \"undefined\" ? undefined$1 : AggregateError,\n        \"%Array%\": Array,\n        \"%ArrayBuffer%\": typeof ArrayBuffer === \"undefined\" ? undefined$1 : ArrayBuffer,\n        \"%ArrayIteratorPrototype%\": hasSymbols2 && getProto2 ? getProto2([][Symbol.iterator]()) : undefined$1,\n        \"%AsyncFromSyncIteratorPrototype%\": undefined$1,\n        \"%AsyncFunction%\": needsEval,\n        \"%AsyncGenerator%\": needsEval,\n        \"%AsyncGeneratorFunction%\": needsEval,\n        \"%AsyncIteratorPrototype%\": needsEval,\n        \"%Atomics%\": typeof Atomics === \"undefined\" ? undefined$1 : Atomics,\n        \"%BigInt%\": typeof BigInt === \"undefined\" ? undefined$1 : BigInt,\n        \"%BigInt64Array%\": typeof BigInt64Array === \"undefined\" ? undefined$1 : BigInt64Array,\n        \"%BigUint64Array%\": typeof BigUint64Array === \"undefined\" ? undefined$1 : BigUint64Array,\n        \"%Boolean%\": Boolean,\n        \"%DataView%\": typeof DataView === \"undefined\" ? undefined$1 : DataView,\n        \"%Date%\": Date,\n        \"%decodeURI%\": decodeURI,\n        \"%decodeURIComponent%\": decodeURIComponent,\n        \"%encodeURI%\": encodeURI,\n        \"%encodeURIComponent%\": encodeURIComponent,\n        \"%Error%\": $Error,\n        \"%eval%\": eval,\n        // eslint-disable-line no-eval\n        \"%EvalError%\": $EvalError,\n        \"%Float16Array%\": typeof Float16Array === \"undefined\" ? undefined$1 : Float16Array,\n        \"%Float32Array%\": typeof Float32Array === \"undefined\" ? undefined$1 : Float32Array,\n        \"%Float64Array%\": typeof Float64Array === \"undefined\" ? undefined$1 : Float64Array,\n        \"%FinalizationRegistry%\": typeof FinalizationRegistry === \"undefined\" ? undefined$1 : FinalizationRegistry,\n        \"%Function%\": $Function,\n        \"%GeneratorFunction%\": needsEval,\n        \"%Int8Array%\": typeof Int8Array === \"undefined\" ? undefined$1 : Int8Array,\n        \"%Int16Array%\": typeof Int16Array === \"undefined\" ? undefined$1 : Int16Array,\n        \"%Int32Array%\": typeof Int32Array === \"undefined\" ? undefined$1 : Int32Array,\n        \"%isFinite%\": isFinite,\n        \"%isNaN%\": isNaN,\n        \"%IteratorPrototype%\": hasSymbols2 && getProto2 ? getProto2(getProto2([][Symbol.iterator]())) : undefined$1,\n        \"%JSON%\": typeof JSON === \"object\" ? JSON : undefined$1,\n        \"%Map%\": typeof Map === \"undefined\" ? undefined$1 : Map,\n        \"%MapIteratorPrototype%\": typeof Map === \"undefined\" || !hasSymbols2 || !getProto2 ? undefined$1 : getProto2(/* @__PURE__ */ new Map()[Symbol.iterator]()),\n        \"%Math%\": Math,\n        \"%Number%\": Number,\n        \"%Object%\": $Object,\n        \"%Object.getOwnPropertyDescriptor%\": $gOPD,\n        \"%parseFloat%\": parseFloat,\n        \"%parseInt%\": parseInt,\n        \"%Promise%\": typeof Promise === \"undefined\" ? undefined$1 : Promise,\n        \"%Proxy%\": typeof Proxy === \"undefined\" ? undefined$1 : Proxy,\n        \"%RangeError%\": $RangeError,\n        \"%ReferenceError%\": $ReferenceError,\n        \"%Reflect%\": typeof Reflect === \"undefined\" ? undefined$1 : Reflect,\n        \"%RegExp%\": RegExp,\n        \"%Set%\": typeof Set === \"undefined\" ? undefined$1 : Set,\n        \"%SetIteratorPrototype%\": typeof Set === \"undefined\" || !hasSymbols2 || !getProto2 ? undefined$1 : getProto2(/* @__PURE__ */ new Set()[Symbol.iterator]()),\n        \"%SharedArrayBuffer%\": typeof SharedArrayBuffer === \"undefined\" ? undefined$1 : SharedArrayBuffer,\n        \"%String%\": String,\n        \"%StringIteratorPrototype%\": hasSymbols2 && getProto2 ? getProto2(\"\"[Symbol.iterator]()) : undefined$1,\n        \"%Symbol%\": hasSymbols2 ? Symbol : undefined$1,\n        \"%SyntaxError%\": $SyntaxError,\n        \"%ThrowTypeError%\": ThrowTypeError,\n        \"%TypedArray%\": TypedArray,\n        \"%TypeError%\": $TypeError,\n        \"%Uint8Array%\": typeof Uint8Array === \"undefined\" ? undefined$1 : Uint8Array,\n        \"%Uint8ClampedArray%\": typeof Uint8ClampedArray === \"undefined\" ? undefined$1 : Uint8ClampedArray,\n        \"%Uint16Array%\": typeof Uint16Array === \"undefined\" ? undefined$1 : Uint16Array,\n        \"%Uint32Array%\": typeof Uint32Array === \"undefined\" ? undefined$1 : Uint32Array,\n        \"%URIError%\": $URIError,\n        \"%WeakMap%\": typeof WeakMap === \"undefined\" ? undefined$1 : WeakMap,\n        \"%WeakRef%\": typeof WeakRef === \"undefined\" ? undefined$1 : WeakRef,\n        \"%WeakSet%\": typeof WeakSet === \"undefined\" ? undefined$1 : WeakSet,\n        \"%Function.prototype.call%\": $call,\n        \"%Function.prototype.apply%\": $apply,\n        \"%Object.defineProperty%\": $defineProperty,\n        \"%Object.getPrototypeOf%\": $ObjectGPO,\n        \"%Math.abs%\": abs2,\n        \"%Math.floor%\": floor2,\n        \"%Math.max%\": max2,\n        \"%Math.min%\": min2,\n        \"%Math.pow%\": pow2,\n        \"%Math.round%\": round2,\n        \"%Math.sign%\": sign2,\n        \"%Reflect.getPrototypeOf%\": $ReflectGPO\n    };\n    if (getProto2) {\n        try {\n            null.error;\n        } catch (e) {\n            var errorProto = getProto2(getProto2(e));\n            INTRINSICS[\"%Error.prototype%\"] = errorProto;\n        }\n    }\n    var doEval = function doEval2(name) {\n        var value;\n        if (name === \"%AsyncFunction%\") {\n            value = getEvalledConstructor(\"async function () {}\");\n        } else if (name === \"%GeneratorFunction%\") {\n            value = getEvalledConstructor(\"function* () {}\");\n        } else if (name === \"%AsyncGeneratorFunction%\") {\n            value = getEvalledConstructor(\"async function* () {}\");\n        } else if (name === \"%AsyncGenerator%\") {\n            var fn = doEval2(\"%AsyncGeneratorFunction%\");\n            if (fn) {\n                value = fn.prototype;\n            }\n        } else if (name === \"%AsyncIteratorPrototype%\") {\n            var gen = doEval2(\"%AsyncGenerator%\");\n            if (gen && getProto2) {\n                value = getProto2(gen.prototype);\n            }\n        }\n        INTRINSICS[name] = value;\n        return value;\n    };\n    var LEGACY_ALIASES = {\n        __proto__: null,\n        \"%ArrayBufferPrototype%\": [\n            \"ArrayBuffer\",\n            \"prototype\"\n        ],\n        \"%ArrayPrototype%\": [\n            \"Array\",\n            \"prototype\"\n        ],\n        \"%ArrayProto_entries%\": [\n            \"Array\",\n            \"prototype\",\n            \"entries\"\n        ],\n        \"%ArrayProto_forEach%\": [\n            \"Array\",\n            \"prototype\",\n            \"forEach\"\n        ],\n        \"%ArrayProto_keys%\": [\n            \"Array\",\n            \"prototype\",\n            \"keys\"\n        ],\n        \"%ArrayProto_values%\": [\n            \"Array\",\n            \"prototype\",\n            \"values\"\n        ],\n        \"%AsyncFunctionPrototype%\": [\n            \"AsyncFunction\",\n            \"prototype\"\n        ],\n        \"%AsyncGenerator%\": [\n            \"AsyncGeneratorFunction\",\n            \"prototype\"\n        ],\n        \"%AsyncGeneratorPrototype%\": [\n            \"AsyncGeneratorFunction\",\n            \"prototype\",\n            \"prototype\"\n        ],\n        \"%BooleanPrototype%\": [\n            \"Boolean\",\n            \"prototype\"\n        ],\n        \"%DataViewPrototype%\": [\n            \"DataView\",\n            \"prototype\"\n        ],\n        \"%DatePrototype%\": [\n            \"Date\",\n            \"prototype\"\n        ],\n        \"%ErrorPrototype%\": [\n            \"Error\",\n            \"prototype\"\n        ],\n        \"%EvalErrorPrototype%\": [\n            \"EvalError\",\n            \"prototype\"\n        ],\n        \"%Float32ArrayPrototype%\": [\n            \"Float32Array\",\n            \"prototype\"\n        ],\n        \"%Float64ArrayPrototype%\": [\n            \"Float64Array\",\n            \"prototype\"\n        ],\n        \"%FunctionPrototype%\": [\n            \"Function\",\n            \"prototype\"\n        ],\n        \"%Generator%\": [\n            \"GeneratorFunction\",\n            \"prototype\"\n        ],\n        \"%GeneratorPrototype%\": [\n            \"GeneratorFunction\",\n            \"prototype\",\n            \"prototype\"\n        ],\n        \"%Int8ArrayPrototype%\": [\n            \"Int8Array\",\n            \"prototype\"\n        ],\n        \"%Int16ArrayPrototype%\": [\n            \"Int16Array\",\n            \"prototype\"\n        ],\n        \"%Int32ArrayPrototype%\": [\n            \"Int32Array\",\n            \"prototype\"\n        ],\n        \"%JSONParse%\": [\n            \"JSON\",\n            \"parse\"\n        ],\n        \"%JSONStringify%\": [\n            \"JSON\",\n            \"stringify\"\n        ],\n        \"%MapPrototype%\": [\n            \"Map\",\n            \"prototype\"\n        ],\n        \"%NumberPrototype%\": [\n            \"Number\",\n            \"prototype\"\n        ],\n        \"%ObjectPrototype%\": [\n            \"Object\",\n            \"prototype\"\n        ],\n        \"%ObjProto_toString%\": [\n            \"Object\",\n            \"prototype\",\n            \"toString\"\n        ],\n        \"%ObjProto_valueOf%\": [\n            \"Object\",\n            \"prototype\",\n            \"valueOf\"\n        ],\n        \"%PromisePrototype%\": [\n            \"Promise\",\n            \"prototype\"\n        ],\n        \"%PromiseProto_then%\": [\n            \"Promise\",\n            \"prototype\",\n            \"then\"\n        ],\n        \"%Promise_all%\": [\n            \"Promise\",\n            \"all\"\n        ],\n        \"%Promise_reject%\": [\n            \"Promise\",\n            \"reject\"\n        ],\n        \"%Promise_resolve%\": [\n            \"Promise\",\n            \"resolve\"\n        ],\n        \"%RangeErrorPrototype%\": [\n            \"RangeError\",\n            \"prototype\"\n        ],\n        \"%ReferenceErrorPrototype%\": [\n            \"ReferenceError\",\n            \"prototype\"\n        ],\n        \"%RegExpPrototype%\": [\n            \"RegExp\",\n            \"prototype\"\n        ],\n        \"%SetPrototype%\": [\n            \"Set\",\n            \"prototype\"\n        ],\n        \"%SharedArrayBufferPrototype%\": [\n            \"SharedArrayBuffer\",\n            \"prototype\"\n        ],\n        \"%StringPrototype%\": [\n            \"String\",\n            \"prototype\"\n        ],\n        \"%SymbolPrototype%\": [\n            \"Symbol\",\n            \"prototype\"\n        ],\n        \"%SyntaxErrorPrototype%\": [\n            \"SyntaxError\",\n            \"prototype\"\n        ],\n        \"%TypedArrayPrototype%\": [\n            \"TypedArray\",\n            \"prototype\"\n        ],\n        \"%TypeErrorPrototype%\": [\n            \"TypeError\",\n            \"prototype\"\n        ],\n        \"%Uint8ArrayPrototype%\": [\n            \"Uint8Array\",\n            \"prototype\"\n        ],\n        \"%Uint8ClampedArrayPrototype%\": [\n            \"Uint8ClampedArray\",\n            \"prototype\"\n        ],\n        \"%Uint16ArrayPrototype%\": [\n            \"Uint16Array\",\n            \"prototype\"\n        ],\n        \"%Uint32ArrayPrototype%\": [\n            \"Uint32Array\",\n            \"prototype\"\n        ],\n        \"%URIErrorPrototype%\": [\n            \"URIError\",\n            \"prototype\"\n        ],\n        \"%WeakMapPrototype%\": [\n            \"WeakMap\",\n            \"prototype\"\n        ],\n        \"%WeakSetPrototype%\": [\n            \"WeakSet\",\n            \"prototype\"\n        ]\n    };\n    var bind = requireFunctionBind();\n    var hasOwn = /* @__PURE__ */ requireHasown();\n    var $concat = bind.call($call, Array.prototype.concat);\n    var $spliceApply = bind.call($apply, Array.prototype.splice);\n    var $replace = bind.call($call, String.prototype.replace);\n    var $strSlice = bind.call($call, String.prototype.slice);\n    var $exec = bind.call($call, RegExp.prototype.exec);\n    var rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\n    var reEscapeChar = /\\\\(\\\\)?/g;\n    var stringToPath = function stringToPath2(string) {\n        var first = $strSlice(string, 0, 1);\n        var last = $strSlice(string, -1);\n        if (first === \"%\" && last !== \"%\") {\n            throw new $SyntaxError(\"invalid intrinsic syntax, expected closing `%`\");\n        } else if (last === \"%\" && first !== \"%\") {\n            throw new $SyntaxError(\"invalid intrinsic syntax, expected opening `%`\");\n        }\n        var result = [];\n        $replace(string, rePropName, function(match, number, quote, subString) {\n            result[result.length] = quote ? $replace(subString, reEscapeChar, \"$1\") : number || match;\n        });\n        return result;\n    };\n    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {\n        var intrinsicName = name;\n        var alias;\n        if (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n            alias = LEGACY_ALIASES[intrinsicName];\n            intrinsicName = \"%\" + alias[0] + \"%\";\n        }\n        if (hasOwn(INTRINSICS, intrinsicName)) {\n            var value = INTRINSICS[intrinsicName];\n            if (value === needsEval) {\n                value = doEval(intrinsicName);\n            }\n            if (typeof value === \"undefined\" && !allowMissing) {\n                throw new $TypeError(\"intrinsic \" + name + \" exists, but is not available. Please file an issue!\");\n            }\n            return {\n                alias,\n                name: intrinsicName,\n                value\n            };\n        }\n        throw new $SyntaxError(\"intrinsic \" + name + \" does not exist!\");\n    };\n    getIntrinsic = function GetIntrinsic(name, allowMissing) {\n        if (typeof name !== \"string\" || name.length === 0) {\n            throw new $TypeError(\"intrinsic name must be a non-empty string\");\n        }\n        if (arguments.length > 1 && typeof allowMissing !== \"boolean\") {\n            throw new $TypeError('\"allowMissing\" argument must be a boolean');\n        }\n        if ($exec(/^%?[^%]*%?$/, name) === null) {\n            throw new $SyntaxError(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\");\n        }\n        var parts = stringToPath(name);\n        var intrinsicBaseName = parts.length > 0 ? parts[0] : \"\";\n        var intrinsic = getBaseIntrinsic(\"%\" + intrinsicBaseName + \"%\", allowMissing);\n        var intrinsicRealName = intrinsic.name;\n        var value = intrinsic.value;\n        var skipFurtherCaching = false;\n        var alias = intrinsic.alias;\n        if (alias) {\n            intrinsicBaseName = alias[0];\n            $spliceApply(parts, $concat([\n                0,\n                1\n            ], alias));\n        }\n        for(var i = 1, isOwn = true; i < parts.length; i += 1){\n            var part = parts[i];\n            var first = $strSlice(part, 0, 1);\n            var last = $strSlice(part, -1);\n            if ((first === '\"' || first === \"'\" || first === \"`\" || last === '\"' || last === \"'\" || last === \"`\") && first !== last) {\n                throw new $SyntaxError(\"property names with quotes must have matching quotes\");\n            }\n            if (part === \"constructor\" || !isOwn) {\n                skipFurtherCaching = true;\n            }\n            intrinsicBaseName += \".\" + part;\n            intrinsicRealName = \"%\" + intrinsicBaseName + \"%\";\n            if (hasOwn(INTRINSICS, intrinsicRealName)) {\n                value = INTRINSICS[intrinsicRealName];\n            } else if (value != null) {\n                if (!(part in value)) {\n                    if (!allowMissing) {\n                        throw new $TypeError(\"base intrinsic for \" + name + \" exists, but the property is not available.\");\n                    }\n                    return void 0;\n                }\n                if ($gOPD && i + 1 >= parts.length) {\n                    var desc = $gOPD(value, part);\n                    isOwn = !!desc;\n                    if (isOwn && \"get\" in desc && !(\"originalValue\" in desc.get)) {\n                        value = desc.get;\n                    } else {\n                        value = value[part];\n                    }\n                } else {\n                    isOwn = hasOwn(value, part);\n                    value = value[part];\n                }\n                if (isOwn && !skipFurtherCaching) {\n                    INTRINSICS[intrinsicRealName] = value;\n                }\n            }\n        }\n        return value;\n    };\n    return getIntrinsic;\n}\nvar callBind = {\n    exports: {}\n};\nvar defineDataProperty;\nvar hasRequiredDefineDataProperty;\nfunction requireDefineDataProperty() {\n    if (hasRequiredDefineDataProperty) return defineDataProperty;\n    hasRequiredDefineDataProperty = 1;\n    var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();\n    var $SyntaxError = /* @__PURE__ */ requireSyntax();\n    var $TypeError = /* @__PURE__ */ requireType();\n    var gopd2 = /* @__PURE__ */ requireGopd();\n    defineDataProperty = function defineDataProperty2(obj, property, value) {\n        if (!obj || typeof obj !== \"object\" && typeof obj !== \"function\") {\n            throw new $TypeError(\"`obj` must be an object or a function`\");\n        }\n        if (typeof property !== \"string\" && typeof property !== \"symbol\") {\n            throw new $TypeError(\"`property` must be a string or a symbol`\");\n        }\n        if (arguments.length > 3 && typeof arguments[3] !== \"boolean\" && arguments[3] !== null) {\n            throw new $TypeError(\"`nonEnumerable`, if provided, must be a boolean or null\");\n        }\n        if (arguments.length > 4 && typeof arguments[4] !== \"boolean\" && arguments[4] !== null) {\n            throw new $TypeError(\"`nonWritable`, if provided, must be a boolean or null\");\n        }\n        if (arguments.length > 5 && typeof arguments[5] !== \"boolean\" && arguments[5] !== null) {\n            throw new $TypeError(\"`nonConfigurable`, if provided, must be a boolean or null\");\n        }\n        if (arguments.length > 6 && typeof arguments[6] !== \"boolean\") {\n            throw new $TypeError(\"`loose`, if provided, must be a boolean\");\n        }\n        var nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n        var nonWritable = arguments.length > 4 ? arguments[4] : null;\n        var nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n        var loose = arguments.length > 6 ? arguments[6] : false;\n        var desc = !!gopd2 && gopd2(obj, property);\n        if ($defineProperty) {\n            $defineProperty(obj, property, {\n                configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n                enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n                value,\n                writable: nonWritable === null && desc ? desc.writable : !nonWritable\n            });\n        } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {\n            obj[property] = value;\n        } else {\n            throw new $SyntaxError(\"This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.\");\n        }\n    };\n    return defineDataProperty;\n}\nvar hasPropertyDescriptors_1;\nvar hasRequiredHasPropertyDescriptors;\nfunction requireHasPropertyDescriptors() {\n    if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;\n    hasRequiredHasPropertyDescriptors = 1;\n    var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();\n    var hasPropertyDescriptors = function hasPropertyDescriptors2() {\n        return !!$defineProperty;\n    };\n    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n        if (!$defineProperty) {\n            return null;\n        }\n        try {\n            return $defineProperty([], \"length\", {\n                value: 1\n            }).length !== 1;\n        } catch (e) {\n            return true;\n        }\n    };\n    hasPropertyDescriptors_1 = hasPropertyDescriptors;\n    return hasPropertyDescriptors_1;\n}\nvar setFunctionLength;\nvar hasRequiredSetFunctionLength;\nfunction requireSetFunctionLength() {\n    if (hasRequiredSetFunctionLength) return setFunctionLength;\n    hasRequiredSetFunctionLength = 1;\n    var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();\n    var define = /* @__PURE__ */ requireDefineDataProperty();\n    var hasDescriptors = /* @__PURE__ */ requireHasPropertyDescriptors()();\n    var gOPD2 = /* @__PURE__ */ requireGopd();\n    var $TypeError = /* @__PURE__ */ requireType();\n    var $floor = GetIntrinsic(\"%Math.floor%\");\n    setFunctionLength = function setFunctionLength2(fn, length) {\n        if (typeof fn !== \"function\") {\n            throw new $TypeError(\"`fn` is not a function\");\n        }\n        if (typeof length !== \"number\" || length < 0 || length > 4294967295 || $floor(length) !== length) {\n            throw new $TypeError(\"`length` must be a positive 32-bit integer\");\n        }\n        var loose = arguments.length > 2 && !!arguments[2];\n        var functionLengthIsConfigurable = true;\n        var functionLengthIsWritable = true;\n        if (\"length\" in fn && gOPD2) {\n            var desc = gOPD2(fn, \"length\");\n            if (desc && !desc.configurable) {\n                functionLengthIsConfigurable = false;\n            }\n            if (desc && !desc.writable) {\n                functionLengthIsWritable = false;\n            }\n        }\n        if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n            if (hasDescriptors) {\n                define(/** @type {Parameters<define>[0]} */ fn, \"length\", length, true, true);\n            } else {\n                define(/** @type {Parameters<define>[0]} */ fn, \"length\", length);\n            }\n        }\n        return fn;\n    };\n    return setFunctionLength;\n}\nvar hasRequiredCallBind;\nfunction requireCallBind() {\n    if (hasRequiredCallBind) return callBind.exports;\n    hasRequiredCallBind = 1;\n    (function(module) {\n        var bind = requireFunctionBind();\n        var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();\n        var setFunctionLength2 = /* @__PURE__ */ requireSetFunctionLength();\n        var $TypeError = /* @__PURE__ */ requireType();\n        var $apply = GetIntrinsic(\"%Function.prototype.apply%\");\n        var $call = GetIntrinsic(\"%Function.prototype.call%\");\n        var $reflectApply = GetIntrinsic(\"%Reflect.apply%\", true) || bind.call($call, $apply);\n        var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();\n        var $max = GetIntrinsic(\"%Math.max%\");\n        module.exports = function callBind2(originalFunction) {\n            if (typeof originalFunction !== \"function\") {\n                throw new $TypeError(\"a function is required\");\n            }\n            var func = $reflectApply(bind, $call, arguments);\n            return setFunctionLength2(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);\n        };\n        var applyBind = function applyBind2() {\n            return $reflectApply(bind, $apply, arguments);\n        };\n        if ($defineProperty) {\n            $defineProperty(module.exports, \"apply\", {\n                value: applyBind\n            });\n        } else {\n            module.exports.apply = applyBind;\n        }\n    })(callBind);\n    return callBind.exports;\n}\nvar callBound;\nvar hasRequiredCallBound;\nfunction requireCallBound() {\n    if (hasRequiredCallBound) return callBound;\n    hasRequiredCallBound = 1;\n    var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();\n    var callBind2 = requireCallBind();\n    var $indexOf = callBind2(GetIntrinsic(\"String.prototype.indexOf\"));\n    callBound = function callBoundIntrinsic(name, allowMissing) {\n        var intrinsic = GetIntrinsic(name, !!allowMissing);\n        if (typeof intrinsic === \"function\" && $indexOf(name, \".prototype.\") > -1) {\n            return callBind2(intrinsic);\n        }\n        return intrinsic;\n    };\n    return callBound;\n}\nvar isArguments;\nvar hasRequiredIsArguments;\nfunction requireIsArguments() {\n    if (hasRequiredIsArguments) return isArguments;\n    hasRequiredIsArguments = 1;\n    var hasToStringTag = requireShams()();\n    var callBound2 = requireCallBound();\n    var $toString = callBound2(\"Object.prototype.toString\");\n    var isStandardArguments = function isArguments2(value) {\n        if (hasToStringTag && value && typeof value === \"object\" && Symbol.toStringTag in value) {\n            return false;\n        }\n        return $toString(value) === \"[object Arguments]\";\n    };\n    var isLegacyArguments = function isArguments2(value) {\n        if (isStandardArguments(value)) {\n            return true;\n        }\n        return value !== null && typeof value === \"object\" && typeof value.length === \"number\" && value.length >= 0 && $toString(value) !== \"[object Array]\" && $toString(value.callee) === \"[object Function]\";\n    };\n    var supportsStandardArguments = function() {\n        return isStandardArguments(arguments);\n    }();\n    isStandardArguments.isLegacyArguments = isLegacyArguments;\n    isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n    return isArguments;\n}\nvar isGeneratorFunction;\nvar hasRequiredIsGeneratorFunction;\nfunction requireIsGeneratorFunction() {\n    if (hasRequiredIsGeneratorFunction) return isGeneratorFunction;\n    hasRequiredIsGeneratorFunction = 1;\n    var toStr = Object.prototype.toString;\n    var fnToStr = Function.prototype.toString;\n    var isFnRegex = /^\\s*(?:function)?\\*/;\n    var hasToStringTag = requireShams()();\n    var getProto2 = Object.getPrototypeOf;\n    var getGeneratorFunc = function() {\n        if (!hasToStringTag) {\n            return false;\n        }\n        try {\n            return Function(\"return function*() {}\")();\n        } catch (e) {}\n    };\n    var GeneratorFunction;\n    isGeneratorFunction = function isGeneratorFunction2(fn) {\n        if (typeof fn !== \"function\") {\n            return false;\n        }\n        if (isFnRegex.test(fnToStr.call(fn))) {\n            return true;\n        }\n        if (!hasToStringTag) {\n            var str = toStr.call(fn);\n            return str === \"[object GeneratorFunction]\";\n        }\n        if (!getProto2) {\n            return false;\n        }\n        if (typeof GeneratorFunction === \"undefined\") {\n            var generatorFunc = getGeneratorFunc();\n            GeneratorFunction = generatorFunc ? getProto2(generatorFunc) : false;\n        }\n        return getProto2(fn) === GeneratorFunction;\n    };\n    return isGeneratorFunction;\n}\nvar isCallable;\nvar hasRequiredIsCallable;\nfunction requireIsCallable() {\n    if (hasRequiredIsCallable) return isCallable;\n    hasRequiredIsCallable = 1;\n    var fnToStr = Function.prototype.toString;\n    var reflectApply2 = typeof Reflect === \"object\" && Reflect !== null && Reflect.apply;\n    var badArrayLike;\n    var isCallableMarker;\n    if (typeof reflectApply2 === \"function\" && typeof Object.defineProperty === \"function\") {\n        try {\n            badArrayLike = Object.defineProperty({}, \"length\", {\n                get: function() {\n                    throw isCallableMarker;\n                }\n            });\n            isCallableMarker = {};\n            reflectApply2(function() {\n                throw 42;\n            }, null, badArrayLike);\n        } catch (_) {\n            if (_ !== isCallableMarker) {\n                reflectApply2 = null;\n            }\n        }\n    } else {\n        reflectApply2 = null;\n    }\n    var constructorRegex = /^\\s*class\\b/;\n    var isES6ClassFn = function isES6ClassFunction(value) {\n        try {\n            var fnStr = fnToStr.call(value);\n            return constructorRegex.test(fnStr);\n        } catch (e) {\n            return false;\n        }\n    };\n    var tryFunctionObject = function tryFunctionToStr(value) {\n        try {\n            if (isES6ClassFn(value)) {\n                return false;\n            }\n            fnToStr.call(value);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n    var toStr = Object.prototype.toString;\n    var objectClass = \"[object Object]\";\n    var fnClass = \"[object Function]\";\n    var genClass = \"[object GeneratorFunction]\";\n    var ddaClass = \"[object HTMLAllCollection]\";\n    var ddaClass2 = \"[object HTML document.all class]\";\n    var ddaClass3 = \"[object HTMLCollection]\";\n    var hasToStringTag = typeof Symbol === \"function\" && !!Symbol.toStringTag;\n    var isIE68 = !(0 in [\n        , \n    ]);\n    var isDDA = function isDocumentDotAll() {\n        return false;\n    };\n    if (typeof document === \"object\") {\n        var all = document.all;\n        if (toStr.call(all) === toStr.call(document.all)) {\n            isDDA = function isDocumentDotAll(value) {\n                if ((isIE68 || !value) && (typeof value === \"undefined\" || typeof value === \"object\")) {\n                    try {\n                        var str = toStr.call(value);\n                        return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value(\"\") == null;\n                    } catch (e) {}\n                }\n                return false;\n            };\n        }\n    }\n    isCallable = reflectApply2 ? function isCallable2(value) {\n        if (isDDA(value)) {\n            return true;\n        }\n        if (!value) {\n            return false;\n        }\n        if (typeof value !== \"function\" && typeof value !== \"object\") {\n            return false;\n        }\n        try {\n            reflectApply2(value, null, badArrayLike);\n        } catch (e) {\n            if (e !== isCallableMarker) {\n                return false;\n            }\n        }\n        return !isES6ClassFn(value) && tryFunctionObject(value);\n    } : function isCallable2(value) {\n        if (isDDA(value)) {\n            return true;\n        }\n        if (!value) {\n            return false;\n        }\n        if (typeof value !== \"function\" && typeof value !== \"object\") {\n            return false;\n        }\n        if (hasToStringTag) {\n            return tryFunctionObject(value);\n        }\n        if (isES6ClassFn(value)) {\n            return false;\n        }\n        var strClass = toStr.call(value);\n        if (strClass !== fnClass && strClass !== genClass && !/^\\[object HTML/.test(strClass)) {\n            return false;\n        }\n        return tryFunctionObject(value);\n    };\n    return isCallable;\n}\nvar forEach_1;\nvar hasRequiredForEach;\nfunction requireForEach() {\n    if (hasRequiredForEach) return forEach_1;\n    hasRequiredForEach = 1;\n    var isCallable2 = requireIsCallable();\n    var toStr = Object.prototype.toString;\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var forEachArray = function forEachArray2(array, iterator, receiver) {\n        for(var i = 0, len = array.length; i < len; i++){\n            if (hasOwnProperty.call(array, i)) {\n                if (receiver == null) {\n                    iterator(array[i], i, array);\n                } else {\n                    iterator.call(receiver, array[i], i, array);\n                }\n            }\n        }\n    };\n    var forEachString = function forEachString2(string, iterator, receiver) {\n        for(var i = 0, len = string.length; i < len; i++){\n            if (receiver == null) {\n                iterator(string.charAt(i), i, string);\n            } else {\n                iterator.call(receiver, string.charAt(i), i, string);\n            }\n        }\n    };\n    var forEachObject = function forEachObject2(object, iterator, receiver) {\n        for(var k in object){\n            if (hasOwnProperty.call(object, k)) {\n                if (receiver == null) {\n                    iterator(object[k], k, object);\n                } else {\n                    iterator.call(receiver, object[k], k, object);\n                }\n            }\n        }\n    };\n    var forEach = function forEach2(list, iterator, thisArg) {\n        if (!isCallable2(iterator)) {\n            throw new TypeError(\"iterator must be a function\");\n        }\n        var receiver;\n        if (arguments.length >= 3) {\n            receiver = thisArg;\n        }\n        if (toStr.call(list) === \"[object Array]\") {\n            forEachArray(list, iterator, receiver);\n        } else if (typeof list === \"string\") {\n            forEachString(list, iterator, receiver);\n        } else {\n            forEachObject(list, iterator, receiver);\n        }\n    };\n    forEach_1 = forEach;\n    return forEach_1;\n}\nvar possibleTypedArrayNames;\nvar hasRequiredPossibleTypedArrayNames;\nfunction requirePossibleTypedArrayNames() {\n    if (hasRequiredPossibleTypedArrayNames) return possibleTypedArrayNames;\n    hasRequiredPossibleTypedArrayNames = 1;\n    possibleTypedArrayNames = [\n        \"Float32Array\",\n        \"Float64Array\",\n        \"Int8Array\",\n        \"Int16Array\",\n        \"Int32Array\",\n        \"Uint8Array\",\n        \"Uint8ClampedArray\",\n        \"Uint16Array\",\n        \"Uint32Array\",\n        \"BigInt64Array\",\n        \"BigUint64Array\"\n    ];\n    return possibleTypedArrayNames;\n}\nvar availableTypedArrays;\nvar hasRequiredAvailableTypedArrays;\nfunction requireAvailableTypedArrays() {\n    if (hasRequiredAvailableTypedArrays) return availableTypedArrays;\n    hasRequiredAvailableTypedArrays = 1;\n    var possibleNames = /* @__PURE__ */ requirePossibleTypedArrayNames();\n    var g = typeof globalThis === \"undefined\" ? commonjsGlobal : globalThis;\n    availableTypedArrays = function availableTypedArrays2() {\n        var out = [];\n        for(var i = 0; i < possibleNames.length; i++){\n            if (typeof g[possibleNames[i]] === \"function\") {\n                out[out.length] = possibleNames[i];\n            }\n        }\n        return out;\n    };\n    return availableTypedArrays;\n}\nvar whichTypedArray;\nvar hasRequiredWhichTypedArray;\nfunction requireWhichTypedArray() {\n    if (hasRequiredWhichTypedArray) return whichTypedArray;\n    hasRequiredWhichTypedArray = 1;\n    var forEach = requireForEach();\n    var availableTypedArrays2 = /* @__PURE__ */ requireAvailableTypedArrays();\n    var callBind2 = requireCallBind();\n    var callBound2 = requireCallBound();\n    var gOPD2 = /* @__PURE__ */ requireGopd();\n    var $toString = callBound2(\"Object.prototype.toString\");\n    var hasToStringTag = requireShams()();\n    var g = typeof globalThis === \"undefined\" ? commonjsGlobal : globalThis;\n    var typedArrays = availableTypedArrays2();\n    var $slice = callBound2(\"String.prototype.slice\");\n    var getPrototypeOf = Object.getPrototypeOf;\n    var $indexOf = callBound2(\"Array.prototype.indexOf\", true) || function indexOf(array, value) {\n        for(var i = 0; i < array.length; i += 1){\n            if (array[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    var cache = {\n        __proto__: null\n    };\n    if (hasToStringTag && gOPD2 && getPrototypeOf) {\n        forEach(typedArrays, function(typedArray) {\n            var arr = new g[typedArray]();\n            if (Symbol.toStringTag in arr) {\n                var proto = getPrototypeOf(arr);\n                var descriptor = gOPD2(proto, Symbol.toStringTag);\n                if (!descriptor) {\n                    var superProto = getPrototypeOf(proto);\n                    descriptor = gOPD2(superProto, Symbol.toStringTag);\n                }\n                cache[\"$\" + typedArray] = callBind2(descriptor.get);\n            }\n        });\n    } else {\n        forEach(typedArrays, function(typedArray) {\n            var arr = new g[typedArray]();\n            var fn = arr.slice || arr.set;\n            if (fn) {\n                cache[\"$\" + typedArray] = callBind2(fn);\n            }\n        });\n    }\n    var tryTypedArrays = function tryAllTypedArrays(value) {\n        var found = false;\n        forEach(// eslint-disable-next-line no-extra-parens\n        /** @type {Record<`\\$${TypedArrayName}`, Getter>} */ /** @type {any} */ cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */ function(getter, typedArray) {\n            if (!found) {\n                try {\n                    if (\"$\" + getter(value) === typedArray) {\n                        found = $slice(typedArray, 1);\n                    }\n                } catch (e) {}\n            }\n        });\n        return found;\n    };\n    var trySlices = function tryAllSlices(value) {\n        var found = false;\n        forEach(// eslint-disable-next-line no-extra-parens\n        /** @type {Record<`\\$${TypedArrayName}`, Getter>} */ /** @type {any} */ cache, /** @type {(getter: typeof cache, name: `\\$${import('.').TypedArrayName}`) => void} */ function(getter, name) {\n            if (!found) {\n                try {\n                    getter(value);\n                    found = $slice(name, 1);\n                } catch (e) {}\n            }\n        });\n        return found;\n    };\n    whichTypedArray = function whichTypedArray2(value) {\n        if (!value || typeof value !== \"object\") {\n            return false;\n        }\n        if (!hasToStringTag) {\n            var tag = $slice($toString(value), 8, -1);\n            if ($indexOf(typedArrays, tag) > -1) {\n                return tag;\n            }\n            if (tag !== \"Object\") {\n                return false;\n            }\n            return trySlices(value);\n        }\n        if (!gOPD2) {\n            return null;\n        }\n        return tryTypedArrays(value);\n    };\n    return whichTypedArray;\n}\nvar isTypedArray;\nvar hasRequiredIsTypedArray;\nfunction requireIsTypedArray() {\n    if (hasRequiredIsTypedArray) return isTypedArray;\n    hasRequiredIsTypedArray = 1;\n    var whichTypedArray2 = /* @__PURE__ */ requireWhichTypedArray();\n    isTypedArray = function isTypedArray2(value) {\n        return !!whichTypedArray2(value);\n    };\n    return isTypedArray;\n}\nvar hasRequiredTypes;\nfunction requireTypes() {\n    if (hasRequiredTypes) return types;\n    hasRequiredTypes = 1;\n    (function(exports) {\n        var isArgumentsObject = requireIsArguments();\n        var isGeneratorFunction2 = requireIsGeneratorFunction();\n        var whichTypedArray2 = /* @__PURE__ */ requireWhichTypedArray();\n        var isTypedArray2 = /* @__PURE__ */ requireIsTypedArray();\n        function uncurryThis(f) {\n            return f.call.bind(f);\n        }\n        var BigIntSupported = typeof BigInt !== \"undefined\";\n        var SymbolSupported = typeof Symbol !== \"undefined\";\n        var ObjectToString = uncurryThis(Object.prototype.toString);\n        var numberValue = uncurryThis(Number.prototype.valueOf);\n        var stringValue = uncurryThis(String.prototype.valueOf);\n        var booleanValue = uncurryThis(Boolean.prototype.valueOf);\n        if (BigIntSupported) {\n            var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n        }\n        if (SymbolSupported) {\n            var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n        }\n        function checkBoxedPrimitive(value, prototypeValueOf) {\n            if (typeof value !== \"object\") {\n                return false;\n            }\n            try {\n                prototypeValueOf(value);\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        exports.isArgumentsObject = isArgumentsObject;\n        exports.isGeneratorFunction = isGeneratorFunction2;\n        exports.isTypedArray = isTypedArray2;\n        function isPromise(input) {\n            return typeof Promise !== \"undefined\" && input instanceof Promise || input !== null && typeof input === \"object\" && typeof input.then === \"function\" && typeof input.catch === \"function\";\n        }\n        exports.isPromise = isPromise;\n        function isArrayBufferView(value) {\n            if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n                return ArrayBuffer.isView(value);\n            }\n            return isTypedArray2(value) || isDataView(value);\n        }\n        exports.isArrayBufferView = isArrayBufferView;\n        function isUint8Array(value) {\n            return whichTypedArray2(value) === \"Uint8Array\";\n        }\n        exports.isUint8Array = isUint8Array;\n        function isUint8ClampedArray(value) {\n            return whichTypedArray2(value) === \"Uint8ClampedArray\";\n        }\n        exports.isUint8ClampedArray = isUint8ClampedArray;\n        function isUint16Array(value) {\n            return whichTypedArray2(value) === \"Uint16Array\";\n        }\n        exports.isUint16Array = isUint16Array;\n        function isUint32Array(value) {\n            return whichTypedArray2(value) === \"Uint32Array\";\n        }\n        exports.isUint32Array = isUint32Array;\n        function isInt8Array(value) {\n            return whichTypedArray2(value) === \"Int8Array\";\n        }\n        exports.isInt8Array = isInt8Array;\n        function isInt16Array(value) {\n            return whichTypedArray2(value) === \"Int16Array\";\n        }\n        exports.isInt16Array = isInt16Array;\n        function isInt32Array(value) {\n            return whichTypedArray2(value) === \"Int32Array\";\n        }\n        exports.isInt32Array = isInt32Array;\n        function isFloat32Array(value) {\n            return whichTypedArray2(value) === \"Float32Array\";\n        }\n        exports.isFloat32Array = isFloat32Array;\n        function isFloat64Array(value) {\n            return whichTypedArray2(value) === \"Float64Array\";\n        }\n        exports.isFloat64Array = isFloat64Array;\n        function isBigInt64Array(value) {\n            return whichTypedArray2(value) === \"BigInt64Array\";\n        }\n        exports.isBigInt64Array = isBigInt64Array;\n        function isBigUint64Array(value) {\n            return whichTypedArray2(value) === \"BigUint64Array\";\n        }\n        exports.isBigUint64Array = isBigUint64Array;\n        function isMapToString(value) {\n            return ObjectToString(value) === \"[object Map]\";\n        }\n        isMapToString.working = typeof Map !== \"undefined\" && isMapToString(/* @__PURE__ */ new Map());\n        function isMap(value) {\n            if (typeof Map === \"undefined\") {\n                return false;\n            }\n            return isMapToString.working ? isMapToString(value) : value instanceof Map;\n        }\n        exports.isMap = isMap;\n        function isSetToString(value) {\n            return ObjectToString(value) === \"[object Set]\";\n        }\n        isSetToString.working = typeof Set !== \"undefined\" && isSetToString(/* @__PURE__ */ new Set());\n        function isSet(value) {\n            if (typeof Set === \"undefined\") {\n                return false;\n            }\n            return isSetToString.working ? isSetToString(value) : value instanceof Set;\n        }\n        exports.isSet = isSet;\n        function isWeakMapToString(value) {\n            return ObjectToString(value) === \"[object WeakMap]\";\n        }\n        isWeakMapToString.working = typeof WeakMap !== \"undefined\" && isWeakMapToString(/* @__PURE__ */ new WeakMap());\n        function isWeakMap(value) {\n            if (typeof WeakMap === \"undefined\") {\n                return false;\n            }\n            return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;\n        }\n        exports.isWeakMap = isWeakMap;\n        function isWeakSetToString(value) {\n            return ObjectToString(value) === \"[object WeakSet]\";\n        }\n        isWeakSetToString.working = typeof WeakSet !== \"undefined\" && isWeakSetToString(/* @__PURE__ */ new WeakSet());\n        function isWeakSet(value) {\n            return isWeakSetToString(value);\n        }\n        exports.isWeakSet = isWeakSet;\n        function isArrayBufferToString(value) {\n            return ObjectToString(value) === \"[object ArrayBuffer]\";\n        }\n        isArrayBufferToString.working = typeof ArrayBuffer !== \"undefined\" && isArrayBufferToString(new ArrayBuffer());\n        function isArrayBuffer(value) {\n            if (typeof ArrayBuffer === \"undefined\") {\n                return false;\n            }\n            return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;\n        }\n        exports.isArrayBuffer = isArrayBuffer;\n        function isDataViewToString(value) {\n            return ObjectToString(value) === \"[object DataView]\";\n        }\n        isDataViewToString.working = typeof ArrayBuffer !== \"undefined\" && typeof DataView !== \"undefined\" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));\n        function isDataView(value) {\n            if (typeof DataView === \"undefined\") {\n                return false;\n            }\n            return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;\n        }\n        exports.isDataView = isDataView;\n        var SharedArrayBufferCopy = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : void 0;\n        function isSharedArrayBufferToString(value) {\n            return ObjectToString(value) === \"[object SharedArrayBuffer]\";\n        }\n        function isSharedArrayBuffer(value) {\n            if (typeof SharedArrayBufferCopy === \"undefined\") {\n                return false;\n            }\n            if (typeof isSharedArrayBufferToString.working === \"undefined\") {\n                isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n            }\n            return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;\n        }\n        exports.isSharedArrayBuffer = isSharedArrayBuffer;\n        function isAsyncFunction(value) {\n            return ObjectToString(value) === \"[object AsyncFunction]\";\n        }\n        exports.isAsyncFunction = isAsyncFunction;\n        function isMapIterator(value) {\n            return ObjectToString(value) === \"[object Map Iterator]\";\n        }\n        exports.isMapIterator = isMapIterator;\n        function isSetIterator(value) {\n            return ObjectToString(value) === \"[object Set Iterator]\";\n        }\n        exports.isSetIterator = isSetIterator;\n        function isGeneratorObject(value) {\n            return ObjectToString(value) === \"[object Generator]\";\n        }\n        exports.isGeneratorObject = isGeneratorObject;\n        function isWebAssemblyCompiledModule(value) {\n            return ObjectToString(value) === \"[object WebAssembly.Module]\";\n        }\n        exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n        function isNumberObject(value) {\n            return checkBoxedPrimitive(value, numberValue);\n        }\n        exports.isNumberObject = isNumberObject;\n        function isStringObject(value) {\n            return checkBoxedPrimitive(value, stringValue);\n        }\n        exports.isStringObject = isStringObject;\n        function isBooleanObject(value) {\n            return checkBoxedPrimitive(value, booleanValue);\n        }\n        exports.isBooleanObject = isBooleanObject;\n        function isBigIntObject(value) {\n            return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n        }\n        exports.isBigIntObject = isBigIntObject;\n        function isSymbolObject(value) {\n            return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n        }\n        exports.isSymbolObject = isSymbolObject;\n        function isBoxedPrimitive(value) {\n            return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);\n        }\n        exports.isBoxedPrimitive = isBoxedPrimitive;\n        function isAnyArrayBuffer(value) {\n            return typeof Uint8Array !== \"undefined\" && (isArrayBuffer(value) || isSharedArrayBuffer(value));\n        }\n        exports.isAnyArrayBuffer = isAnyArrayBuffer;\n        [\n            \"isProxy\",\n            \"isExternal\",\n            \"isModuleNamespaceObject\"\n        ].forEach(function(method) {\n            Object.defineProperty(exports, method, {\n                enumerable: false,\n                value: function() {\n                    throw new Error(method + \" is not supported in userland\");\n                }\n            });\n        });\n    })(types);\n    return types;\n}\nvar isBufferBrowser;\nvar hasRequiredIsBufferBrowser;\nfunction requireIsBufferBrowser() {\n    if (hasRequiredIsBufferBrowser) return isBufferBrowser;\n    hasRequiredIsBufferBrowser = 1;\n    isBufferBrowser = function isBuffer(arg) {\n        return arg && typeof arg === \"object\" && typeof arg.copy === \"function\" && typeof arg.fill === \"function\" && typeof arg.readUInt8 === \"function\";\n    };\n    return isBufferBrowser;\n}\nvar hasRequiredUtil;\nfunction requireUtil() {\n    if (hasRequiredUtil) return util;\n    hasRequiredUtil = 1;\n    (function(exports) {\n        var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {\n            var keys = Object.keys(obj);\n            var descriptors = {};\n            for(var i = 0; i < keys.length; i++){\n                descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n            }\n            return descriptors;\n        };\n        var formatRegExp = /%[sdj%]/g;\n        exports.format = function(f) {\n            if (!isString(f)) {\n                var objects = [];\n                for(var i = 0; i < arguments.length; i++){\n                    objects.push(inspect(arguments[i]));\n                }\n                return objects.join(\" \");\n            }\n            var i = 1;\n            var args = arguments;\n            var len = args.length;\n            var str = String(f).replace(formatRegExp, function(x2) {\n                if (x2 === \"%%\") return \"%\";\n                if (i >= len) return x2;\n                switch(x2){\n                    case \"%s\":\n                        return String(args[i++]);\n                    case \"%d\":\n                        return Number(args[i++]);\n                    case \"%j\":\n                        try {\n                            return JSON.stringify(args[i++]);\n                        } catch (_) {\n                            return \"[Circular]\";\n                        }\n                    default:\n                        return x2;\n                }\n            });\n            for(var x = args[i]; i < len; x = args[++i]){\n                if (isNull(x) || !isObject(x)) {\n                    str += \" \" + x;\n                } else {\n                    str += \" \" + inspect(x);\n                }\n            }\n            return str;\n        };\n        exports.deprecate = function(fn, msg) {\n            if (typeof process$1 !== \"undefined\" && process$1.noDeprecation === true) {\n                return fn;\n            }\n            if (typeof process$1 === \"undefined\") {\n                return function() {\n                    return exports.deprecate(fn, msg).apply(this, arguments);\n                };\n            }\n            var warned = false;\n            function deprecated() {\n                if (!warned) {\n                    if (process$1.throwDeprecation) {\n                        throw new Error(msg);\n                    } else if (process$1.traceDeprecation) {\n                        console.trace(msg);\n                    } else {\n                        console.error(msg);\n                    }\n                    warned = true;\n                }\n                return fn.apply(this, arguments);\n            }\n            return deprecated;\n        };\n        var debugs = {};\n        var debugEnvRegex = /^$/;\n        if (process$1.env.NODE_DEBUG) {\n            var debugEnv = process$1.env.NODE_DEBUG;\n            debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, \"\\\\$&\").replace(/\\*/g, \".*\").replace(/,/g, \"$|^\").toUpperCase();\n            debugEnvRegex = new RegExp(\"^\" + debugEnv + \"$\", \"i\");\n        }\n        exports.debuglog = function(set) {\n            set = set.toUpperCase();\n            if (!debugs[set]) {\n                if (debugEnvRegex.test(set)) {\n                    var pid = process$1.pid;\n                    debugs[set] = function() {\n                        var msg = exports.format.apply(exports, arguments);\n                        console.error(\"%s %d: %s\", set, pid, msg);\n                    };\n                } else {\n                    debugs[set] = function() {};\n                }\n            }\n            return debugs[set];\n        };\n        function inspect(obj, opts) {\n            var ctx = {\n                seen: [],\n                stylize: stylizeNoColor\n            };\n            if (arguments.length >= 3) ctx.depth = arguments[2];\n            if (arguments.length >= 4) ctx.colors = arguments[3];\n            if (isBoolean(opts)) {\n                ctx.showHidden = opts;\n            } else if (opts) {\n                exports._extend(ctx, opts);\n            }\n            if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n            if (isUndefined(ctx.depth)) ctx.depth = 2;\n            if (isUndefined(ctx.colors)) ctx.colors = false;\n            if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n            if (ctx.colors) ctx.stylize = stylizeWithColor;\n            return formatValue(ctx, obj, ctx.depth);\n        }\n        exports.inspect = inspect;\n        inspect.colors = {\n            \"bold\": [\n                1,\n                22\n            ],\n            \"italic\": [\n                3,\n                23\n            ],\n            \"underline\": [\n                4,\n                24\n            ],\n            \"inverse\": [\n                7,\n                27\n            ],\n            \"white\": [\n                37,\n                39\n            ],\n            \"grey\": [\n                90,\n                39\n            ],\n            \"black\": [\n                30,\n                39\n            ],\n            \"blue\": [\n                34,\n                39\n            ],\n            \"cyan\": [\n                36,\n                39\n            ],\n            \"green\": [\n                32,\n                39\n            ],\n            \"magenta\": [\n                35,\n                39\n            ],\n            \"red\": [\n                31,\n                39\n            ],\n            \"yellow\": [\n                33,\n                39\n            ]\n        };\n        inspect.styles = {\n            \"special\": \"cyan\",\n            \"number\": \"yellow\",\n            \"boolean\": \"yellow\",\n            \"undefined\": \"grey\",\n            \"null\": \"bold\",\n            \"string\": \"green\",\n            \"date\": \"magenta\",\n            // \"name\": intentionally not styling\n            \"regexp\": \"red\"\n        };\n        function stylizeWithColor(str, styleType) {\n            var style = inspect.styles[styleType];\n            if (style) {\n                return \"\\x1b[\" + inspect.colors[style][0] + \"m\" + str + \"\\x1b[\" + inspect.colors[style][1] + \"m\";\n            } else {\n                return str;\n            }\n        }\n        function stylizeNoColor(str, styleType) {\n            return str;\n        }\n        function arrayToHash(array) {\n            var hash2 = {};\n            array.forEach(function(val, idx) {\n                hash2[val] = true;\n            });\n            return hash2;\n        }\n        function formatValue(ctx, value, recurseTimes) {\n            if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n            value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n            !(value.constructor && value.constructor.prototype === value)) {\n                var ret = value.inspect(recurseTimes, ctx);\n                if (!isString(ret)) {\n                    ret = formatValue(ctx, ret, recurseTimes);\n                }\n                return ret;\n            }\n            var primitive = formatPrimitive(ctx, value);\n            if (primitive) {\n                return primitive;\n            }\n            var keys = Object.keys(value);\n            var visibleKeys = arrayToHash(keys);\n            if (ctx.showHidden) {\n                keys = Object.getOwnPropertyNames(value);\n            }\n            if (isError(value) && (keys.indexOf(\"message\") >= 0 || keys.indexOf(\"description\") >= 0)) {\n                return formatError(value);\n            }\n            if (keys.length === 0) {\n                if (isFunction(value)) {\n                    var name = value.name ? \": \" + value.name : \"\";\n                    return ctx.stylize(\"[Function\" + name + \"]\", \"special\");\n                }\n                if (isRegExp(value)) {\n                    return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n                }\n                if (isDate(value)) {\n                    return ctx.stylize(Date.prototype.toString.call(value), \"date\");\n                }\n                if (isError(value)) {\n                    return formatError(value);\n                }\n            }\n            var base = \"\", array = false, braces = [\n                \"{\",\n                \"}\"\n            ];\n            if (isArray(value)) {\n                array = true;\n                braces = [\n                    \"[\",\n                    \"]\"\n                ];\n            }\n            if (isFunction(value)) {\n                var n = value.name ? \": \" + value.name : \"\";\n                base = \" [Function\" + n + \"]\";\n            }\n            if (isRegExp(value)) {\n                base = \" \" + RegExp.prototype.toString.call(value);\n            }\n            if (isDate(value)) {\n                base = \" \" + Date.prototype.toUTCString.call(value);\n            }\n            if (isError(value)) {\n                base = \" \" + formatError(value);\n            }\n            if (keys.length === 0 && (!array || value.length == 0)) {\n                return braces[0] + base + braces[1];\n            }\n            if (recurseTimes < 0) {\n                if (isRegExp(value)) {\n                    return ctx.stylize(RegExp.prototype.toString.call(value), \"regexp\");\n                } else {\n                    return ctx.stylize(\"[Object]\", \"special\");\n                }\n            }\n            ctx.seen.push(value);\n            var output;\n            if (array) {\n                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n            } else {\n                output = keys.map(function(key) {\n                    return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n                });\n            }\n            ctx.seen.pop();\n            return reduceToSingleString(output, base, braces);\n        }\n        function formatPrimitive(ctx, value) {\n            if (isUndefined(value)) return ctx.stylize(\"undefined\", \"undefined\");\n            if (isString(value)) {\n                var simple = \"'\" + JSON.stringify(value).replace(/^\"|\"$/g, \"\").replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + \"'\";\n                return ctx.stylize(simple, \"string\");\n            }\n            if (isNumber(value)) return ctx.stylize(\"\" + value, \"number\");\n            if (isBoolean(value)) return ctx.stylize(\"\" + value, \"boolean\");\n            if (isNull(value)) return ctx.stylize(\"null\", \"null\");\n        }\n        function formatError(value) {\n            return \"[\" + Error.prototype.toString.call(value) + \"]\";\n        }\n        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n            var output = [];\n            for(var i = 0, l = value.length; i < l; ++i){\n                if (hasOwnProperty(value, String(i))) {\n                    output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n                } else {\n                    output.push(\"\");\n                }\n            }\n            keys.forEach(function(key) {\n                if (!key.match(/^\\d+$/)) {\n                    output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n                }\n            });\n            return output;\n        }\n        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n            var name, str, desc;\n            desc = Object.getOwnPropertyDescriptor(value, key) || {\n                value: value[key]\n            };\n            if (desc.get) {\n                if (desc.set) {\n                    str = ctx.stylize(\"[Getter/Setter]\", \"special\");\n                } else {\n                    str = ctx.stylize(\"[Getter]\", \"special\");\n                }\n            } else {\n                if (desc.set) {\n                    str = ctx.stylize(\"[Setter]\", \"special\");\n                }\n            }\n            if (!hasOwnProperty(visibleKeys, key)) {\n                name = \"[\" + key + \"]\";\n            }\n            if (!str) {\n                if (ctx.seen.indexOf(desc.value) < 0) {\n                    if (isNull(recurseTimes)) {\n                        str = formatValue(ctx, desc.value, null);\n                    } else {\n                        str = formatValue(ctx, desc.value, recurseTimes - 1);\n                    }\n                    if (str.indexOf(\"\\n\") > -1) {\n                        if (array) {\n                            str = str.split(\"\\n\").map(function(line) {\n                                return \"  \" + line;\n                            }).join(\"\\n\").slice(2);\n                        } else {\n                            str = \"\\n\" + str.split(\"\\n\").map(function(line) {\n                                return \"   \" + line;\n                            }).join(\"\\n\");\n                        }\n                    }\n                } else {\n                    str = ctx.stylize(\"[Circular]\", \"special\");\n                }\n            }\n            if (isUndefined(name)) {\n                if (array && key.match(/^\\d+$/)) {\n                    return str;\n                }\n                name = JSON.stringify(\"\" + key);\n                if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n                    name = name.slice(1, -1);\n                    name = ctx.stylize(name, \"name\");\n                } else {\n                    name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n                    name = ctx.stylize(name, \"string\");\n                }\n            }\n            return name + \": \" + str;\n        }\n        function reduceToSingleString(output, base, braces) {\n            var length = output.reduce(function(prev, cur) {\n                if (cur.indexOf(\"\\n\") >= 0) ;\n                return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, \"\").length + 1;\n            }, 0);\n            if (length > 60) {\n                return braces[0] + (base === \"\" ? \"\" : base + \"\\n \") + \" \" + output.join(\",\\n  \") + \" \" + braces[1];\n            }\n            return braces[0] + base + \" \" + output.join(\", \") + \" \" + braces[1];\n        }\n        exports.types = requireTypes();\n        function isArray(ar) {\n            return Array.isArray(ar);\n        }\n        exports.isArray = isArray;\n        function isBoolean(arg) {\n            return typeof arg === \"boolean\";\n        }\n        exports.isBoolean = isBoolean;\n        function isNull(arg) {\n            return arg === null;\n        }\n        exports.isNull = isNull;\n        function isNullOrUndefined(arg) {\n            return arg == null;\n        }\n        exports.isNullOrUndefined = isNullOrUndefined;\n        function isNumber(arg) {\n            return typeof arg === \"number\";\n        }\n        exports.isNumber = isNumber;\n        function isString(arg) {\n            return typeof arg === \"string\";\n        }\n        exports.isString = isString;\n        function isSymbol(arg) {\n            return typeof arg === \"symbol\";\n        }\n        exports.isSymbol = isSymbol;\n        function isUndefined(arg) {\n            return arg === void 0;\n        }\n        exports.isUndefined = isUndefined;\n        function isRegExp(re) {\n            return isObject(re) && objectToString(re) === \"[object RegExp]\";\n        }\n        exports.isRegExp = isRegExp;\n        exports.types.isRegExp = isRegExp;\n        function isObject(arg) {\n            return typeof arg === \"object\" && arg !== null;\n        }\n        exports.isObject = isObject;\n        function isDate(d) {\n            return isObject(d) && objectToString(d) === \"[object Date]\";\n        }\n        exports.isDate = isDate;\n        exports.types.isDate = isDate;\n        function isError(e) {\n            return isObject(e) && (objectToString(e) === \"[object Error]\" || e instanceof Error);\n        }\n        exports.isError = isError;\n        exports.types.isNativeError = isError;\n        function isFunction(arg) {\n            return typeof arg === \"function\";\n        }\n        exports.isFunction = isFunction;\n        function isPrimitive(arg) {\n            return arg === null || typeof arg === \"boolean\" || typeof arg === \"number\" || typeof arg === \"string\" || typeof arg === \"symbol\" || // ES6 symbol\n            typeof arg === \"undefined\";\n        }\n        exports.isPrimitive = isPrimitive;\n        exports.isBuffer = requireIsBufferBrowser();\n        function objectToString(o) {\n            return Object.prototype.toString.call(o);\n        }\n        function pad(n) {\n            return n < 10 ? \"0\" + n.toString(10) : n.toString(10);\n        }\n        var months = [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\"\n        ];\n        function timestamp() {\n            var d = /* @__PURE__ */ new Date();\n            var time = [\n                pad(d.getHours()),\n                pad(d.getMinutes()),\n                pad(d.getSeconds())\n            ].join(\":\");\n            return [\n                d.getDate(),\n                months[d.getMonth()],\n                time\n            ].join(\" \");\n        }\n        exports.log = function() {\n            console.log(\"%s - %s\", timestamp(), exports.format.apply(exports, arguments));\n        };\n        exports.inherits = requireInherits_browser();\n        exports._extend = function(origin, add) {\n            if (!add || !isObject(add)) return origin;\n            var keys = Object.keys(add);\n            var i = keys.length;\n            while(i--){\n                origin[keys[i]] = add[keys[i]];\n            }\n            return origin;\n        };\n        function hasOwnProperty(obj, prop) {\n            return Object.prototype.hasOwnProperty.call(obj, prop);\n        }\n        var kCustomPromisifiedSymbol = typeof Symbol !== \"undefined\" ? Symbol(\"util.promisify.custom\") : void 0;\n        exports.promisify = function promisify(original) {\n            if (typeof original !== \"function\") throw new TypeError('The \"original\" argument must be of type Function');\n            if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n                var fn = original[kCustomPromisifiedSymbol];\n                if (typeof fn !== \"function\") {\n                    throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n                }\n                Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n                    value: fn,\n                    enumerable: false,\n                    writable: false,\n                    configurable: true\n                });\n                return fn;\n            }\n            function fn() {\n                var promiseResolve, promiseReject;\n                var promise = new Promise(function(resolve, reject) {\n                    promiseResolve = resolve;\n                    promiseReject = reject;\n                });\n                var args = [];\n                for(var i = 0; i < arguments.length; i++){\n                    args.push(arguments[i]);\n                }\n                args.push(function(err, value) {\n                    if (err) {\n                        promiseReject(err);\n                    } else {\n                        promiseResolve(value);\n                    }\n                });\n                try {\n                    original.apply(this, args);\n                } catch (err) {\n                    promiseReject(err);\n                }\n                return promise;\n            }\n            Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n            if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n                value: fn,\n                enumerable: false,\n                writable: false,\n                configurable: true\n            });\n            return Object.defineProperties(fn, getOwnPropertyDescriptors(original));\n        };\n        exports.promisify.custom = kCustomPromisifiedSymbol;\n        function callbackifyOnRejected(reason, cb) {\n            if (!reason) {\n                var newReason = new Error(\"Promise was rejected with a falsy value\");\n                newReason.reason = reason;\n                reason = newReason;\n            }\n            return cb(reason);\n        }\n        function callbackify(original) {\n            if (typeof original !== \"function\") {\n                throw new TypeError('The \"original\" argument must be of type Function');\n            }\n            function callbackified() {\n                var args = [];\n                for(var i = 0; i < arguments.length; i++){\n                    args.push(arguments[i]);\n                }\n                var maybeCb = args.pop();\n                if (typeof maybeCb !== \"function\") {\n                    throw new TypeError(\"The last argument must be of type Function\");\n                }\n                var self2 = this;\n                var cb = function() {\n                    return maybeCb.apply(self2, arguments);\n                };\n                original.apply(this, args).then(function(ret) {\n                    process$1.nextTick(cb.bind(null, null, ret));\n                }, function(rej) {\n                    process$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));\n                });\n            }\n            Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n            Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));\n            return callbackified;\n        }\n        exports.callbackify = callbackify;\n    })(util);\n    return util;\n}\nvar buffer_list;\nvar hasRequiredBuffer_list;\nfunction requireBuffer_list() {\n    if (hasRequiredBuffer_list) return buffer_list;\n    hasRequiredBuffer_list = 1;\n    function ownKeys(object, enumerableOnly) {\n        var keys = Object.keys(object);\n        if (Object.getOwnPropertySymbols) {\n            var symbols = Object.getOwnPropertySymbols(object);\n            if (enumerableOnly) symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n            keys.push.apply(keys, symbols);\n        }\n        return keys;\n    }\n    function _objectSpread(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i] != null ? arguments[i] : {};\n            if (i % 2) {\n                ownKeys(Object(source), true).forEach(function(key) {\n                    _defineProperty(target, key, source[key]);\n                });\n            } else if (Object.getOwnPropertyDescriptors) {\n                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n            } else {\n                ownKeys(Object(source)).forEach(function(key) {\n                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n                });\n            }\n        }\n        return target;\n    }\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, {\n                value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n            });\n        } else {\n            obj[key] = value;\n        }\n        return obj;\n    }\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n    function _defineProperties(target, props) {\n        for(var i = 0; i < props.length; i++){\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        return Constructor;\n    }\n    var _require = requireBuffer(), Buffer2 = _require.Buffer;\n    var _require2 = requireUtil(), inspect = _require2.inspect;\n    var custom = inspect && inspect.custom || \"inspect\";\n    function copyBuffer(src, target, offset) {\n        Buffer2.prototype.copy.call(src, target, offset);\n    }\n    buffer_list = /* @__PURE__ */ function() {\n        function BufferList() {\n            _classCallCheck(this, BufferList);\n            this.head = null;\n            this.tail = null;\n            this.length = 0;\n        }\n        _createClass(BufferList, [\n            {\n                key: \"push\",\n                value: function push(v) {\n                    var entry = {\n                        data: v,\n                        next: null\n                    };\n                    if (this.length > 0) this.tail.next = entry;\n                    else this.head = entry;\n                    this.tail = entry;\n                    ++this.length;\n                }\n            },\n            {\n                key: \"unshift\",\n                value: function unshift(v) {\n                    var entry = {\n                        data: v,\n                        next: this.head\n                    };\n                    if (this.length === 0) this.tail = entry;\n                    this.head = entry;\n                    ++this.length;\n                }\n            },\n            {\n                key: \"shift\",\n                value: function shift() {\n                    if (this.length === 0) return;\n                    var ret = this.head.data;\n                    if (this.length === 1) this.head = this.tail = null;\n                    else this.head = this.head.next;\n                    --this.length;\n                    return ret;\n                }\n            },\n            {\n                key: \"clear\",\n                value: function clear() {\n                    this.head = this.tail = null;\n                    this.length = 0;\n                }\n            },\n            {\n                key: \"join\",\n                value: function join(s) {\n                    if (this.length === 0) return \"\";\n                    var p = this.head;\n                    var ret = \"\" + p.data;\n                    while(p = p.next){\n                        ret += s + p.data;\n                    }\n                    return ret;\n                }\n            },\n            {\n                key: \"concat\",\n                value: function concat(n) {\n                    if (this.length === 0) return Buffer2.alloc(0);\n                    var ret = Buffer2.allocUnsafe(n >>> 0);\n                    var p = this.head;\n                    var i = 0;\n                    while(p){\n                        copyBuffer(p.data, ret, i);\n                        i += p.data.length;\n                        p = p.next;\n                    }\n                    return ret;\n                }\n            },\n            {\n                key: \"consume\",\n                value: function consume(n, hasStrings) {\n                    var ret;\n                    if (n < this.head.data.length) {\n                        ret = this.head.data.slice(0, n);\n                        this.head.data = this.head.data.slice(n);\n                    } else if (n === this.head.data.length) {\n                        ret = this.shift();\n                    } else {\n                        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n                    }\n                    return ret;\n                }\n            },\n            {\n                key: \"first\",\n                value: function first() {\n                    return this.head.data;\n                }\n            },\n            {\n                key: \"_getString\",\n                value: function _getString(n) {\n                    var p = this.head;\n                    var c = 1;\n                    var ret = p.data;\n                    n -= ret.length;\n                    while(p = p.next){\n                        var str = p.data;\n                        var nb = n > str.length ? str.length : n;\n                        if (nb === str.length) ret += str;\n                        else ret += str.slice(0, n);\n                        n -= nb;\n                        if (n === 0) {\n                            if (nb === str.length) {\n                                ++c;\n                                if (p.next) this.head = p.next;\n                                else this.head = this.tail = null;\n                            } else {\n                                this.head = p;\n                                p.data = str.slice(nb);\n                            }\n                            break;\n                        }\n                        ++c;\n                    }\n                    this.length -= c;\n                    return ret;\n                }\n            },\n            {\n                key: \"_getBuffer\",\n                value: function _getBuffer(n) {\n                    var ret = Buffer2.allocUnsafe(n);\n                    var p = this.head;\n                    var c = 1;\n                    p.data.copy(ret);\n                    n -= p.data.length;\n                    while(p = p.next){\n                        var buf = p.data;\n                        var nb = n > buf.length ? buf.length : n;\n                        buf.copy(ret, ret.length - n, 0, nb);\n                        n -= nb;\n                        if (n === 0) {\n                            if (nb === buf.length) {\n                                ++c;\n                                if (p.next) this.head = p.next;\n                                else this.head = this.tail = null;\n                            } else {\n                                this.head = p;\n                                p.data = buf.slice(nb);\n                            }\n                            break;\n                        }\n                        ++c;\n                    }\n                    this.length -= c;\n                    return ret;\n                }\n            },\n            {\n                key: custom,\n                value: function value(_, options) {\n                    return inspect(this, _objectSpread({}, options, {\n                        // Only inspect one level.\n                        depth: 0,\n                        // It should not recurse.\n                        customInspect: false\n                    }));\n                }\n            }\n        ]);\n        return BufferList;\n    }();\n    return buffer_list;\n}\nvar destroy_1;\nvar hasRequiredDestroy;\nfunction requireDestroy() {\n    if (hasRequiredDestroy) return destroy_1;\n    hasRequiredDestroy = 1;\n    function destroy(err, cb) {\n        var _this = this;\n        var readableDestroyed = this._readableState && this._readableState.destroyed;\n        var writableDestroyed = this._writableState && this._writableState.destroyed;\n        if (readableDestroyed || writableDestroyed) {\n            if (cb) {\n                cb(err);\n            } else if (err) {\n                if (!this._writableState) {\n                    process$1.nextTick(emitErrorNT, this, err);\n                } else if (!this._writableState.errorEmitted) {\n                    this._writableState.errorEmitted = true;\n                    process$1.nextTick(emitErrorNT, this, err);\n                }\n            }\n            return this;\n        }\n        if (this._readableState) {\n            this._readableState.destroyed = true;\n        }\n        if (this._writableState) {\n            this._writableState.destroyed = true;\n        }\n        this._destroy(err || null, function(err2) {\n            if (!cb && err2) {\n                if (!_this._writableState) {\n                    process$1.nextTick(emitErrorAndCloseNT, _this, err2);\n                } else if (!_this._writableState.errorEmitted) {\n                    _this._writableState.errorEmitted = true;\n                    process$1.nextTick(emitErrorAndCloseNT, _this, err2);\n                } else {\n                    process$1.nextTick(emitCloseNT, _this);\n                }\n            } else if (cb) {\n                process$1.nextTick(emitCloseNT, _this);\n                cb(err2);\n            } else {\n                process$1.nextTick(emitCloseNT, _this);\n            }\n        });\n        return this;\n    }\n    function emitErrorAndCloseNT(self2, err) {\n        emitErrorNT(self2, err);\n        emitCloseNT(self2);\n    }\n    function emitCloseNT(self2) {\n        if (self2._writableState && !self2._writableState.emitClose) return;\n        if (self2._readableState && !self2._readableState.emitClose) return;\n        self2.emit(\"close\");\n    }\n    function undestroy() {\n        if (this._readableState) {\n            this._readableState.destroyed = false;\n            this._readableState.reading = false;\n            this._readableState.ended = false;\n            this._readableState.endEmitted = false;\n        }\n        if (this._writableState) {\n            this._writableState.destroyed = false;\n            this._writableState.ended = false;\n            this._writableState.ending = false;\n            this._writableState.finalCalled = false;\n            this._writableState.prefinished = false;\n            this._writableState.finished = false;\n            this._writableState.errorEmitted = false;\n        }\n    }\n    function emitErrorNT(self2, err) {\n        self2.emit(\"error\", err);\n    }\n    function errorOrDestroy(stream, err) {\n        var rState = stream._readableState;\n        var wState = stream._writableState;\n        if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);\n        else stream.emit(\"error\", err);\n    }\n    destroy_1 = {\n        destroy,\n        undestroy,\n        errorOrDestroy\n    };\n    return destroy_1;\n}\nvar errorsBrowser = {};\nvar hasRequiredErrorsBrowser;\nfunction requireErrorsBrowser() {\n    if (hasRequiredErrorsBrowser) return errorsBrowser;\n    hasRequiredErrorsBrowser = 1;\n    function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n    }\n    var codes = {};\n    function createErrorType(code, message, Base) {\n        if (!Base) {\n            Base = Error;\n        }\n        function getMessage(arg1, arg2, arg3) {\n            if (typeof message === \"string\") {\n                return message;\n            } else {\n                return message(arg1, arg2, arg3);\n            }\n        }\n        var NodeError = /* @__PURE__ */ function(_Base) {\n            _inheritsLoose(NodeError2, _Base);\n            function NodeError2(arg1, arg2, arg3) {\n                return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n            }\n            return NodeError2;\n        }(Base);\n        NodeError.prototype.name = Base.name;\n        NodeError.prototype.code = code;\n        codes[code] = NodeError;\n    }\n    function oneOf(expected, thing) {\n        if (Array.isArray(expected)) {\n            var len = expected.length;\n            expected = expected.map(function(i) {\n                return String(i);\n            });\n            if (len > 2) {\n                return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(\", \"), \", or \") + expected[len - 1];\n            } else if (len === 2) {\n                return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n            } else {\n                return \"of \".concat(thing, \" \").concat(expected[0]);\n            }\n        } else {\n            return \"of \".concat(thing, \" \").concat(String(expected));\n        }\n    }\n    function startsWith(str, search, pos) {\n        return str.substr(0, search.length) === search;\n    }\n    function endsWith(str, search, this_len) {\n        if (this_len === void 0 || this_len > str.length) {\n            this_len = str.length;\n        }\n        return str.substring(this_len - search.length, this_len) === search;\n    }\n    function includes(str, search, start) {\n        if (typeof start !== \"number\") {\n            start = 0;\n        }\n        if (start + search.length > str.length) {\n            return false;\n        } else {\n            return str.indexOf(search, start) !== -1;\n        }\n    }\n    createErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n        return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n    }, TypeError);\n    createErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n        var determiner;\n        if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n            determiner = \"must not be\";\n            expected = expected.replace(/^not /, \"\");\n        } else {\n            determiner = \"must be\";\n        }\n        var msg;\n        if (endsWith(name, \" argument\")) {\n            msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n        } else {\n            var type2 = includes(name, \".\") ? \"property\" : \"argument\";\n            msg = 'The \"'.concat(name, '\" ').concat(type2, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n        }\n        msg += \". Received type \".concat(typeof actual);\n        return msg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\n    createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n        return \"The \" + name + \" method is not implemented\";\n    });\n    createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\n    createErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n        return \"Cannot call \" + name + \" after a stream was destroyed\";\n    });\n    createErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\n    createErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\n    createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n    createErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\n    createErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n        return \"Unknown encoding: \" + arg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\n    errorsBrowser.codes = codes;\n    return errorsBrowser;\n}\nvar state;\nvar hasRequiredState;\nfunction requireState() {\n    if (hasRequiredState) return state;\n    hasRequiredState = 1;\n    var ERR_INVALID_OPT_VALUE = requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;\n    function highWaterMarkFrom(options, isDuplex, duplexKey) {\n        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n    }\n    function getHighWaterMark(state2, options, duplexKey, isDuplex) {\n        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n        if (hwm != null) {\n            if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n                var name = isDuplex ? duplexKey : \"highWaterMark\";\n                throw new ERR_INVALID_OPT_VALUE(name, hwm);\n            }\n            return Math.floor(hwm);\n        }\n        return state2.objectMode ? 16 : 16 * 1024;\n    }\n    state = {\n        getHighWaterMark\n    };\n    return state;\n}\nvar browser;\nvar hasRequiredBrowser;\nfunction requireBrowser() {\n    if (hasRequiredBrowser) return browser;\n    hasRequiredBrowser = 1;\n    browser = deprecate;\n    function deprecate(fn, msg) {\n        if (config(\"noDeprecation\")) {\n            return fn;\n        }\n        var warned = false;\n        function deprecated() {\n            if (!warned) {\n                if (config(\"throwDeprecation\")) {\n                    throw new Error(msg);\n                } else if (config(\"traceDeprecation\")) {\n                    console.trace(msg);\n                } else {\n                    console.warn(msg);\n                }\n                warned = true;\n            }\n            return fn.apply(this, arguments);\n        }\n        return deprecated;\n    }\n    function config(name) {\n        try {\n            if (!commonjsGlobal.localStorage) return false;\n        } catch (_) {\n            return false;\n        }\n        var val = commonjsGlobal.localStorage[name];\n        if (null == val) return false;\n        return String(val).toLowerCase() === \"true\";\n    }\n    return browser;\n}\nvar _stream_writable;\nvar hasRequired_stream_writable;\nfunction require_stream_writable() {\n    if (hasRequired_stream_writable) return _stream_writable;\n    hasRequired_stream_writable = 1;\n    _stream_writable = Writable;\n    function CorkedRequest(state2) {\n        var _this = this;\n        this.next = null;\n        this.entry = null;\n        this.finish = function() {\n            onCorkedFinish(_this, state2);\n        };\n    }\n    var Duplex;\n    Writable.WritableState = WritableState;\n    var internalUtil = {\n        deprecate: requireBrowser()\n    };\n    var Stream = requireStreamBrowser();\n    var Buffer2 = requireBuffer().Buffer;\n    var OurUint8Array = commonjsGlobal.Uint8Array || function() {};\n    function _uint8ArrayToBuffer(chunk) {\n        return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var destroyImpl = requireDestroy();\n    var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    requireInherits_browser()(Writable, Stream);\n    function nop() {}\n    function WritableState(options, stream, isDuplex) {\n        Duplex = Duplex || require_stream_duplex();\n        options = options || {};\n        if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof Duplex;\n        this.objectMode = !!options.objectMode;\n        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n        this.highWaterMark = getHighWaterMark(this, options, \"writableHighWaterMark\", isDuplex);\n        this.finalCalled = false;\n        this.needDrain = false;\n        this.ending = false;\n        this.ended = false;\n        this.finished = false;\n        this.destroyed = false;\n        var noDecode = options.decodeStrings === false;\n        this.decodeStrings = !noDecode;\n        this.defaultEncoding = options.defaultEncoding || \"utf8\";\n        this.length = 0;\n        this.writing = false;\n        this.corked = 0;\n        this.sync = true;\n        this.bufferProcessing = false;\n        this.onwrite = function(er) {\n            onwrite(stream, er);\n        };\n        this.writecb = null;\n        this.writelen = 0;\n        this.bufferedRequest = null;\n        this.lastBufferedRequest = null;\n        this.pendingcb = 0;\n        this.prefinished = false;\n        this.errorEmitted = false;\n        this.emitClose = options.emitClose !== false;\n        this.autoDestroy = !!options.autoDestroy;\n        this.bufferedRequestCount = 0;\n        this.corkedRequestsFree = new CorkedRequest(this);\n    }\n    WritableState.prototype.getBuffer = function getBuffer() {\n        var current = this.bufferedRequest;\n        var out = [];\n        while(current){\n            out.push(current);\n            current = current.next;\n        }\n        return out;\n    };\n    (function() {\n        try {\n            Object.defineProperty(WritableState.prototype, \"buffer\", {\n                get: internalUtil.deprecate(function writableStateBufferGetter() {\n                    return this.getBuffer();\n                }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n            });\n        } catch (_) {}\n    })();\n    var realHasInstance;\n    if (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n        realHasInstance = Function.prototype[Symbol.hasInstance];\n        Object.defineProperty(Writable, Symbol.hasInstance, {\n            value: function value(object) {\n                if (realHasInstance.call(this, object)) return true;\n                if (this !== Writable) return false;\n                return object && object._writableState instanceof WritableState;\n            }\n        });\n    } else {\n        realHasInstance = function realHasInstance2(object) {\n            return object instanceof this;\n        };\n    }\n    function Writable(options) {\n        Duplex = Duplex || require_stream_duplex();\n        var isDuplex = this instanceof Duplex;\n        if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n        this._writableState = new WritableState(options, this, isDuplex);\n        this.writable = true;\n        if (options) {\n            if (typeof options.write === \"function\") this._write = options.write;\n            if (typeof options.writev === \"function\") this._writev = options.writev;\n            if (typeof options.destroy === \"function\") this._destroy = options.destroy;\n            if (typeof options.final === \"function\") this._final = options.final;\n        }\n        Stream.call(this);\n    }\n    Writable.prototype.pipe = function() {\n        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n    };\n    function writeAfterEnd(stream, cb) {\n        var er = new ERR_STREAM_WRITE_AFTER_END();\n        errorOrDestroy(stream, er);\n        process$1.nextTick(cb, er);\n    }\n    function validChunk(stream, state2, chunk, cb) {\n        var er;\n        if (chunk === null) {\n            er = new ERR_STREAM_NULL_VALUES();\n        } else if (typeof chunk !== \"string\" && !state2.objectMode) {\n            er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\n                \"string\",\n                \"Buffer\"\n            ], chunk);\n        }\n        if (er) {\n            errorOrDestroy(stream, er);\n            process$1.nextTick(cb, er);\n            return false;\n        }\n        return true;\n    }\n    Writable.prototype.write = function(chunk, encoding, cb) {\n        var state2 = this._writableState;\n        var ret = false;\n        var isBuf = !state2.objectMode && _isUint8Array(chunk);\n        if (isBuf && !Buffer2.isBuffer(chunk)) {\n            chunk = _uint8ArrayToBuffer(chunk);\n        }\n        if (typeof encoding === \"function\") {\n            cb = encoding;\n            encoding = null;\n        }\n        if (isBuf) encoding = \"buffer\";\n        else if (!encoding) encoding = state2.defaultEncoding;\n        if (typeof cb !== \"function\") cb = nop;\n        if (state2.ending) writeAfterEnd(this, cb);\n        else if (isBuf || validChunk(this, state2, chunk, cb)) {\n            state2.pendingcb++;\n            ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb);\n        }\n        return ret;\n    };\n    Writable.prototype.cork = function() {\n        this._writableState.corked++;\n    };\n    Writable.prototype.uncork = function() {\n        var state2 = this._writableState;\n        if (state2.corked) {\n            state2.corked--;\n            if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) clearBuffer(this, state2);\n        }\n    };\n    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n        if (typeof encoding === \"string\") encoding = encoding.toLowerCase();\n        if (!([\n            \"hex\",\n            \"utf8\",\n            \"utf-8\",\n            \"ascii\",\n            \"binary\",\n            \"base64\",\n            \"ucs2\",\n            \"ucs-2\",\n            \"utf16le\",\n            \"utf-16le\",\n            \"raw\"\n        ].indexOf((encoding + \"\").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n        this._writableState.defaultEncoding = encoding;\n        return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableBuffer\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._writableState && this._writableState.getBuffer();\n        }\n    });\n    function decodeChunk(state2, chunk, encoding) {\n        if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === \"string\") {\n            chunk = Buffer2.from(chunk, encoding);\n        }\n        return chunk;\n    }\n    Object.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._writableState.highWaterMark;\n        }\n    });\n    function writeOrBuffer(stream, state2, isBuf, chunk, encoding, cb) {\n        if (!isBuf) {\n            var newChunk = decodeChunk(state2, chunk, encoding);\n            if (chunk !== newChunk) {\n                isBuf = true;\n                encoding = \"buffer\";\n                chunk = newChunk;\n            }\n        }\n        var len = state2.objectMode ? 1 : chunk.length;\n        state2.length += len;\n        var ret = state2.length < state2.highWaterMark;\n        if (!ret) state2.needDrain = true;\n        if (state2.writing || state2.corked) {\n            var last = state2.lastBufferedRequest;\n            state2.lastBufferedRequest = {\n                chunk,\n                encoding,\n                isBuf,\n                callback: cb,\n                next: null\n            };\n            if (last) {\n                last.next = state2.lastBufferedRequest;\n            } else {\n                state2.bufferedRequest = state2.lastBufferedRequest;\n            }\n            state2.bufferedRequestCount += 1;\n        } else {\n            doWrite(stream, state2, false, len, chunk, encoding, cb);\n        }\n        return ret;\n    }\n    function doWrite(stream, state2, writev, len, chunk, encoding, cb) {\n        state2.writelen = len;\n        state2.writecb = cb;\n        state2.writing = true;\n        state2.sync = true;\n        if (state2.destroyed) state2.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n        else if (writev) stream._writev(chunk, state2.onwrite);\n        else stream._write(chunk, encoding, state2.onwrite);\n        state2.sync = false;\n    }\n    function onwriteError(stream, state2, sync, er, cb) {\n        --state2.pendingcb;\n        if (sync) {\n            process$1.nextTick(cb, er);\n            process$1.nextTick(finishMaybe, stream, state2);\n            stream._writableState.errorEmitted = true;\n            errorOrDestroy(stream, er);\n        } else {\n            cb(er);\n            stream._writableState.errorEmitted = true;\n            errorOrDestroy(stream, er);\n            finishMaybe(stream, state2);\n        }\n    }\n    function onwriteStateUpdate(state2) {\n        state2.writing = false;\n        state2.writecb = null;\n        state2.length -= state2.writelen;\n        state2.writelen = 0;\n    }\n    function onwrite(stream, er) {\n        var state2 = stream._writableState;\n        var sync = state2.sync;\n        var cb = state2.writecb;\n        if (typeof cb !== \"function\") throw new ERR_MULTIPLE_CALLBACK();\n        onwriteStateUpdate(state2);\n        if (er) onwriteError(stream, state2, sync, er, cb);\n        else {\n            var finished = needFinish(state2) || stream.destroyed;\n            if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {\n                clearBuffer(stream, state2);\n            }\n            if (sync) {\n                process$1.nextTick(afterWrite, stream, state2, finished, cb);\n            } else {\n                afterWrite(stream, state2, finished, cb);\n            }\n        }\n    }\n    function afterWrite(stream, state2, finished, cb) {\n        if (!finished) onwriteDrain(stream, state2);\n        state2.pendingcb--;\n        cb();\n        finishMaybe(stream, state2);\n    }\n    function onwriteDrain(stream, state2) {\n        if (state2.length === 0 && state2.needDrain) {\n            state2.needDrain = false;\n            stream.emit(\"drain\");\n        }\n    }\n    function clearBuffer(stream, state2) {\n        state2.bufferProcessing = true;\n        var entry = state2.bufferedRequest;\n        if (stream._writev && entry && entry.next) {\n            var l = state2.bufferedRequestCount;\n            var buffer2 = new Array(l);\n            var holder = state2.corkedRequestsFree;\n            holder.entry = entry;\n            var count = 0;\n            var allBuffers = true;\n            while(entry){\n                buffer2[count] = entry;\n                if (!entry.isBuf) allBuffers = false;\n                entry = entry.next;\n                count += 1;\n            }\n            buffer2.allBuffers = allBuffers;\n            doWrite(stream, state2, true, state2.length, buffer2, \"\", holder.finish);\n            state2.pendingcb++;\n            state2.lastBufferedRequest = null;\n            if (holder.next) {\n                state2.corkedRequestsFree = holder.next;\n                holder.next = null;\n            } else {\n                state2.corkedRequestsFree = new CorkedRequest(state2);\n            }\n            state2.bufferedRequestCount = 0;\n        } else {\n            while(entry){\n                var chunk = entry.chunk;\n                var encoding = entry.encoding;\n                var cb = entry.callback;\n                var len = state2.objectMode ? 1 : chunk.length;\n                doWrite(stream, state2, false, len, chunk, encoding, cb);\n                entry = entry.next;\n                state2.bufferedRequestCount--;\n                if (state2.writing) {\n                    break;\n                }\n            }\n            if (entry === null) state2.lastBufferedRequest = null;\n        }\n        state2.bufferedRequest = entry;\n        state2.bufferProcessing = false;\n    }\n    Writable.prototype._write = function(chunk, encoding, cb) {\n        cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n    };\n    Writable.prototype._writev = null;\n    Writable.prototype.end = function(chunk, encoding, cb) {\n        var state2 = this._writableState;\n        if (typeof chunk === \"function\") {\n            cb = chunk;\n            chunk = null;\n            encoding = null;\n        } else if (typeof encoding === \"function\") {\n            cb = encoding;\n            encoding = null;\n        }\n        if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);\n        if (state2.corked) {\n            state2.corked = 1;\n            this.uncork();\n        }\n        if (!state2.ending) endWritable(this, state2, cb);\n        return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableLength\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._writableState.length;\n        }\n    });\n    function needFinish(state2) {\n        return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;\n    }\n    function callFinal(stream, state2) {\n        stream._final(function(err) {\n            state2.pendingcb--;\n            if (err) {\n                errorOrDestroy(stream, err);\n            }\n            state2.prefinished = true;\n            stream.emit(\"prefinish\");\n            finishMaybe(stream, state2);\n        });\n    }\n    function prefinish(stream, state2) {\n        if (!state2.prefinished && !state2.finalCalled) {\n            if (typeof stream._final === \"function\" && !state2.destroyed) {\n                state2.pendingcb++;\n                state2.finalCalled = true;\n                process$1.nextTick(callFinal, stream, state2);\n            } else {\n                state2.prefinished = true;\n                stream.emit(\"prefinish\");\n            }\n        }\n    }\n    function finishMaybe(stream, state2) {\n        var need = needFinish(state2);\n        if (need) {\n            prefinish(stream, state2);\n            if (state2.pendingcb === 0) {\n                state2.finished = true;\n                stream.emit(\"finish\");\n                if (state2.autoDestroy) {\n                    var rState = stream._readableState;\n                    if (!rState || rState.autoDestroy && rState.endEmitted) {\n                        stream.destroy();\n                    }\n                }\n            }\n        }\n        return need;\n    }\n    function endWritable(stream, state2, cb) {\n        state2.ending = true;\n        finishMaybe(stream, state2);\n        if (cb) {\n            if (state2.finished) process$1.nextTick(cb);\n            else stream.once(\"finish\", cb);\n        }\n        state2.ended = true;\n        stream.writable = false;\n    }\n    function onCorkedFinish(corkReq, state2, err) {\n        var entry = corkReq.entry;\n        corkReq.entry = null;\n        while(entry){\n            var cb = entry.callback;\n            state2.pendingcb--;\n            cb(err);\n            entry = entry.next;\n        }\n        state2.corkedRequestsFree.next = corkReq;\n    }\n    Object.defineProperty(Writable.prototype, \"destroyed\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            if (this._writableState === void 0) {\n                return false;\n            }\n            return this._writableState.destroyed;\n        },\n        set: function set(value) {\n            if (!this._writableState) {\n                return;\n            }\n            this._writableState.destroyed = value;\n        }\n    });\n    Writable.prototype.destroy = destroyImpl.destroy;\n    Writable.prototype._undestroy = destroyImpl.undestroy;\n    Writable.prototype._destroy = function(err, cb) {\n        cb(err);\n    };\n    return _stream_writable;\n}\nvar _stream_duplex;\nvar hasRequired_stream_duplex;\nfunction require_stream_duplex() {\n    if (hasRequired_stream_duplex) return _stream_duplex;\n    hasRequired_stream_duplex = 1;\n    var objectKeys = Object.keys || function(obj) {\n        var keys2 = [];\n        for(var key in obj){\n            keys2.push(key);\n        }\n        return keys2;\n    };\n    _stream_duplex = Duplex;\n    var Readable = require_stream_readable();\n    var Writable = require_stream_writable();\n    requireInherits_browser()(Duplex, Readable);\n    {\n        var keys = objectKeys(Writable.prototype);\n        for(var v = 0; v < keys.length; v++){\n            var method = keys[v];\n            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n        }\n    }\n    function Duplex(options) {\n        if (!(this instanceof Duplex)) return new Duplex(options);\n        Readable.call(this, options);\n        Writable.call(this, options);\n        this.allowHalfOpen = true;\n        if (options) {\n            if (options.readable === false) this.readable = false;\n            if (options.writable === false) this.writable = false;\n            if (options.allowHalfOpen === false) {\n                this.allowHalfOpen = false;\n                this.once(\"end\", onend);\n            }\n        }\n    }\n    Object.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._writableState.highWaterMark;\n        }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableBuffer\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._writableState && this._writableState.getBuffer();\n        }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableLength\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._writableState.length;\n        }\n    });\n    function onend() {\n        if (this._writableState.ended) return;\n        process$1.nextTick(onEndNT, this);\n    }\n    function onEndNT(self2) {\n        self2.end();\n    }\n    Object.defineProperty(Duplex.prototype, \"destroyed\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            if (this._readableState === void 0 || this._writableState === void 0) {\n                return false;\n            }\n            return this._readableState.destroyed && this._writableState.destroyed;\n        },\n        set: function set(value) {\n            if (this._readableState === void 0 || this._writableState === void 0) {\n                return;\n            }\n            this._readableState.destroyed = value;\n            this._writableState.destroyed = value;\n        }\n    });\n    return _stream_duplex;\n}\nvar string_decoder = {};\nvar safeBuffer = {\n    exports: {}\n};\nvar hasRequiredSafeBuffer;\nfunction requireSafeBuffer() {\n    if (hasRequiredSafeBuffer) return safeBuffer.exports;\n    hasRequiredSafeBuffer = 1;\n    (function(module, exports) {\n        var buffer2 = requireBuffer();\n        var Buffer2 = buffer2.Buffer;\n        function copyProps(src, dst) {\n            for(var key in src){\n                dst[key] = src[key];\n            }\n        }\n        if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {\n            module.exports = buffer2;\n        } else {\n            copyProps(buffer2, exports);\n            exports.Buffer = SafeBuffer;\n        }\n        function SafeBuffer(arg, encodingOrOffset, length) {\n            return Buffer2(arg, encodingOrOffset, length);\n        }\n        copyProps(Buffer2, SafeBuffer);\n        SafeBuffer.from = function(arg, encodingOrOffset, length) {\n            if (typeof arg === \"number\") {\n                throw new TypeError(\"Argument must not be a number\");\n            }\n            return Buffer2(arg, encodingOrOffset, length);\n        };\n        SafeBuffer.alloc = function(size, fill, encoding) {\n            if (typeof size !== \"number\") {\n                throw new TypeError(\"Argument must be a number\");\n            }\n            var buf = Buffer2(size);\n            if (fill !== void 0) {\n                if (typeof encoding === \"string\") {\n                    buf.fill(fill, encoding);\n                } else {\n                    buf.fill(fill);\n                }\n            } else {\n                buf.fill(0);\n            }\n            return buf;\n        };\n        SafeBuffer.allocUnsafe = function(size) {\n            if (typeof size !== \"number\") {\n                throw new TypeError(\"Argument must be a number\");\n            }\n            return Buffer2(size);\n        };\n        SafeBuffer.allocUnsafeSlow = function(size) {\n            if (typeof size !== \"number\") {\n                throw new TypeError(\"Argument must be a number\");\n            }\n            return buffer2.SlowBuffer(size);\n        };\n    })(safeBuffer, safeBuffer.exports);\n    return safeBuffer.exports;\n}\nvar hasRequiredString_decoder;\nfunction requireString_decoder() {\n    if (hasRequiredString_decoder) return string_decoder;\n    hasRequiredString_decoder = 1;\n    var Buffer2 = requireSafeBuffer().Buffer;\n    var isEncoding = Buffer2.isEncoding || function(encoding) {\n        encoding = \"\" + encoding;\n        switch(encoding && encoding.toLowerCase()){\n            case \"hex\":\n            case \"utf8\":\n            case \"utf-8\":\n            case \"ascii\":\n            case \"binary\":\n            case \"base64\":\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n            case \"raw\":\n                return true;\n            default:\n                return false;\n        }\n    };\n    function _normalizeEncoding(enc) {\n        if (!enc) return \"utf8\";\n        var retried;\n        while(true){\n            switch(enc){\n                case \"utf8\":\n                case \"utf-8\":\n                    return \"utf8\";\n                case \"ucs2\":\n                case \"ucs-2\":\n                case \"utf16le\":\n                case \"utf-16le\":\n                    return \"utf16le\";\n                case \"latin1\":\n                case \"binary\":\n                    return \"latin1\";\n                case \"base64\":\n                case \"ascii\":\n                case \"hex\":\n                    return enc;\n                default:\n                    if (retried) return;\n                    enc = (\"\" + enc).toLowerCase();\n                    retried = true;\n            }\n        }\n    }\n    function normalizeEncoding(enc) {\n        var nenc = _normalizeEncoding(enc);\n        if (typeof nenc !== \"string\" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error(\"Unknown encoding: \" + enc);\n        return nenc || enc;\n    }\n    string_decoder.StringDecoder = StringDecoder;\n    function StringDecoder(encoding) {\n        this.encoding = normalizeEncoding(encoding);\n        var nb;\n        switch(this.encoding){\n            case \"utf16le\":\n                this.text = utf16Text;\n                this.end = utf16End;\n                nb = 4;\n                break;\n            case \"utf8\":\n                this.fillLast = utf8FillLast;\n                nb = 4;\n                break;\n            case \"base64\":\n                this.text = base64Text;\n                this.end = base64End;\n                nb = 3;\n                break;\n            default:\n                this.write = simpleWrite;\n                this.end = simpleEnd;\n                return;\n        }\n        this.lastNeed = 0;\n        this.lastTotal = 0;\n        this.lastChar = Buffer2.allocUnsafe(nb);\n    }\n    StringDecoder.prototype.write = function(buf) {\n        if (buf.length === 0) return \"\";\n        var r;\n        var i;\n        if (this.lastNeed) {\n            r = this.fillLast(buf);\n            if (r === void 0) return \"\";\n            i = this.lastNeed;\n            this.lastNeed = 0;\n        } else {\n            i = 0;\n        }\n        if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n        return r || \"\";\n    };\n    StringDecoder.prototype.end = utf8End;\n    StringDecoder.prototype.text = utf8Text;\n    StringDecoder.prototype.fillLast = function(buf) {\n        if (this.lastNeed <= buf.length) {\n            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n            return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n        }\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n        this.lastNeed -= buf.length;\n    };\n    function utf8CheckByte(byte) {\n        if (byte <= 127) return 0;\n        else if (byte >> 5 === 6) return 2;\n        else if (byte >> 4 === 14) return 3;\n        else if (byte >> 3 === 30) return 4;\n        return byte >> 6 === 2 ? -1 : -2;\n    }\n    function utf8CheckIncomplete(self2, buf, i) {\n        var j = buf.length - 1;\n        if (j < i) return 0;\n        var nb = utf8CheckByte(buf[j]);\n        if (nb >= 0) {\n            if (nb > 0) self2.lastNeed = nb - 1;\n            return nb;\n        }\n        if (--j < i || nb === -2) return 0;\n        nb = utf8CheckByte(buf[j]);\n        if (nb >= 0) {\n            if (nb > 0) self2.lastNeed = nb - 2;\n            return nb;\n        }\n        if (--j < i || nb === -2) return 0;\n        nb = utf8CheckByte(buf[j]);\n        if (nb >= 0) {\n            if (nb > 0) {\n                if (nb === 2) nb = 0;\n                else self2.lastNeed = nb - 3;\n            }\n            return nb;\n        }\n        return 0;\n    }\n    function utf8CheckExtraBytes(self2, buf, p) {\n        if ((buf[0] & 192) !== 128) {\n            self2.lastNeed = 0;\n            return \"�\";\n        }\n        if (self2.lastNeed > 1 && buf.length > 1) {\n            if ((buf[1] & 192) !== 128) {\n                self2.lastNeed = 1;\n                return \"�\";\n            }\n            if (self2.lastNeed > 2 && buf.length > 2) {\n                if ((buf[2] & 192) !== 128) {\n                    self2.lastNeed = 2;\n                    return \"�\";\n                }\n            }\n        }\n    }\n    function utf8FillLast(buf) {\n        var p = this.lastTotal - this.lastNeed;\n        var r = utf8CheckExtraBytes(this, buf);\n        if (r !== void 0) return r;\n        if (this.lastNeed <= buf.length) {\n            buf.copy(this.lastChar, p, 0, this.lastNeed);\n            return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n        }\n        buf.copy(this.lastChar, p, 0, buf.length);\n        this.lastNeed -= buf.length;\n    }\n    function utf8Text(buf, i) {\n        var total = utf8CheckIncomplete(this, buf, i);\n        if (!this.lastNeed) return buf.toString(\"utf8\", i);\n        this.lastTotal = total;\n        var end = buf.length - (total - this.lastNeed);\n        buf.copy(this.lastChar, 0, end);\n        return buf.toString(\"utf8\", i, end);\n    }\n    function utf8End(buf) {\n        var r = buf && buf.length ? this.write(buf) : \"\";\n        if (this.lastNeed) return r + \"�\";\n        return r;\n    }\n    function utf16Text(buf, i) {\n        if ((buf.length - i) % 2 === 0) {\n            var r = buf.toString(\"utf16le\", i);\n            if (r) {\n                var c = r.charCodeAt(r.length - 1);\n                if (c >= 55296 && c <= 56319) {\n                    this.lastNeed = 2;\n                    this.lastTotal = 4;\n                    this.lastChar[0] = buf[buf.length - 2];\n                    this.lastChar[1] = buf[buf.length - 1];\n                    return r.slice(0, -1);\n                }\n            }\n            return r;\n        }\n        this.lastNeed = 1;\n        this.lastTotal = 2;\n        this.lastChar[0] = buf[buf.length - 1];\n        return buf.toString(\"utf16le\", i, buf.length - 1);\n    }\n    function utf16End(buf) {\n        var r = buf && buf.length ? this.write(buf) : \"\";\n        if (this.lastNeed) {\n            var end = this.lastTotal - this.lastNeed;\n            return r + this.lastChar.toString(\"utf16le\", 0, end);\n        }\n        return r;\n    }\n    function base64Text(buf, i) {\n        var n = (buf.length - i) % 3;\n        if (n === 0) return buf.toString(\"base64\", i);\n        this.lastNeed = 3 - n;\n        this.lastTotal = 3;\n        if (n === 1) {\n            this.lastChar[0] = buf[buf.length - 1];\n        } else {\n            this.lastChar[0] = buf[buf.length - 2];\n            this.lastChar[1] = buf[buf.length - 1];\n        }\n        return buf.toString(\"base64\", i, buf.length - n);\n    }\n    function base64End(buf) {\n        var r = buf && buf.length ? this.write(buf) : \"\";\n        if (this.lastNeed) return r + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n        return r;\n    }\n    function simpleWrite(buf) {\n        return buf.toString(this.encoding);\n    }\n    function simpleEnd(buf) {\n        return buf && buf.length ? this.write(buf) : \"\";\n    }\n    return string_decoder;\n}\nvar endOfStream;\nvar hasRequiredEndOfStream;\nfunction requireEndOfStream() {\n    if (hasRequiredEndOfStream) return endOfStream;\n    hasRequiredEndOfStream = 1;\n    var ERR_STREAM_PREMATURE_CLOSE = requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;\n    function once(callback) {\n        var called = false;\n        return function() {\n            if (called) return;\n            called = true;\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            callback.apply(this, args);\n        };\n    }\n    function noop2() {}\n    function isRequest(stream) {\n        return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function eos(stream, opts, callback) {\n        if (typeof opts === \"function\") return eos(stream, null, opts);\n        if (!opts) opts = {};\n        callback = once(callback || noop2);\n        var readable = opts.readable || opts.readable !== false && stream.readable;\n        var writable = opts.writable || opts.writable !== false && stream.writable;\n        var onlegacyfinish = function onlegacyfinish2() {\n            if (!stream.writable) onfinish();\n        };\n        var writableEnded = stream._writableState && stream._writableState.finished;\n        var onfinish = function onfinish2() {\n            writable = false;\n            writableEnded = true;\n            if (!readable) callback.call(stream);\n        };\n        var readableEnded = stream._readableState && stream._readableState.endEmitted;\n        var onend = function onend2() {\n            readable = false;\n            readableEnded = true;\n            if (!writable) callback.call(stream);\n        };\n        var onerror = function onerror2(err) {\n            callback.call(stream, err);\n        };\n        var onclose = function onclose2() {\n            var err;\n            if (readable && !readableEnded) {\n                if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n                return callback.call(stream, err);\n            }\n            if (writable && !writableEnded) {\n                if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n                return callback.call(stream, err);\n            }\n        };\n        var onrequest = function onrequest2() {\n            stream.req.on(\"finish\", onfinish);\n        };\n        if (isRequest(stream)) {\n            stream.on(\"complete\", onfinish);\n            stream.on(\"abort\", onclose);\n            if (stream.req) onrequest();\n            else stream.on(\"request\", onrequest);\n        } else if (writable && !stream._writableState) {\n            stream.on(\"end\", onlegacyfinish);\n            stream.on(\"close\", onlegacyfinish);\n        }\n        stream.on(\"end\", onend);\n        stream.on(\"finish\", onfinish);\n        if (opts.error !== false) stream.on(\"error\", onerror);\n        stream.on(\"close\", onclose);\n        return function() {\n            stream.removeListener(\"complete\", onfinish);\n            stream.removeListener(\"abort\", onclose);\n            stream.removeListener(\"request\", onrequest);\n            if (stream.req) stream.req.removeListener(\"finish\", onfinish);\n            stream.removeListener(\"end\", onlegacyfinish);\n            stream.removeListener(\"close\", onlegacyfinish);\n            stream.removeListener(\"finish\", onfinish);\n            stream.removeListener(\"end\", onend);\n            stream.removeListener(\"error\", onerror);\n            stream.removeListener(\"close\", onclose);\n        };\n    }\n    endOfStream = eos;\n    return endOfStream;\n}\nvar async_iterator;\nvar hasRequiredAsync_iterator;\nfunction requireAsync_iterator() {\n    if (hasRequiredAsync_iterator) return async_iterator;\n    hasRequiredAsync_iterator = 1;\n    var _Object$setPrototypeO;\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, {\n                value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n            });\n        } else {\n            obj[key] = value;\n        }\n        return obj;\n    }\n    var finished = requireEndOfStream();\n    var kLastResolve = Symbol(\"lastResolve\");\n    var kLastReject = Symbol(\"lastReject\");\n    var kError = Symbol(\"error\");\n    var kEnded = Symbol(\"ended\");\n    var kLastPromise = Symbol(\"lastPromise\");\n    var kHandlePromise = Symbol(\"handlePromise\");\n    var kStream = Symbol(\"stream\");\n    function createIterResult(value, done) {\n        return {\n            value,\n            done\n        };\n    }\n    function readAndResolve(iter) {\n        var resolve = iter[kLastResolve];\n        if (resolve !== null) {\n            var data = iter[kStream].read();\n            if (data !== null) {\n                iter[kLastPromise] = null;\n                iter[kLastResolve] = null;\n                iter[kLastReject] = null;\n                resolve(createIterResult(data, false));\n            }\n        }\n    }\n    function onReadable(iter) {\n        process$1.nextTick(readAndResolve, iter);\n    }\n    function wrapForNext(lastPromise, iter) {\n        return function(resolve, reject) {\n            lastPromise.then(function() {\n                if (iter[kEnded]) {\n                    resolve(createIterResult(void 0, true));\n                    return;\n                }\n                iter[kHandlePromise](resolve, reject);\n            }, reject);\n        };\n    }\n    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});\n    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n        get stream () {\n            return this[kStream];\n        },\n        next: function next() {\n            var _this = this;\n            var error = this[kError];\n            if (error !== null) {\n                return Promise.reject(error);\n            }\n            if (this[kEnded]) {\n                return Promise.resolve(createIterResult(void 0, true));\n            }\n            if (this[kStream].destroyed) {\n                return new Promise(function(resolve, reject) {\n                    process$1.nextTick(function() {\n                        if (_this[kError]) {\n                            reject(_this[kError]);\n                        } else {\n                            resolve(createIterResult(void 0, true));\n                        }\n                    });\n                });\n            }\n            var lastPromise = this[kLastPromise];\n            var promise;\n            if (lastPromise) {\n                promise = new Promise(wrapForNext(lastPromise, this));\n            } else {\n                var data = this[kStream].read();\n                if (data !== null) {\n                    return Promise.resolve(createIterResult(data, false));\n                }\n                promise = new Promise(this[kHandlePromise]);\n            }\n            this[kLastPromise] = promise;\n            return promise;\n        }\n    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n        return this;\n    }), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n        var _this2 = this;\n        return new Promise(function(resolve, reject) {\n            _this2[kStream].destroy(null, function(err) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(createIterResult(void 0, true));\n            });\n        });\n    }), _Object$setPrototypeO), AsyncIteratorPrototype);\n    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {\n        var _Object$create;\n        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n            value: stream,\n            writable: true\n        }), _defineProperty(_Object$create, kLastResolve, {\n            value: null,\n            writable: true\n        }), _defineProperty(_Object$create, kLastReject, {\n            value: null,\n            writable: true\n        }), _defineProperty(_Object$create, kError, {\n            value: null,\n            writable: true\n        }), _defineProperty(_Object$create, kEnded, {\n            value: stream._readableState.endEmitted,\n            writable: true\n        }), _defineProperty(_Object$create, kHandlePromise, {\n            value: function value(resolve, reject) {\n                var data = iterator[kStream].read();\n                if (data) {\n                    iterator[kLastPromise] = null;\n                    iterator[kLastResolve] = null;\n                    iterator[kLastReject] = null;\n                    resolve(createIterResult(data, false));\n                } else {\n                    iterator[kLastResolve] = resolve;\n                    iterator[kLastReject] = reject;\n                }\n            },\n            writable: true\n        }), _Object$create));\n        iterator[kLastPromise] = null;\n        finished(stream, function(err) {\n            if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n                var reject = iterator[kLastReject];\n                if (reject !== null) {\n                    iterator[kLastPromise] = null;\n                    iterator[kLastResolve] = null;\n                    iterator[kLastReject] = null;\n                    reject(err);\n                }\n                iterator[kError] = err;\n                return;\n            }\n            var resolve = iterator[kLastResolve];\n            if (resolve !== null) {\n                iterator[kLastPromise] = null;\n                iterator[kLastResolve] = null;\n                iterator[kLastReject] = null;\n                resolve(createIterResult(void 0, true));\n            }\n            iterator[kEnded] = true;\n        });\n        stream.on(\"readable\", onReadable.bind(null, iterator));\n        return iterator;\n    };\n    async_iterator = createReadableStreamAsyncIterator;\n    return async_iterator;\n}\nvar fromBrowser;\nvar hasRequiredFromBrowser;\nfunction requireFromBrowser() {\n    if (hasRequiredFromBrowser) return fromBrowser;\n    hasRequiredFromBrowser = 1;\n    fromBrowser = function() {\n        throw new Error(\"Readable.from is not available in the browser\");\n    };\n    return fromBrowser;\n}\nvar _stream_readable;\nvar hasRequired_stream_readable;\nfunction require_stream_readable() {\n    if (hasRequired_stream_readable) return _stream_readable;\n    hasRequired_stream_readable = 1;\n    _stream_readable = Readable;\n    var Duplex;\n    Readable.ReadableState = ReadableState;\n    requireEvents().EventEmitter;\n    var EElistenerCount = function EElistenerCount2(emitter, type2) {\n        return emitter.listeners(type2).length;\n    };\n    var Stream = requireStreamBrowser();\n    var Buffer2 = requireBuffer().Buffer;\n    var OurUint8Array = commonjsGlobal.Uint8Array || function() {};\n    function _uint8ArrayToBuffer(chunk) {\n        return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var debugUtil = requireUtil();\n    var debug;\n    if (debugUtil && debugUtil.debuglog) {\n        debug = debugUtil.debuglog(\"stream\");\n    } else {\n        debug = function debug2() {};\n    }\n    var BufferList = requireBuffer_list();\n    var destroyImpl = requireDestroy();\n    var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n    var StringDecoder;\n    var createReadableStreamAsyncIterator;\n    var from;\n    requireInherits_browser()(Readable, Stream);\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    var kProxyEvents = [\n        \"error\",\n        \"close\",\n        \"destroy\",\n        \"pause\",\n        \"resume\"\n    ];\n    function prependListener(emitter, event, fn) {\n        if (typeof emitter.prependListener === \"function\") return emitter.prependListener(event, fn);\n        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);\n        else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);\n        else emitter._events[event] = [\n            fn,\n            emitter._events[event]\n        ];\n    }\n    function ReadableState(options, stream, isDuplex) {\n        Duplex = Duplex || require_stream_duplex();\n        options = options || {};\n        if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof Duplex;\n        this.objectMode = !!options.objectMode;\n        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n        this.highWaterMark = getHighWaterMark(this, options, \"readableHighWaterMark\", isDuplex);\n        this.buffer = new BufferList();\n        this.length = 0;\n        this.pipes = null;\n        this.pipesCount = 0;\n        this.flowing = null;\n        this.ended = false;\n        this.endEmitted = false;\n        this.reading = false;\n        this.sync = true;\n        this.needReadable = false;\n        this.emittedReadable = false;\n        this.readableListening = false;\n        this.resumeScheduled = false;\n        this.paused = true;\n        this.emitClose = options.emitClose !== false;\n        this.autoDestroy = !!options.autoDestroy;\n        this.destroyed = false;\n        this.defaultEncoding = options.defaultEncoding || \"utf8\";\n        this.awaitDrain = 0;\n        this.readingMore = false;\n        this.decoder = null;\n        this.encoding = null;\n        if (options.encoding) {\n            if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;\n            this.decoder = new StringDecoder(options.encoding);\n            this.encoding = options.encoding;\n        }\n    }\n    function Readable(options) {\n        Duplex = Duplex || require_stream_duplex();\n        if (!(this instanceof Readable)) return new Readable(options);\n        var isDuplex = this instanceof Duplex;\n        this._readableState = new ReadableState(options, this, isDuplex);\n        this.readable = true;\n        if (options) {\n            if (typeof options.read === \"function\") this._read = options.read;\n            if (typeof options.destroy === \"function\") this._destroy = options.destroy;\n        }\n        Stream.call(this);\n    }\n    Object.defineProperty(Readable.prototype, \"destroyed\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            if (this._readableState === void 0) {\n                return false;\n            }\n            return this._readableState.destroyed;\n        },\n        set: function set(value) {\n            if (!this._readableState) {\n                return;\n            }\n            this._readableState.destroyed = value;\n        }\n    });\n    Readable.prototype.destroy = destroyImpl.destroy;\n    Readable.prototype._undestroy = destroyImpl.undestroy;\n    Readable.prototype._destroy = function(err, cb) {\n        cb(err);\n    };\n    Readable.prototype.push = function(chunk, encoding) {\n        var state2 = this._readableState;\n        var skipChunkCheck;\n        if (!state2.objectMode) {\n            if (typeof chunk === \"string\") {\n                encoding = encoding || state2.defaultEncoding;\n                if (encoding !== state2.encoding) {\n                    chunk = Buffer2.from(chunk, encoding);\n                    encoding = \"\";\n                }\n                skipChunkCheck = true;\n            }\n        } else {\n            skipChunkCheck = true;\n        }\n        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n    };\n    Readable.prototype.unshift = function(chunk) {\n        return readableAddChunk(this, chunk, null, true, false);\n    };\n    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n        debug(\"readableAddChunk\", chunk);\n        var state2 = stream._readableState;\n        if (chunk === null) {\n            state2.reading = false;\n            onEofChunk(stream, state2);\n        } else {\n            var er;\n            if (!skipChunkCheck) er = chunkInvalid(state2, chunk);\n            if (er) {\n                errorOrDestroy(stream, er);\n            } else if (state2.objectMode || chunk && chunk.length > 0) {\n                if (typeof chunk !== \"string\" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {\n                    chunk = _uint8ArrayToBuffer(chunk);\n                }\n                if (addToFront) {\n                    if (state2.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n                    else addChunk(stream, state2, chunk, true);\n                } else if (state2.ended) {\n                    errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n                } else if (state2.destroyed) {\n                    return false;\n                } else {\n                    state2.reading = false;\n                    if (state2.decoder && !encoding) {\n                        chunk = state2.decoder.write(chunk);\n                        if (state2.objectMode || chunk.length !== 0) addChunk(stream, state2, chunk, false);\n                        else maybeReadMore(stream, state2);\n                    } else {\n                        addChunk(stream, state2, chunk, false);\n                    }\n                }\n            } else if (!addToFront) {\n                state2.reading = false;\n                maybeReadMore(stream, state2);\n            }\n        }\n        return !state2.ended && (state2.length < state2.highWaterMark || state2.length === 0);\n    }\n    function addChunk(stream, state2, chunk, addToFront) {\n        if (state2.flowing && state2.length === 0 && !state2.sync) {\n            state2.awaitDrain = 0;\n            stream.emit(\"data\", chunk);\n        } else {\n            state2.length += state2.objectMode ? 1 : chunk.length;\n            if (addToFront) state2.buffer.unshift(chunk);\n            else state2.buffer.push(chunk);\n            if (state2.needReadable) emitReadable(stream);\n        }\n        maybeReadMore(stream, state2);\n    }\n    function chunkInvalid(state2, chunk) {\n        var er;\n        if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== void 0 && !state2.objectMode) {\n            er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\n                \"string\",\n                \"Buffer\",\n                \"Uint8Array\"\n            ], chunk);\n        }\n        return er;\n    }\n    Readable.prototype.isPaused = function() {\n        return this._readableState.flowing === false;\n    };\n    Readable.prototype.setEncoding = function(enc) {\n        if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;\n        var decoder = new StringDecoder(enc);\n        this._readableState.decoder = decoder;\n        this._readableState.encoding = this._readableState.decoder.encoding;\n        var p = this._readableState.buffer.head;\n        var content = \"\";\n        while(p !== null){\n            content += decoder.write(p.data);\n            p = p.next;\n        }\n        this._readableState.buffer.clear();\n        if (content !== \"\") this._readableState.buffer.push(content);\n        this._readableState.length = content.length;\n        return this;\n    };\n    var MAX_HWM = 1073741824;\n    function computeNewHighWaterMark(n) {\n        if (n >= MAX_HWM) {\n            n = MAX_HWM;\n        } else {\n            n--;\n            n |= n >>> 1;\n            n |= n >>> 2;\n            n |= n >>> 4;\n            n |= n >>> 8;\n            n |= n >>> 16;\n            n++;\n        }\n        return n;\n    }\n    function howMuchToRead(n, state2) {\n        if (n <= 0 || state2.length === 0 && state2.ended) return 0;\n        if (state2.objectMode) return 1;\n        if (n !== n) {\n            if (state2.flowing && state2.length) return state2.buffer.head.data.length;\n            else return state2.length;\n        }\n        if (n > state2.highWaterMark) state2.highWaterMark = computeNewHighWaterMark(n);\n        if (n <= state2.length) return n;\n        if (!state2.ended) {\n            state2.needReadable = true;\n            return 0;\n        }\n        return state2.length;\n    }\n    Readable.prototype.read = function(n) {\n        debug(\"read\", n);\n        n = parseInt(n, 10);\n        var state2 = this._readableState;\n        var nOrig = n;\n        if (n !== 0) state2.emittedReadable = false;\n        if (n === 0 && state2.needReadable && ((state2.highWaterMark !== 0 ? state2.length >= state2.highWaterMark : state2.length > 0) || state2.ended)) {\n            debug(\"read: emitReadable\", state2.length, state2.ended);\n            if (state2.length === 0 && state2.ended) endReadable(this);\n            else emitReadable(this);\n            return null;\n        }\n        n = howMuchToRead(n, state2);\n        if (n === 0 && state2.ended) {\n            if (state2.length === 0) endReadable(this);\n            return null;\n        }\n        var doRead = state2.needReadable;\n        debug(\"need readable\", doRead);\n        if (state2.length === 0 || state2.length - n < state2.highWaterMark) {\n            doRead = true;\n            debug(\"length less than watermark\", doRead);\n        }\n        if (state2.ended || state2.reading) {\n            doRead = false;\n            debug(\"reading or ended\", doRead);\n        } else if (doRead) {\n            debug(\"do read\");\n            state2.reading = true;\n            state2.sync = true;\n            if (state2.length === 0) state2.needReadable = true;\n            this._read(state2.highWaterMark);\n            state2.sync = false;\n            if (!state2.reading) n = howMuchToRead(nOrig, state2);\n        }\n        var ret;\n        if (n > 0) ret = fromList(n, state2);\n        else ret = null;\n        if (ret === null) {\n            state2.needReadable = state2.length <= state2.highWaterMark;\n            n = 0;\n        } else {\n            state2.length -= n;\n            state2.awaitDrain = 0;\n        }\n        if (state2.length === 0) {\n            if (!state2.ended) state2.needReadable = true;\n            if (nOrig !== n && state2.ended) endReadable(this);\n        }\n        if (ret !== null) this.emit(\"data\", ret);\n        return ret;\n    };\n    function onEofChunk(stream, state2) {\n        debug(\"onEofChunk\");\n        if (state2.ended) return;\n        if (state2.decoder) {\n            var chunk = state2.decoder.end();\n            if (chunk && chunk.length) {\n                state2.buffer.push(chunk);\n                state2.length += state2.objectMode ? 1 : chunk.length;\n            }\n        }\n        state2.ended = true;\n        if (state2.sync) {\n            emitReadable(stream);\n        } else {\n            state2.needReadable = false;\n            if (!state2.emittedReadable) {\n                state2.emittedReadable = true;\n                emitReadable_(stream);\n            }\n        }\n    }\n    function emitReadable(stream) {\n        var state2 = stream._readableState;\n        debug(\"emitReadable\", state2.needReadable, state2.emittedReadable);\n        state2.needReadable = false;\n        if (!state2.emittedReadable) {\n            debug(\"emitReadable\", state2.flowing);\n            state2.emittedReadable = true;\n            process$1.nextTick(emitReadable_, stream);\n        }\n    }\n    function emitReadable_(stream) {\n        var state2 = stream._readableState;\n        debug(\"emitReadable_\", state2.destroyed, state2.length, state2.ended);\n        if (!state2.destroyed && (state2.length || state2.ended)) {\n            stream.emit(\"readable\");\n            state2.emittedReadable = false;\n        }\n        state2.needReadable = !state2.flowing && !state2.ended && state2.length <= state2.highWaterMark;\n        flow(stream);\n    }\n    function maybeReadMore(stream, state2) {\n        if (!state2.readingMore) {\n            state2.readingMore = true;\n            process$1.nextTick(maybeReadMore_, stream, state2);\n        }\n    }\n    function maybeReadMore_(stream, state2) {\n        while(!state2.reading && !state2.ended && (state2.length < state2.highWaterMark || state2.flowing && state2.length === 0)){\n            var len = state2.length;\n            debug(\"maybeReadMore read 0\");\n            stream.read(0);\n            if (len === state2.length) break;\n        }\n        state2.readingMore = false;\n    }\n    Readable.prototype._read = function(n) {\n        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n    };\n    Readable.prototype.pipe = function(dest, pipeOpts) {\n        var src = this;\n        var state2 = this._readableState;\n        switch(state2.pipesCount){\n            case 0:\n                state2.pipes = dest;\n                break;\n            case 1:\n                state2.pipes = [\n                    state2.pipes,\n                    dest\n                ];\n                break;\n            default:\n                state2.pipes.push(dest);\n                break;\n        }\n        state2.pipesCount += 1;\n        debug(\"pipe count=%d opts=%j\", state2.pipesCount, pipeOpts);\n        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;\n        var endFn = doEnd ? onend : unpipe;\n        if (state2.endEmitted) process$1.nextTick(endFn);\n        else src.once(\"end\", endFn);\n        dest.on(\"unpipe\", onunpipe);\n        function onunpipe(readable, unpipeInfo) {\n            debug(\"onunpipe\");\n            if (readable === src) {\n                if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n                    unpipeInfo.hasUnpiped = true;\n                    cleanup();\n                }\n            }\n        }\n        function onend() {\n            debug(\"onend\");\n            dest.end();\n        }\n        var ondrain = pipeOnDrain(src);\n        dest.on(\"drain\", ondrain);\n        var cleanedUp = false;\n        function cleanup() {\n            debug(\"cleanup\");\n            dest.removeListener(\"close\", onclose);\n            dest.removeListener(\"finish\", onfinish);\n            dest.removeListener(\"drain\", ondrain);\n            dest.removeListener(\"error\", onerror);\n            dest.removeListener(\"unpipe\", onunpipe);\n            src.removeListener(\"end\", onend);\n            src.removeListener(\"end\", unpipe);\n            src.removeListener(\"data\", ondata);\n            cleanedUp = true;\n            if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n        }\n        src.on(\"data\", ondata);\n        function ondata(chunk) {\n            debug(\"ondata\");\n            var ret = dest.write(chunk);\n            debug(\"dest.write\", ret);\n            if (ret === false) {\n                if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf(state2.pipes, dest) !== -1) && !cleanedUp) {\n                    debug(\"false write response, pause\", state2.awaitDrain);\n                    state2.awaitDrain++;\n                }\n                src.pause();\n            }\n        }\n        function onerror(er) {\n            debug(\"onerror\", er);\n            unpipe();\n            dest.removeListener(\"error\", onerror);\n            if (EElistenerCount(dest, \"error\") === 0) errorOrDestroy(dest, er);\n        }\n        prependListener(dest, \"error\", onerror);\n        function onclose() {\n            dest.removeListener(\"finish\", onfinish);\n            unpipe();\n        }\n        dest.once(\"close\", onclose);\n        function onfinish() {\n            debug(\"onfinish\");\n            dest.removeListener(\"close\", onclose);\n            unpipe();\n        }\n        dest.once(\"finish\", onfinish);\n        function unpipe() {\n            debug(\"unpipe\");\n            src.unpipe(dest);\n        }\n        dest.emit(\"pipe\", src);\n        if (!state2.flowing) {\n            debug(\"pipe resume\");\n            src.resume();\n        }\n        return dest;\n    };\n    function pipeOnDrain(src) {\n        return function pipeOnDrainFunctionResult() {\n            var state2 = src._readableState;\n            debug(\"pipeOnDrain\", state2.awaitDrain);\n            if (state2.awaitDrain) state2.awaitDrain--;\n            if (state2.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n                state2.flowing = true;\n                flow(src);\n            }\n        };\n    }\n    Readable.prototype.unpipe = function(dest) {\n        var state2 = this._readableState;\n        var unpipeInfo = {\n            hasUnpiped: false\n        };\n        if (state2.pipesCount === 0) return this;\n        if (state2.pipesCount === 1) {\n            if (dest && dest !== state2.pipes) return this;\n            if (!dest) dest = state2.pipes;\n            state2.pipes = null;\n            state2.pipesCount = 0;\n            state2.flowing = false;\n            if (dest) dest.emit(\"unpipe\", this, unpipeInfo);\n            return this;\n        }\n        if (!dest) {\n            var dests = state2.pipes;\n            var len = state2.pipesCount;\n            state2.pipes = null;\n            state2.pipesCount = 0;\n            state2.flowing = false;\n            for(var i = 0; i < len; i++){\n                dests[i].emit(\"unpipe\", this, {\n                    hasUnpiped: false\n                });\n            }\n            return this;\n        }\n        var index = indexOf(state2.pipes, dest);\n        if (index === -1) return this;\n        state2.pipes.splice(index, 1);\n        state2.pipesCount -= 1;\n        if (state2.pipesCount === 1) state2.pipes = state2.pipes[0];\n        dest.emit(\"unpipe\", this, unpipeInfo);\n        return this;\n    };\n    Readable.prototype.on = function(ev, fn) {\n        var res = Stream.prototype.on.call(this, ev, fn);\n        var state2 = this._readableState;\n        if (ev === \"data\") {\n            state2.readableListening = this.listenerCount(\"readable\") > 0;\n            if (state2.flowing !== false) this.resume();\n        } else if (ev === \"readable\") {\n            if (!state2.endEmitted && !state2.readableListening) {\n                state2.readableListening = state2.needReadable = true;\n                state2.flowing = false;\n                state2.emittedReadable = false;\n                debug(\"on readable\", state2.length, state2.reading);\n                if (state2.length) {\n                    emitReadable(this);\n                } else if (!state2.reading) {\n                    process$1.nextTick(nReadingNextTick, this);\n                }\n            }\n        }\n        return res;\n    };\n    Readable.prototype.addListener = Readable.prototype.on;\n    Readable.prototype.removeListener = function(ev, fn) {\n        var res = Stream.prototype.removeListener.call(this, ev, fn);\n        if (ev === \"readable\") {\n            process$1.nextTick(updateReadableListening, this);\n        }\n        return res;\n    };\n    Readable.prototype.removeAllListeners = function(ev) {\n        var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n        if (ev === \"readable\" || ev === void 0) {\n            process$1.nextTick(updateReadableListening, this);\n        }\n        return res;\n    };\n    function updateReadableListening(self2) {\n        var state2 = self2._readableState;\n        state2.readableListening = self2.listenerCount(\"readable\") > 0;\n        if (state2.resumeScheduled && !state2.paused) {\n            state2.flowing = true;\n        } else if (self2.listenerCount(\"data\") > 0) {\n            self2.resume();\n        }\n    }\n    function nReadingNextTick(self2) {\n        debug(\"readable nexttick read 0\");\n        self2.read(0);\n    }\n    Readable.prototype.resume = function() {\n        var state2 = this._readableState;\n        if (!state2.flowing) {\n            debug(\"resume\");\n            state2.flowing = !state2.readableListening;\n            resume(this, state2);\n        }\n        state2.paused = false;\n        return this;\n    };\n    function resume(stream, state2) {\n        if (!state2.resumeScheduled) {\n            state2.resumeScheduled = true;\n            process$1.nextTick(resume_, stream, state2);\n        }\n    }\n    function resume_(stream, state2) {\n        debug(\"resume\", state2.reading);\n        if (!state2.reading) {\n            stream.read(0);\n        }\n        state2.resumeScheduled = false;\n        stream.emit(\"resume\");\n        flow(stream);\n        if (state2.flowing && !state2.reading) stream.read(0);\n    }\n    Readable.prototype.pause = function() {\n        debug(\"call pause flowing=%j\", this._readableState.flowing);\n        if (this._readableState.flowing !== false) {\n            debug(\"pause\");\n            this._readableState.flowing = false;\n            this.emit(\"pause\");\n        }\n        this._readableState.paused = true;\n        return this;\n    };\n    function flow(stream) {\n        var state2 = stream._readableState;\n        debug(\"flow\", state2.flowing);\n        while(state2.flowing && stream.read() !== null){}\n    }\n    Readable.prototype.wrap = function(stream) {\n        var _this = this;\n        var state2 = this._readableState;\n        var paused = false;\n        stream.on(\"end\", function() {\n            debug(\"wrapped end\");\n            if (state2.decoder && !state2.ended) {\n                var chunk = state2.decoder.end();\n                if (chunk && chunk.length) _this.push(chunk);\n            }\n            _this.push(null);\n        });\n        stream.on(\"data\", function(chunk) {\n            debug(\"wrapped data\");\n            if (state2.decoder) chunk = state2.decoder.write(chunk);\n            if (state2.objectMode && (chunk === null || chunk === void 0)) return;\n            else if (!state2.objectMode && (!chunk || !chunk.length)) return;\n            var ret = _this.push(chunk);\n            if (!ret) {\n                paused = true;\n                stream.pause();\n            }\n        });\n        for(var i in stream){\n            if (this[i] === void 0 && typeof stream[i] === \"function\") {\n                this[i] = /* @__PURE__ */ function methodWrap(method) {\n                    return function methodWrapReturnFunction() {\n                        return stream[method].apply(stream, arguments);\n                    };\n                }(i);\n            }\n        }\n        for(var n = 0; n < kProxyEvents.length; n++){\n            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n        }\n        this._read = function(n2) {\n            debug(\"wrapped _read\", n2);\n            if (paused) {\n                paused = false;\n                stream.resume();\n            }\n        };\n        return this;\n    };\n    if (typeof Symbol === \"function\") {\n        Readable.prototype[Symbol.asyncIterator] = function() {\n            if (createReadableStreamAsyncIterator === void 0) {\n                createReadableStreamAsyncIterator = requireAsync_iterator();\n            }\n            return createReadableStreamAsyncIterator(this);\n        };\n    }\n    Object.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._readableState.highWaterMark;\n        }\n    });\n    Object.defineProperty(Readable.prototype, \"readableBuffer\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._readableState && this._readableState.buffer;\n        }\n    });\n    Object.defineProperty(Readable.prototype, \"readableFlowing\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._readableState.flowing;\n        },\n        set: function set(state2) {\n            if (this._readableState) {\n                this._readableState.flowing = state2;\n            }\n        }\n    });\n    Readable._fromList = fromList;\n    Object.defineProperty(Readable.prototype, \"readableLength\", {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get2() {\n            return this._readableState.length;\n        }\n    });\n    function fromList(n, state2) {\n        if (state2.length === 0) return null;\n        var ret;\n        if (state2.objectMode) ret = state2.buffer.shift();\n        else if (!n || n >= state2.length) {\n            if (state2.decoder) ret = state2.buffer.join(\"\");\n            else if (state2.buffer.length === 1) ret = state2.buffer.first();\n            else ret = state2.buffer.concat(state2.length);\n            state2.buffer.clear();\n        } else {\n            ret = state2.buffer.consume(n, state2.decoder);\n        }\n        return ret;\n    }\n    function endReadable(stream) {\n        var state2 = stream._readableState;\n        debug(\"endReadable\", state2.endEmitted);\n        if (!state2.endEmitted) {\n            state2.ended = true;\n            process$1.nextTick(endReadableNT, state2, stream);\n        }\n    }\n    function endReadableNT(state2, stream) {\n        debug(\"endReadableNT\", state2.endEmitted, state2.length);\n        if (!state2.endEmitted && state2.length === 0) {\n            state2.endEmitted = true;\n            stream.readable = false;\n            stream.emit(\"end\");\n            if (state2.autoDestroy) {\n                var wState = stream._writableState;\n                if (!wState || wState.autoDestroy && wState.finished) {\n                    stream.destroy();\n                }\n            }\n        }\n    }\n    if (typeof Symbol === \"function\") {\n        Readable.from = function(iterable, opts) {\n            if (from === void 0) {\n                from = requireFromBrowser();\n            }\n            return from(Readable, iterable, opts);\n        };\n    }\n    function indexOf(xs, x) {\n        for(var i = 0, l = xs.length; i < l; i++){\n            if (xs[i] === x) return i;\n        }\n        return -1;\n    }\n    return _stream_readable;\n}\nvar _stream_transform;\nvar hasRequired_stream_transform;\nfunction require_stream_transform() {\n    if (hasRequired_stream_transform) return _stream_transform;\n    hasRequired_stream_transform = 1;\n    _stream_transform = Transform;\n    var _require$codes = requireErrorsBrowser().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n    var Duplex = require_stream_duplex();\n    requireInherits_browser()(Transform, Duplex);\n    function afterTransform(er, data) {\n        var ts = this._transformState;\n        ts.transforming = false;\n        var cb = ts.writecb;\n        if (cb === null) {\n            return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n        }\n        ts.writechunk = null;\n        ts.writecb = null;\n        if (data != null) this.push(data);\n        cb(er);\n        var rs = this._readableState;\n        rs.reading = false;\n        if (rs.needReadable || rs.length < rs.highWaterMark) {\n            this._read(rs.highWaterMark);\n        }\n    }\n    function Transform(options) {\n        if (!(this instanceof Transform)) return new Transform(options);\n        Duplex.call(this, options);\n        this._transformState = {\n            afterTransform: afterTransform.bind(this),\n            needTransform: false,\n            transforming: false,\n            writecb: null,\n            writechunk: null,\n            writeencoding: null\n        };\n        this._readableState.needReadable = true;\n        this._readableState.sync = false;\n        if (options) {\n            if (typeof options.transform === \"function\") this._transform = options.transform;\n            if (typeof options.flush === \"function\") this._flush = options.flush;\n        }\n        this.on(\"prefinish\", prefinish);\n    }\n    function prefinish() {\n        var _this = this;\n        if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n            this._flush(function(er, data) {\n                done(_this, er, data);\n            });\n        } else {\n            done(this, null, null);\n        }\n    }\n    Transform.prototype.push = function(chunk, encoding) {\n        this._transformState.needTransform = false;\n        return Duplex.prototype.push.call(this, chunk, encoding);\n    };\n    Transform.prototype._transform = function(chunk, encoding, cb) {\n        cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n    };\n    Transform.prototype._write = function(chunk, encoding, cb) {\n        var ts = this._transformState;\n        ts.writecb = cb;\n        ts.writechunk = chunk;\n        ts.writeencoding = encoding;\n        if (!ts.transforming) {\n            var rs = this._readableState;\n            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n        }\n    };\n    Transform.prototype._read = function(n) {\n        var ts = this._transformState;\n        if (ts.writechunk !== null && !ts.transforming) {\n            ts.transforming = true;\n            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n        } else {\n            ts.needTransform = true;\n        }\n    };\n    Transform.prototype._destroy = function(err, cb) {\n        Duplex.prototype._destroy.call(this, err, function(err2) {\n            cb(err2);\n        });\n    };\n    function done(stream, er, data) {\n        if (er) return stream.emit(\"error\", er);\n        if (data != null) stream.push(data);\n        if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n        if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n        return stream.push(null);\n    }\n    return _stream_transform;\n}\nvar _stream_passthrough;\nvar hasRequired_stream_passthrough;\nfunction require_stream_passthrough() {\n    if (hasRequired_stream_passthrough) return _stream_passthrough;\n    hasRequired_stream_passthrough = 1;\n    _stream_passthrough = PassThrough;\n    var Transform = require_stream_transform();\n    requireInherits_browser()(PassThrough, Transform);\n    function PassThrough(options) {\n        if (!(this instanceof PassThrough)) return new PassThrough(options);\n        Transform.call(this, options);\n    }\n    PassThrough.prototype._transform = function(chunk, encoding, cb) {\n        cb(null, chunk);\n    };\n    return _stream_passthrough;\n}\nvar pipeline_1;\nvar hasRequiredPipeline;\nfunction requirePipeline() {\n    if (hasRequiredPipeline) return pipeline_1;\n    hasRequiredPipeline = 1;\n    var eos;\n    function once(callback) {\n        var called = false;\n        return function() {\n            if (called) return;\n            called = true;\n            callback.apply(void 0, arguments);\n        };\n    }\n    var _require$codes = requireErrorsBrowser().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    function noop2(err) {\n        if (err) throw err;\n    }\n    function isRequest(stream) {\n        return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function destroyer(stream, reading, writing, callback) {\n        callback = once(callback);\n        var closed = false;\n        stream.on(\"close\", function() {\n            closed = true;\n        });\n        if (eos === void 0) eos = requireEndOfStream();\n        eos(stream, {\n            readable: reading,\n            writable: writing\n        }, function(err) {\n            if (err) return callback(err);\n            closed = true;\n            callback();\n        });\n        var destroyed = false;\n        return function(err) {\n            if (closed) return;\n            if (destroyed) return;\n            destroyed = true;\n            if (isRequest(stream)) return stream.abort();\n            if (typeof stream.destroy === \"function\") return stream.destroy();\n            callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n        };\n    }\n    function call(fn) {\n        fn();\n    }\n    function pipe(from, to) {\n        return from.pipe(to);\n    }\n    function popCallback(streams) {\n        if (!streams.length) return noop2;\n        if (typeof streams[streams.length - 1] !== \"function\") return noop2;\n        return streams.pop();\n    }\n    function pipeline() {\n        for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++){\n            streams[_key] = arguments[_key];\n        }\n        var callback = popCallback(streams);\n        if (Array.isArray(streams[0])) streams = streams[0];\n        if (streams.length < 2) {\n            throw new ERR_MISSING_ARGS(\"streams\");\n        }\n        var error;\n        var destroys = streams.map(function(stream, i) {\n            var reading = i < streams.length - 1;\n            var writing = i > 0;\n            return destroyer(stream, reading, writing, function(err) {\n                if (!error) error = err;\n                if (err) destroys.forEach(call);\n                if (reading) return;\n                destroys.forEach(call);\n                callback(error);\n            });\n        });\n        return streams.reduce(pipe);\n    }\n    pipeline_1 = pipeline;\n    return pipeline_1;\n}\nvar streamBrowserify;\nvar hasRequiredStreamBrowserify;\nfunction requireStreamBrowserify() {\n    if (hasRequiredStreamBrowserify) return streamBrowserify;\n    hasRequiredStreamBrowserify = 1;\n    streamBrowserify = Stream;\n    var EE = requireEvents().EventEmitter;\n    var inherits = requireInherits_browser();\n    inherits(Stream, EE);\n    Stream.Readable = require_stream_readable();\n    Stream.Writable = require_stream_writable();\n    Stream.Duplex = require_stream_duplex();\n    Stream.Transform = require_stream_transform();\n    Stream.PassThrough = require_stream_passthrough();\n    Stream.finished = requireEndOfStream();\n    Stream.pipeline = requirePipeline();\n    Stream.Stream = Stream;\n    function Stream() {\n        EE.call(this);\n    }\n    Stream.prototype.pipe = function(dest, options) {\n        var source = this;\n        function ondata(chunk) {\n            if (dest.writable) {\n                if (false === dest.write(chunk) && source.pause) {\n                    source.pause();\n                }\n            }\n        }\n        source.on(\"data\", ondata);\n        function ondrain() {\n            if (source.readable && source.resume) {\n                source.resume();\n            }\n        }\n        dest.on(\"drain\", ondrain);\n        if (!dest._isStdio && (!options || options.end !== false)) {\n            source.on(\"end\", onend);\n            source.on(\"close\", onclose);\n        }\n        var didOnEnd = false;\n        function onend() {\n            if (didOnEnd) return;\n            didOnEnd = true;\n            dest.end();\n        }\n        function onclose() {\n            if (didOnEnd) return;\n            didOnEnd = true;\n            if (typeof dest.destroy === \"function\") dest.destroy();\n        }\n        function onerror(er) {\n            cleanup();\n            if (EE.listenerCount(this, \"error\") === 0) {\n                throw er;\n            }\n        }\n        source.on(\"error\", onerror);\n        dest.on(\"error\", onerror);\n        function cleanup() {\n            source.removeListener(\"data\", ondata);\n            dest.removeListener(\"drain\", ondrain);\n            source.removeListener(\"end\", onend);\n            source.removeListener(\"close\", onclose);\n            source.removeListener(\"error\", onerror);\n            dest.removeListener(\"error\", onerror);\n            source.removeListener(\"end\", cleanup);\n            source.removeListener(\"close\", cleanup);\n            dest.removeListener(\"close\", cleanup);\n        }\n        source.on(\"end\", cleanup);\n        source.on(\"close\", cleanup);\n        dest.on(\"close\", cleanup);\n        dest.emit(\"pipe\", source);\n        return dest;\n    };\n    return streamBrowserify;\n}\nvar hasRequiredSax;\nfunction requireSax() {\n    if (hasRequiredSax) return sax;\n    hasRequiredSax = 1;\n    (function(exports) {\n        (function(sax2) {\n            sax2.parser = function(strict, opt) {\n                return new SAXParser(strict, opt);\n            };\n            sax2.SAXParser = SAXParser;\n            sax2.SAXStream = SAXStream;\n            sax2.createStream = createStream;\n            sax2.MAX_BUFFER_LENGTH = 64 * 1024;\n            var buffers = [\n                \"comment\",\n                \"sgmlDecl\",\n                \"textNode\",\n                \"tagName\",\n                \"doctype\",\n                \"procInstName\",\n                \"procInstBody\",\n                \"entity\",\n                \"attribName\",\n                \"attribValue\",\n                \"cdata\",\n                \"script\"\n            ];\n            sax2.EVENTS = [\n                \"text\",\n                \"processinginstruction\",\n                \"sgmldeclaration\",\n                \"doctype\",\n                \"comment\",\n                \"opentagstart\",\n                \"attribute\",\n                \"opentag\",\n                \"closetag\",\n                \"opencdata\",\n                \"cdata\",\n                \"closecdata\",\n                \"error\",\n                \"end\",\n                \"ready\",\n                \"script\",\n                \"opennamespace\",\n                \"closenamespace\"\n            ];\n            function SAXParser(strict, opt) {\n                if (!(this instanceof SAXParser)) {\n                    return new SAXParser(strict, opt);\n                }\n                var parser = this;\n                clearBuffers(parser);\n                parser.q = parser.c = \"\";\n                parser.bufferCheckPosition = sax2.MAX_BUFFER_LENGTH;\n                parser.opt = opt || {};\n                parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n                parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n                parser.tags = [];\n                parser.closed = parser.closedRoot = parser.sawRoot = false;\n                parser.tag = parser.error = null;\n                parser.strict = !!strict;\n                parser.noscript = !!(strict || parser.opt.noscript);\n                parser.state = S.BEGIN;\n                parser.strictEntities = parser.opt.strictEntities;\n                parser.ENTITIES = parser.strictEntities ? Object.create(sax2.XML_ENTITIES) : Object.create(sax2.ENTITIES);\n                parser.attribList = [];\n                if (parser.opt.xmlns) {\n                    parser.ns = Object.create(rootNS);\n                }\n                parser.trackPosition = parser.opt.position !== false;\n                if (parser.trackPosition) {\n                    parser.position = parser.line = parser.column = 0;\n                }\n                emit(parser, \"onready\");\n            }\n            if (!Object.create) {\n                Object.create = function(o) {\n                    function F() {}\n                    F.prototype = o;\n                    var newf = new F();\n                    return newf;\n                };\n            }\n            if (!Object.keys) {\n                Object.keys = function(o) {\n                    var a = [];\n                    for(var i in o)if (o.hasOwnProperty(i)) a.push(i);\n                    return a;\n                };\n            }\n            function checkBufferLength(parser) {\n                var maxAllowed = Math.max(sax2.MAX_BUFFER_LENGTH, 10);\n                var maxActual = 0;\n                for(var i = 0, l = buffers.length; i < l; i++){\n                    var len = parser[buffers[i]].length;\n                    if (len > maxAllowed) {\n                        switch(buffers[i]){\n                            case \"textNode\":\n                                closeText(parser);\n                                break;\n                            case \"cdata\":\n                                emitNode(parser, \"oncdata\", parser.cdata);\n                                parser.cdata = \"\";\n                                break;\n                            case \"script\":\n                                emitNode(parser, \"onscript\", parser.script);\n                                parser.script = \"\";\n                                break;\n                            default:\n                                error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n                        }\n                    }\n                    maxActual = Math.max(maxActual, len);\n                }\n                var m = sax2.MAX_BUFFER_LENGTH - maxActual;\n                parser.bufferCheckPosition = m + parser.position;\n            }\n            function clearBuffers(parser) {\n                for(var i = 0, l = buffers.length; i < l; i++){\n                    parser[buffers[i]] = \"\";\n                }\n            }\n            function flushBuffers(parser) {\n                closeText(parser);\n                if (parser.cdata !== \"\") {\n                    emitNode(parser, \"oncdata\", parser.cdata);\n                    parser.cdata = \"\";\n                }\n                if (parser.script !== \"\") {\n                    emitNode(parser, \"onscript\", parser.script);\n                    parser.script = \"\";\n                }\n            }\n            SAXParser.prototype = {\n                end: function() {\n                    end(this);\n                },\n                write,\n                resume: function() {\n                    this.error = null;\n                    return this;\n                },\n                close: function() {\n                    return this.write(null);\n                },\n                flush: function() {\n                    flushBuffers(this);\n                }\n            };\n            var Stream;\n            try {\n                Stream = requireStreamBrowserify().Stream;\n            } catch (ex) {\n                Stream = function() {};\n            }\n            var streamWraps = sax2.EVENTS.filter(function(ev) {\n                return ev !== \"error\" && ev !== \"end\";\n            });\n            function createStream(strict, opt) {\n                return new SAXStream(strict, opt);\n            }\n            function SAXStream(strict, opt) {\n                if (!(this instanceof SAXStream)) {\n                    return new SAXStream(strict, opt);\n                }\n                Stream.apply(this);\n                this._parser = new SAXParser(strict, opt);\n                this.writable = true;\n                this.readable = true;\n                var me = this;\n                this._parser.onend = function() {\n                    me.emit(\"end\");\n                };\n                this._parser.onerror = function(er) {\n                    me.emit(\"error\", er);\n                    me._parser.error = null;\n                };\n                this._decoder = null;\n                streamWraps.forEach(function(ev) {\n                    Object.defineProperty(me, \"on\" + ev, {\n                        get: function() {\n                            return me._parser[\"on\" + ev];\n                        },\n                        set: function(h) {\n                            if (!h) {\n                                me.removeAllListeners(ev);\n                                me._parser[\"on\" + ev] = h;\n                                return h;\n                            }\n                            me.on(ev, h);\n                        },\n                        enumerable: true,\n                        configurable: false\n                    });\n                });\n            }\n            SAXStream.prototype = Object.create(Stream.prototype, {\n                constructor: {\n                    value: SAXStream\n                }\n            });\n            SAXStream.prototype.write = function(data) {\n                if (typeof Buffer === \"function\" && typeof Buffer.isBuffer === \"function\" && Buffer.isBuffer(data)) {\n                    if (!this._decoder) {\n                        var SD = requireString_decoder().StringDecoder;\n                        this._decoder = new SD(\"utf8\");\n                    }\n                    data = this._decoder.write(data);\n                }\n                this._parser.write(data.toString());\n                this.emit(\"data\", data);\n                return true;\n            };\n            SAXStream.prototype.end = function(chunk) {\n                if (chunk && chunk.length) {\n                    this.write(chunk);\n                }\n                this._parser.end();\n                return true;\n            };\n            SAXStream.prototype.on = function(ev, handler) {\n                var me = this;\n                if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n                    me._parser[\"on\" + ev] = function() {\n                        var args = arguments.length === 1 ? [\n                            arguments[0]\n                        ] : Array.apply(null, arguments);\n                        args.splice(0, 0, ev);\n                        me.emit.apply(me, args);\n                    };\n                }\n                return Stream.prototype.on.call(me, ev, handler);\n            };\n            var CDATA = \"[CDATA[\";\n            var DOCTYPE = \"DOCTYPE\";\n            var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n            var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n            var rootNS = {\n                xml: XML_NAMESPACE,\n                xmlns: XMLNS_NAMESPACE\n            };\n            var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n            var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n            var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n            var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n            function isWhitespace(c) {\n                return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\t\";\n            }\n            function isQuote(c) {\n                return c === '\"' || c === \"'\";\n            }\n            function isAttribEnd(c) {\n                return c === \">\" || isWhitespace(c);\n            }\n            function isMatch(regex, c) {\n                return regex.test(c);\n            }\n            function notMatch(regex, c) {\n                return !isMatch(regex, c);\n            }\n            var S = 0;\n            sax2.STATE = {\n                BEGIN: S++,\n                // leading byte order mark or whitespace\n                BEGIN_WHITESPACE: S++,\n                // leading whitespace\n                TEXT: S++,\n                // general stuff\n                TEXT_ENTITY: S++,\n                // &amp and such.\n                OPEN_WAKA: S++,\n                // <\n                SGML_DECL: S++,\n                // <!BLARG\n                SGML_DECL_QUOTED: S++,\n                // <!BLARG foo \"bar\n                DOCTYPE: S++,\n                // <!DOCTYPE\n                DOCTYPE_QUOTED: S++,\n                // <!DOCTYPE \"//blah\n                DOCTYPE_DTD: S++,\n                // <!DOCTYPE \"//blah\" [ ...\n                DOCTYPE_DTD_QUOTED: S++,\n                // <!DOCTYPE \"//blah\" [ \"foo\n                COMMENT_STARTING: S++,\n                // <!-\n                COMMENT: S++,\n                // <!--\n                COMMENT_ENDING: S++,\n                // <!-- blah -\n                COMMENT_ENDED: S++,\n                // <!-- blah --\n                CDATA: S++,\n                // <![CDATA[ something\n                CDATA_ENDING: S++,\n                // ]\n                CDATA_ENDING_2: S++,\n                // ]]\n                PROC_INST: S++,\n                // <?hi\n                PROC_INST_BODY: S++,\n                // <?hi there\n                PROC_INST_ENDING: S++,\n                // <?hi \"there\" ?\n                OPEN_TAG: S++,\n                // <strong\n                OPEN_TAG_SLASH: S++,\n                // <strong /\n                ATTRIB: S++,\n                // <a\n                ATTRIB_NAME: S++,\n                // <a foo\n                ATTRIB_NAME_SAW_WHITE: S++,\n                // <a foo _\n                ATTRIB_VALUE: S++,\n                // <a foo=\n                ATTRIB_VALUE_QUOTED: S++,\n                // <a foo=\"bar\n                ATTRIB_VALUE_CLOSED: S++,\n                // <a foo=\"bar\"\n                ATTRIB_VALUE_UNQUOTED: S++,\n                // <a foo=bar\n                ATTRIB_VALUE_ENTITY_Q: S++,\n                // <foo bar=\"&quot;\"\n                ATTRIB_VALUE_ENTITY_U: S++,\n                // <foo bar=&quot\n                CLOSE_TAG: S++,\n                // </a\n                CLOSE_TAG_SAW_WHITE: S++,\n                // </a   >\n                SCRIPT: S++,\n                // <script> ...\n                SCRIPT_ENDING: S++\n            };\n            sax2.XML_ENTITIES = {\n                \"amp\": \"&\",\n                \"gt\": \">\",\n                \"lt\": \"<\",\n                \"quot\": '\"',\n                \"apos\": \"'\"\n            };\n            sax2.ENTITIES = {\n                \"amp\": \"&\",\n                \"gt\": \">\",\n                \"lt\": \"<\",\n                \"quot\": '\"',\n                \"apos\": \"'\",\n                \"AElig\": 198,\n                \"Aacute\": 193,\n                \"Acirc\": 194,\n                \"Agrave\": 192,\n                \"Aring\": 197,\n                \"Atilde\": 195,\n                \"Auml\": 196,\n                \"Ccedil\": 199,\n                \"ETH\": 208,\n                \"Eacute\": 201,\n                \"Ecirc\": 202,\n                \"Egrave\": 200,\n                \"Euml\": 203,\n                \"Iacute\": 205,\n                \"Icirc\": 206,\n                \"Igrave\": 204,\n                \"Iuml\": 207,\n                \"Ntilde\": 209,\n                \"Oacute\": 211,\n                \"Ocirc\": 212,\n                \"Ograve\": 210,\n                \"Oslash\": 216,\n                \"Otilde\": 213,\n                \"Ouml\": 214,\n                \"THORN\": 222,\n                \"Uacute\": 218,\n                \"Ucirc\": 219,\n                \"Ugrave\": 217,\n                \"Uuml\": 220,\n                \"Yacute\": 221,\n                \"aacute\": 225,\n                \"acirc\": 226,\n                \"aelig\": 230,\n                \"agrave\": 224,\n                \"aring\": 229,\n                \"atilde\": 227,\n                \"auml\": 228,\n                \"ccedil\": 231,\n                \"eacute\": 233,\n                \"ecirc\": 234,\n                \"egrave\": 232,\n                \"eth\": 240,\n                \"euml\": 235,\n                \"iacute\": 237,\n                \"icirc\": 238,\n                \"igrave\": 236,\n                \"iuml\": 239,\n                \"ntilde\": 241,\n                \"oacute\": 243,\n                \"ocirc\": 244,\n                \"ograve\": 242,\n                \"oslash\": 248,\n                \"otilde\": 245,\n                \"ouml\": 246,\n                \"szlig\": 223,\n                \"thorn\": 254,\n                \"uacute\": 250,\n                \"ucirc\": 251,\n                \"ugrave\": 249,\n                \"uuml\": 252,\n                \"yacute\": 253,\n                \"yuml\": 255,\n                \"copy\": 169,\n                \"reg\": 174,\n                \"nbsp\": 160,\n                \"iexcl\": 161,\n                \"cent\": 162,\n                \"pound\": 163,\n                \"curren\": 164,\n                \"yen\": 165,\n                \"brvbar\": 166,\n                \"sect\": 167,\n                \"uml\": 168,\n                \"ordf\": 170,\n                \"laquo\": 171,\n                \"not\": 172,\n                \"shy\": 173,\n                \"macr\": 175,\n                \"deg\": 176,\n                \"plusmn\": 177,\n                \"sup1\": 185,\n                \"sup2\": 178,\n                \"sup3\": 179,\n                \"acute\": 180,\n                \"micro\": 181,\n                \"para\": 182,\n                \"middot\": 183,\n                \"cedil\": 184,\n                \"ordm\": 186,\n                \"raquo\": 187,\n                \"frac14\": 188,\n                \"frac12\": 189,\n                \"frac34\": 190,\n                \"iquest\": 191,\n                \"times\": 215,\n                \"divide\": 247,\n                \"OElig\": 338,\n                \"oelig\": 339,\n                \"Scaron\": 352,\n                \"scaron\": 353,\n                \"Yuml\": 376,\n                \"fnof\": 402,\n                \"circ\": 710,\n                \"tilde\": 732,\n                \"Alpha\": 913,\n                \"Beta\": 914,\n                \"Gamma\": 915,\n                \"Delta\": 916,\n                \"Epsilon\": 917,\n                \"Zeta\": 918,\n                \"Eta\": 919,\n                \"Theta\": 920,\n                \"Iota\": 921,\n                \"Kappa\": 922,\n                \"Lambda\": 923,\n                \"Mu\": 924,\n                \"Nu\": 925,\n                \"Xi\": 926,\n                \"Omicron\": 927,\n                \"Pi\": 928,\n                \"Rho\": 929,\n                \"Sigma\": 931,\n                \"Tau\": 932,\n                \"Upsilon\": 933,\n                \"Phi\": 934,\n                \"Chi\": 935,\n                \"Psi\": 936,\n                \"Omega\": 937,\n                \"alpha\": 945,\n                \"beta\": 946,\n                \"gamma\": 947,\n                \"delta\": 948,\n                \"epsilon\": 949,\n                \"zeta\": 950,\n                \"eta\": 951,\n                \"theta\": 952,\n                \"iota\": 953,\n                \"kappa\": 954,\n                \"lambda\": 955,\n                \"mu\": 956,\n                \"nu\": 957,\n                \"xi\": 958,\n                \"omicron\": 959,\n                \"pi\": 960,\n                \"rho\": 961,\n                \"sigmaf\": 962,\n                \"sigma\": 963,\n                \"tau\": 964,\n                \"upsilon\": 965,\n                \"phi\": 966,\n                \"chi\": 967,\n                \"psi\": 968,\n                \"omega\": 969,\n                \"thetasym\": 977,\n                \"upsih\": 978,\n                \"piv\": 982,\n                \"ensp\": 8194,\n                \"emsp\": 8195,\n                \"thinsp\": 8201,\n                \"zwnj\": 8204,\n                \"zwj\": 8205,\n                \"lrm\": 8206,\n                \"rlm\": 8207,\n                \"ndash\": 8211,\n                \"mdash\": 8212,\n                \"lsquo\": 8216,\n                \"rsquo\": 8217,\n                \"sbquo\": 8218,\n                \"ldquo\": 8220,\n                \"rdquo\": 8221,\n                \"bdquo\": 8222,\n                \"dagger\": 8224,\n                \"Dagger\": 8225,\n                \"bull\": 8226,\n                \"hellip\": 8230,\n                \"permil\": 8240,\n                \"prime\": 8242,\n                \"Prime\": 8243,\n                \"lsaquo\": 8249,\n                \"rsaquo\": 8250,\n                \"oline\": 8254,\n                \"frasl\": 8260,\n                \"euro\": 8364,\n                \"image\": 8465,\n                \"weierp\": 8472,\n                \"real\": 8476,\n                \"trade\": 8482,\n                \"alefsym\": 8501,\n                \"larr\": 8592,\n                \"uarr\": 8593,\n                \"rarr\": 8594,\n                \"darr\": 8595,\n                \"harr\": 8596,\n                \"crarr\": 8629,\n                \"lArr\": 8656,\n                \"uArr\": 8657,\n                \"rArr\": 8658,\n                \"dArr\": 8659,\n                \"hArr\": 8660,\n                \"forall\": 8704,\n                \"part\": 8706,\n                \"exist\": 8707,\n                \"empty\": 8709,\n                \"nabla\": 8711,\n                \"isin\": 8712,\n                \"notin\": 8713,\n                \"ni\": 8715,\n                \"prod\": 8719,\n                \"sum\": 8721,\n                \"minus\": 8722,\n                \"lowast\": 8727,\n                \"radic\": 8730,\n                \"prop\": 8733,\n                \"infin\": 8734,\n                \"ang\": 8736,\n                \"and\": 8743,\n                \"or\": 8744,\n                \"cap\": 8745,\n                \"cup\": 8746,\n                \"int\": 8747,\n                \"there4\": 8756,\n                \"sim\": 8764,\n                \"cong\": 8773,\n                \"asymp\": 8776,\n                \"ne\": 8800,\n                \"equiv\": 8801,\n                \"le\": 8804,\n                \"ge\": 8805,\n                \"sub\": 8834,\n                \"sup\": 8835,\n                \"nsub\": 8836,\n                \"sube\": 8838,\n                \"supe\": 8839,\n                \"oplus\": 8853,\n                \"otimes\": 8855,\n                \"perp\": 8869,\n                \"sdot\": 8901,\n                \"lceil\": 8968,\n                \"rceil\": 8969,\n                \"lfloor\": 8970,\n                \"rfloor\": 8971,\n                \"lang\": 9001,\n                \"rang\": 9002,\n                \"loz\": 9674,\n                \"spades\": 9824,\n                \"clubs\": 9827,\n                \"hearts\": 9829,\n                \"diams\": 9830\n            };\n            Object.keys(sax2.ENTITIES).forEach(function(key) {\n                var e = sax2.ENTITIES[key];\n                var s2 = typeof e === \"number\" ? String.fromCharCode(e) : e;\n                sax2.ENTITIES[key] = s2;\n            });\n            for(var s in sax2.STATE){\n                sax2.STATE[sax2.STATE[s]] = s;\n            }\n            S = sax2.STATE;\n            function emit(parser, event, data) {\n                parser[event] && parser[event](data);\n            }\n            function emitNode(parser, nodeType, data) {\n                if (parser.textNode) closeText(parser);\n                emit(parser, nodeType, data);\n            }\n            function closeText(parser) {\n                parser.textNode = textopts(parser.opt, parser.textNode);\n                if (parser.textNode) emit(parser, \"ontext\", parser.textNode);\n                parser.textNode = \"\";\n            }\n            function textopts(opt, text) {\n                if (opt.trim) text = text.trim();\n                if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n                return text;\n            }\n            function error(parser, er) {\n                closeText(parser);\n                if (parser.trackPosition) {\n                    er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n                }\n                er = new Error(er);\n                parser.error = er;\n                emit(parser, \"onerror\", er);\n                return parser;\n            }\n            function end(parser) {\n                if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n                if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n                    error(parser, \"Unexpected end\");\n                }\n                closeText(parser);\n                parser.c = \"\";\n                parser.closed = true;\n                emit(parser, \"onend\");\n                SAXParser.call(parser, parser.strict, parser.opt);\n                return parser;\n            }\n            function strictFail(parser, message) {\n                if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n                    throw new Error(\"bad call to strictFail\");\n                }\n                if (parser.strict) {\n                    error(parser, message);\n                }\n            }\n            function newTag(parser) {\n                if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n                var parent = parser.tags[parser.tags.length - 1] || parser;\n                var tag = parser.tag = {\n                    name: parser.tagName,\n                    attributes: {}\n                };\n                if (parser.opt.xmlns) {\n                    tag.ns = parent.ns;\n                }\n                parser.attribList.length = 0;\n                emitNode(parser, \"onopentagstart\", tag);\n            }\n            function qname(name, attribute) {\n                var i = name.indexOf(\":\");\n                var qualName = i < 0 ? [\n                    \"\",\n                    name\n                ] : name.split(\":\");\n                var prefix = qualName[0];\n                var local = qualName[1];\n                if (attribute && name === \"xmlns\") {\n                    prefix = \"xmlns\";\n                    local = \"\";\n                }\n                return {\n                    prefix,\n                    local\n                };\n            }\n            function attrib(parser) {\n                if (!parser.strict) {\n                    parser.attribName = parser.attribName[parser.looseCase]();\n                }\n                if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n                    parser.attribName = parser.attribValue = \"\";\n                    return;\n                }\n                if (parser.opt.xmlns) {\n                    var qn = qname(parser.attribName, true);\n                    var prefix = qn.prefix;\n                    var local = qn.local;\n                    if (prefix === \"xmlns\") {\n                        if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n                            strictFail(parser, \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\nActual: \" + parser.attribValue);\n                        } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n                            strictFail(parser, \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\nActual: \" + parser.attribValue);\n                        } else {\n                            var tag = parser.tag;\n                            var parent = parser.tags[parser.tags.length - 1] || parser;\n                            if (tag.ns === parent.ns) {\n                                tag.ns = Object.create(parent.ns);\n                            }\n                            tag.ns[local] = parser.attribValue;\n                        }\n                    }\n                    parser.attribList.push([\n                        parser.attribName,\n                        parser.attribValue\n                    ]);\n                } else {\n                    parser.tag.attributes[parser.attribName] = parser.attribValue;\n                    emitNode(parser, \"onattribute\", {\n                        name: parser.attribName,\n                        value: parser.attribValue\n                    });\n                }\n                parser.attribName = parser.attribValue = \"\";\n            }\n            function openTag(parser, selfClosing) {\n                if (parser.opt.xmlns) {\n                    var tag = parser.tag;\n                    var qn = qname(parser.tagName);\n                    tag.prefix = qn.prefix;\n                    tag.local = qn.local;\n                    tag.uri = tag.ns[qn.prefix] || \"\";\n                    if (tag.prefix && !tag.uri) {\n                        strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n                        tag.uri = qn.prefix;\n                    }\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (tag.ns && parent.ns !== tag.ns) {\n                        Object.keys(tag.ns).forEach(function(p) {\n                            emitNode(parser, \"onopennamespace\", {\n                                prefix: p,\n                                uri: tag.ns[p]\n                            });\n                        });\n                    }\n                    for(var i = 0, l = parser.attribList.length; i < l; i++){\n                        var nv = parser.attribList[i];\n                        var name = nv[0];\n                        var value = nv[1];\n                        var qualName = qname(name, true);\n                        var prefix = qualName.prefix;\n                        var local = qualName.local;\n                        var uri2 = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n                        var a = {\n                            name,\n                            value,\n                            prefix,\n                            local,\n                            uri: uri2\n                        };\n                        if (prefix && prefix !== \"xmlns\" && !uri2) {\n                            strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n                            a.uri = prefix;\n                        }\n                        parser.tag.attributes[name] = a;\n                        emitNode(parser, \"onattribute\", a);\n                    }\n                    parser.attribList.length = 0;\n                }\n                parser.tag.isSelfClosing = !!selfClosing;\n                parser.sawRoot = true;\n                parser.tags.push(parser.tag);\n                emitNode(parser, \"onopentag\", parser.tag);\n                if (!selfClosing) {\n                    if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n                        parser.state = S.SCRIPT;\n                    } else {\n                        parser.state = S.TEXT;\n                    }\n                    parser.tag = null;\n                    parser.tagName = \"\";\n                }\n                parser.attribName = parser.attribValue = \"\";\n                parser.attribList.length = 0;\n            }\n            function closeTag(parser) {\n                if (!parser.tagName) {\n                    strictFail(parser, \"Weird empty close tag.\");\n                    parser.textNode += \"</>\";\n                    parser.state = S.TEXT;\n                    return;\n                }\n                if (parser.script) {\n                    if (parser.tagName !== \"script\") {\n                        parser.script += \"</\" + parser.tagName + \">\";\n                        parser.tagName = \"\";\n                        parser.state = S.SCRIPT;\n                        return;\n                    }\n                    emitNode(parser, \"onscript\", parser.script);\n                    parser.script = \"\";\n                }\n                var t = parser.tags.length;\n                var tagName = parser.tagName;\n                if (!parser.strict) {\n                    tagName = tagName[parser.looseCase]();\n                }\n                var closeTo = tagName;\n                while(t--){\n                    var close = parser.tags[t];\n                    if (close.name !== closeTo) {\n                        strictFail(parser, \"Unexpected close tag\");\n                    } else {\n                        break;\n                    }\n                }\n                if (t < 0) {\n                    strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n                    parser.textNode += \"</\" + parser.tagName + \">\";\n                    parser.state = S.TEXT;\n                    return;\n                }\n                parser.tagName = tagName;\n                var s2 = parser.tags.length;\n                while(s2-- > t){\n                    var tag = parser.tag = parser.tags.pop();\n                    parser.tagName = parser.tag.name;\n                    emitNode(parser, \"onclosetag\", parser.tagName);\n                    var x = {};\n                    for(var i in tag.ns){\n                        x[i] = tag.ns[i];\n                    }\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (parser.opt.xmlns && tag.ns !== parent.ns) {\n                        Object.keys(tag.ns).forEach(function(p) {\n                            var n = tag.ns[p];\n                            emitNode(parser, \"onclosenamespace\", {\n                                prefix: p,\n                                uri: n\n                            });\n                        });\n                    }\n                }\n                if (t === 0) parser.closedRoot = true;\n                parser.tagName = parser.attribValue = parser.attribName = \"\";\n                parser.attribList.length = 0;\n                parser.state = S.TEXT;\n            }\n            function parseEntity(parser) {\n                var entity = parser.entity;\n                var entityLC = entity.toLowerCase();\n                var num;\n                var numStr = \"\";\n                if (parser.ENTITIES[entity]) {\n                    return parser.ENTITIES[entity];\n                }\n                if (parser.ENTITIES[entityLC]) {\n                    return parser.ENTITIES[entityLC];\n                }\n                entity = entityLC;\n                if (entity.charAt(0) === \"#\") {\n                    if (entity.charAt(1) === \"x\") {\n                        entity = entity.slice(2);\n                        num = parseInt(entity, 16);\n                        numStr = num.toString(16);\n                    } else {\n                        entity = entity.slice(1);\n                        num = parseInt(entity, 10);\n                        numStr = num.toString(10);\n                    }\n                }\n                entity = entity.replace(/^0+/, \"\");\n                if (isNaN(num) || numStr.toLowerCase() !== entity) {\n                    strictFail(parser, \"Invalid character entity\");\n                    return \"&\" + parser.entity + \";\";\n                }\n                return String.fromCodePoint(num);\n            }\n            function beginWhiteSpace(parser, c) {\n                if (c === \"<\") {\n                    parser.state = S.OPEN_WAKA;\n                    parser.startTagPosition = parser.position;\n                } else if (!isWhitespace(c)) {\n                    strictFail(parser, \"Non-whitespace before first tag.\");\n                    parser.textNode = c;\n                    parser.state = S.TEXT;\n                }\n            }\n            function charAt(chunk, i) {\n                var result = \"\";\n                if (i < chunk.length) {\n                    result = chunk.charAt(i);\n                }\n                return result;\n            }\n            function write(chunk) {\n                var parser = this;\n                if (this.error) {\n                    throw this.error;\n                }\n                if (parser.closed) {\n                    return error(parser, \"Cannot write after close. Assign an onready handler.\");\n                }\n                if (chunk === null) {\n                    return end(parser);\n                }\n                if (typeof chunk === \"object\") {\n                    chunk = chunk.toString();\n                }\n                var i = 0;\n                var c = \"\";\n                while(true){\n                    c = charAt(chunk, i++);\n                    parser.c = c;\n                    if (!c) {\n                        break;\n                    }\n                    if (parser.trackPosition) {\n                        parser.position++;\n                        if (c === \"\\n\") {\n                            parser.line++;\n                            parser.column = 0;\n                        } else {\n                            parser.column++;\n                        }\n                    }\n                    switch(parser.state){\n                        case S.BEGIN:\n                            parser.state = S.BEGIN_WHITESPACE;\n                            if (c === \"\\uFEFF\") {\n                                continue;\n                            }\n                            beginWhiteSpace(parser, c);\n                            continue;\n                        case S.BEGIN_WHITESPACE:\n                            beginWhiteSpace(parser, c);\n                            continue;\n                        case S.TEXT:\n                            if (parser.sawRoot && !parser.closedRoot) {\n                                var starti = i - 1;\n                                while(c && c !== \"<\" && c !== \"&\"){\n                                    c = charAt(chunk, i++);\n                                    if (c && parser.trackPosition) {\n                                        parser.position++;\n                                        if (c === \"\\n\") {\n                                            parser.line++;\n                                            parser.column = 0;\n                                        } else {\n                                            parser.column++;\n                                        }\n                                    }\n                                }\n                                parser.textNode += chunk.substring(starti, i - 1);\n                            }\n                            if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n                                parser.state = S.OPEN_WAKA;\n                                parser.startTagPosition = parser.position;\n                            } else {\n                                if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                                    strictFail(parser, \"Text data outside of root node.\");\n                                }\n                                if (c === \"&\") {\n                                    parser.state = S.TEXT_ENTITY;\n                                } else {\n                                    parser.textNode += c;\n                                }\n                            }\n                            continue;\n                        case S.SCRIPT:\n                            if (c === \"<\") {\n                                parser.state = S.SCRIPT_ENDING;\n                            } else {\n                                parser.script += c;\n                            }\n                            continue;\n                        case S.SCRIPT_ENDING:\n                            if (c === \"/\") {\n                                parser.state = S.CLOSE_TAG;\n                            } else {\n                                parser.script += \"<\" + c;\n                                parser.state = S.SCRIPT;\n                            }\n                            continue;\n                        case S.OPEN_WAKA:\n                            if (c === \"!\") {\n                                parser.state = S.SGML_DECL;\n                                parser.sgmlDecl = \"\";\n                            } else if (isWhitespace(c)) ;\n                            else if (isMatch(nameStart, c)) {\n                                parser.state = S.OPEN_TAG;\n                                parser.tagName = c;\n                            } else if (c === \"/\") {\n                                parser.state = S.CLOSE_TAG;\n                                parser.tagName = \"\";\n                            } else if (c === \"?\") {\n                                parser.state = S.PROC_INST;\n                                parser.procInstName = parser.procInstBody = \"\";\n                            } else {\n                                strictFail(parser, \"Unencoded <\");\n                                if (parser.startTagPosition + 1 < parser.position) {\n                                    var pad = parser.position - parser.startTagPosition;\n                                    c = new Array(pad).join(\" \") + c;\n                                }\n                                parser.textNode += \"<\" + c;\n                                parser.state = S.TEXT;\n                            }\n                            continue;\n                        case S.SGML_DECL:\n                            if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n                                emitNode(parser, \"onopencdata\");\n                                parser.state = S.CDATA;\n                                parser.sgmlDecl = \"\";\n                                parser.cdata = \"\";\n                            } else if (parser.sgmlDecl + c === \"--\") {\n                                parser.state = S.COMMENT;\n                                parser.comment = \"\";\n                                parser.sgmlDecl = \"\";\n                            } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n                                parser.state = S.DOCTYPE;\n                                if (parser.doctype || parser.sawRoot) {\n                                    strictFail(parser, \"Inappropriately located doctype declaration\");\n                                }\n                                parser.doctype = \"\";\n                                parser.sgmlDecl = \"\";\n                            } else if (c === \">\") {\n                                emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n                                parser.sgmlDecl = \"\";\n                                parser.state = S.TEXT;\n                            } else if (isQuote(c)) {\n                                parser.state = S.SGML_DECL_QUOTED;\n                                parser.sgmlDecl += c;\n                            } else {\n                                parser.sgmlDecl += c;\n                            }\n                            continue;\n                        case S.SGML_DECL_QUOTED:\n                            if (c === parser.q) {\n                                parser.state = S.SGML_DECL;\n                                parser.q = \"\";\n                            }\n                            parser.sgmlDecl += c;\n                            continue;\n                        case S.DOCTYPE:\n                            if (c === \">\") {\n                                parser.state = S.TEXT;\n                                emitNode(parser, \"ondoctype\", parser.doctype);\n                                parser.doctype = true;\n                            } else {\n                                parser.doctype += c;\n                                if (c === \"[\") {\n                                    parser.state = S.DOCTYPE_DTD;\n                                } else if (isQuote(c)) {\n                                    parser.state = S.DOCTYPE_QUOTED;\n                                    parser.q = c;\n                                }\n                            }\n                            continue;\n                        case S.DOCTYPE_QUOTED:\n                            parser.doctype += c;\n                            if (c === parser.q) {\n                                parser.q = \"\";\n                                parser.state = S.DOCTYPE;\n                            }\n                            continue;\n                        case S.DOCTYPE_DTD:\n                            parser.doctype += c;\n                            if (c === \"]\") {\n                                parser.state = S.DOCTYPE;\n                            } else if (isQuote(c)) {\n                                parser.state = S.DOCTYPE_DTD_QUOTED;\n                                parser.q = c;\n                            }\n                            continue;\n                        case S.DOCTYPE_DTD_QUOTED:\n                            parser.doctype += c;\n                            if (c === parser.q) {\n                                parser.state = S.DOCTYPE_DTD;\n                                parser.q = \"\";\n                            }\n                            continue;\n                        case S.COMMENT:\n                            if (c === \"-\") {\n                                parser.state = S.COMMENT_ENDING;\n                            } else {\n                                parser.comment += c;\n                            }\n                            continue;\n                        case S.COMMENT_ENDING:\n                            if (c === \"-\") {\n                                parser.state = S.COMMENT_ENDED;\n                                parser.comment = textopts(parser.opt, parser.comment);\n                                if (parser.comment) {\n                                    emitNode(parser, \"oncomment\", parser.comment);\n                                }\n                                parser.comment = \"\";\n                            } else {\n                                parser.comment += \"-\" + c;\n                                parser.state = S.COMMENT;\n                            }\n                            continue;\n                        case S.COMMENT_ENDED:\n                            if (c !== \">\") {\n                                strictFail(parser, \"Malformed comment\");\n                                parser.comment += \"--\" + c;\n                                parser.state = S.COMMENT;\n                            } else {\n                                parser.state = S.TEXT;\n                            }\n                            continue;\n                        case S.CDATA:\n                            if (c === \"]\") {\n                                parser.state = S.CDATA_ENDING;\n                            } else {\n                                parser.cdata += c;\n                            }\n                            continue;\n                        case S.CDATA_ENDING:\n                            if (c === \"]\") {\n                                parser.state = S.CDATA_ENDING_2;\n                            } else {\n                                parser.cdata += \"]\" + c;\n                                parser.state = S.CDATA;\n                            }\n                            continue;\n                        case S.CDATA_ENDING_2:\n                            if (c === \">\") {\n                                if (parser.cdata) {\n                                    emitNode(parser, \"oncdata\", parser.cdata);\n                                }\n                                emitNode(parser, \"onclosecdata\");\n                                parser.cdata = \"\";\n                                parser.state = S.TEXT;\n                            } else if (c === \"]\") {\n                                parser.cdata += \"]\";\n                            } else {\n                                parser.cdata += \"]]\" + c;\n                                parser.state = S.CDATA;\n                            }\n                            continue;\n                        case S.PROC_INST:\n                            if (c === \"?\") {\n                                parser.state = S.PROC_INST_ENDING;\n                            } else if (isWhitespace(c)) {\n                                parser.state = S.PROC_INST_BODY;\n                            } else {\n                                parser.procInstName += c;\n                            }\n                            continue;\n                        case S.PROC_INST_BODY:\n                            if (!parser.procInstBody && isWhitespace(c)) {\n                                continue;\n                            } else if (c === \"?\") {\n                                parser.state = S.PROC_INST_ENDING;\n                            } else {\n                                parser.procInstBody += c;\n                            }\n                            continue;\n                        case S.PROC_INST_ENDING:\n                            if (c === \">\") {\n                                emitNode(parser, \"onprocessinginstruction\", {\n                                    name: parser.procInstName,\n                                    body: parser.procInstBody\n                                });\n                                parser.procInstName = parser.procInstBody = \"\";\n                                parser.state = S.TEXT;\n                            } else {\n                                parser.procInstBody += \"?\" + c;\n                                parser.state = S.PROC_INST_BODY;\n                            }\n                            continue;\n                        case S.OPEN_TAG:\n                            if (isMatch(nameBody, c)) {\n                                parser.tagName += c;\n                            } else {\n                                newTag(parser);\n                                if (c === \">\") {\n                                    openTag(parser);\n                                } else if (c === \"/\") {\n                                    parser.state = S.OPEN_TAG_SLASH;\n                                } else {\n                                    if (!isWhitespace(c)) {\n                                        strictFail(parser, \"Invalid character in tag name\");\n                                    }\n                                    parser.state = S.ATTRIB;\n                                }\n                            }\n                            continue;\n                        case S.OPEN_TAG_SLASH:\n                            if (c === \">\") {\n                                openTag(parser, true);\n                                closeTag(parser);\n                            } else {\n                                strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n                                parser.state = S.ATTRIB;\n                            }\n                            continue;\n                        case S.ATTRIB:\n                            if (isWhitespace(c)) {\n                                continue;\n                            } else if (c === \">\") {\n                                openTag(parser);\n                            } else if (c === \"/\") {\n                                parser.state = S.OPEN_TAG_SLASH;\n                            } else if (isMatch(nameStart, c)) {\n                                parser.attribName = c;\n                                parser.attribValue = \"\";\n                                parser.state = S.ATTRIB_NAME;\n                            } else {\n                                strictFail(parser, \"Invalid attribute name\");\n                            }\n                            continue;\n                        case S.ATTRIB_NAME:\n                            if (c === \"=\") {\n                                parser.state = S.ATTRIB_VALUE;\n                            } else if (c === \">\") {\n                                strictFail(parser, \"Attribute without value\");\n                                parser.attribValue = parser.attribName;\n                                attrib(parser);\n                                openTag(parser);\n                            } else if (isWhitespace(c)) {\n                                parser.state = S.ATTRIB_NAME_SAW_WHITE;\n                            } else if (isMatch(nameBody, c)) {\n                                parser.attribName += c;\n                            } else {\n                                strictFail(parser, \"Invalid attribute name\");\n                            }\n                            continue;\n                        case S.ATTRIB_NAME_SAW_WHITE:\n                            if (c === \"=\") {\n                                parser.state = S.ATTRIB_VALUE;\n                            } else if (isWhitespace(c)) {\n                                continue;\n                            } else {\n                                strictFail(parser, \"Attribute without value\");\n                                parser.tag.attributes[parser.attribName] = \"\";\n                                parser.attribValue = \"\";\n                                emitNode(parser, \"onattribute\", {\n                                    name: parser.attribName,\n                                    value: \"\"\n                                });\n                                parser.attribName = \"\";\n                                if (c === \">\") {\n                                    openTag(parser);\n                                } else if (isMatch(nameStart, c)) {\n                                    parser.attribName = c;\n                                    parser.state = S.ATTRIB_NAME;\n                                } else {\n                                    strictFail(parser, \"Invalid attribute name\");\n                                    parser.state = S.ATTRIB;\n                                }\n                            }\n                            continue;\n                        case S.ATTRIB_VALUE:\n                            if (isWhitespace(c)) {\n                                continue;\n                            } else if (isQuote(c)) {\n                                parser.q = c;\n                                parser.state = S.ATTRIB_VALUE_QUOTED;\n                            } else {\n                                strictFail(parser, \"Unquoted attribute value\");\n                                parser.state = S.ATTRIB_VALUE_UNQUOTED;\n                                parser.attribValue = c;\n                            }\n                            continue;\n                        case S.ATTRIB_VALUE_QUOTED:\n                            if (c !== parser.q) {\n                                if (c === \"&\") {\n                                    parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n                                } else {\n                                    parser.attribValue += c;\n                                }\n                                continue;\n                            }\n                            attrib(parser);\n                            parser.q = \"\";\n                            parser.state = S.ATTRIB_VALUE_CLOSED;\n                            continue;\n                        case S.ATTRIB_VALUE_CLOSED:\n                            if (isWhitespace(c)) {\n                                parser.state = S.ATTRIB;\n                            } else if (c === \">\") {\n                                openTag(parser);\n                            } else if (c === \"/\") {\n                                parser.state = S.OPEN_TAG_SLASH;\n                            } else if (isMatch(nameStart, c)) {\n                                strictFail(parser, \"No whitespace between attributes\");\n                                parser.attribName = c;\n                                parser.attribValue = \"\";\n                                parser.state = S.ATTRIB_NAME;\n                            } else {\n                                strictFail(parser, \"Invalid attribute name\");\n                            }\n                            continue;\n                        case S.ATTRIB_VALUE_UNQUOTED:\n                            if (!isAttribEnd(c)) {\n                                if (c === \"&\") {\n                                    parser.state = S.ATTRIB_VALUE_ENTITY_U;\n                                } else {\n                                    parser.attribValue += c;\n                                }\n                                continue;\n                            }\n                            attrib(parser);\n                            if (c === \">\") {\n                                openTag(parser);\n                            } else {\n                                parser.state = S.ATTRIB;\n                            }\n                            continue;\n                        case S.CLOSE_TAG:\n                            if (!parser.tagName) {\n                                if (isWhitespace(c)) {\n                                    continue;\n                                } else if (notMatch(nameStart, c)) {\n                                    if (parser.script) {\n                                        parser.script += \"</\" + c;\n                                        parser.state = S.SCRIPT;\n                                    } else {\n                                        strictFail(parser, \"Invalid tagname in closing tag.\");\n                                    }\n                                } else {\n                                    parser.tagName = c;\n                                }\n                            } else if (c === \">\") {\n                                closeTag(parser);\n                            } else if (isMatch(nameBody, c)) {\n                                parser.tagName += c;\n                            } else if (parser.script) {\n                                parser.script += \"</\" + parser.tagName;\n                                parser.tagName = \"\";\n                                parser.state = S.SCRIPT;\n                            } else {\n                                if (!isWhitespace(c)) {\n                                    strictFail(parser, \"Invalid tagname in closing tag\");\n                                }\n                                parser.state = S.CLOSE_TAG_SAW_WHITE;\n                            }\n                            continue;\n                        case S.CLOSE_TAG_SAW_WHITE:\n                            if (isWhitespace(c)) {\n                                continue;\n                            }\n                            if (c === \">\") {\n                                closeTag(parser);\n                            } else {\n                                strictFail(parser, \"Invalid characters in closing tag\");\n                            }\n                            continue;\n                        case S.TEXT_ENTITY:\n                        case S.ATTRIB_VALUE_ENTITY_Q:\n                        case S.ATTRIB_VALUE_ENTITY_U:\n                            var returnState;\n                            var buffer2;\n                            switch(parser.state){\n                                case S.TEXT_ENTITY:\n                                    returnState = S.TEXT;\n                                    buffer2 = \"textNode\";\n                                    break;\n                                case S.ATTRIB_VALUE_ENTITY_Q:\n                                    returnState = S.ATTRIB_VALUE_QUOTED;\n                                    buffer2 = \"attribValue\";\n                                    break;\n                                case S.ATTRIB_VALUE_ENTITY_U:\n                                    returnState = S.ATTRIB_VALUE_UNQUOTED;\n                                    buffer2 = \"attribValue\";\n                                    break;\n                            }\n                            if (c === \";\") {\n                                parser[buffer2] += parseEntity(parser);\n                                parser.entity = \"\";\n                                parser.state = returnState;\n                            } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n                                parser.entity += c;\n                            } else {\n                                strictFail(parser, \"Invalid character in entity name\");\n                                parser[buffer2] += \"&\" + parser.entity + c;\n                                parser.entity = \"\";\n                                parser.state = returnState;\n                            }\n                            continue;\n                        default:\n                            throw new Error(parser, \"Unknown state: \" + parser.state);\n                    }\n                }\n                if (parser.position >= parser.bufferCheckPosition) {\n                    checkBufferLength(parser);\n                }\n                return parser;\n            }\n            /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */ if (!String.fromCodePoint) {\n                (function() {\n                    var stringFromCharCode = String.fromCharCode;\n                    var floor2 = Math.floor;\n                    var fromCodePoint = function() {\n                        var MAX_SIZE = 16384;\n                        var codeUnits = [];\n                        var highSurrogate;\n                        var lowSurrogate;\n                        var index = -1;\n                        var length = arguments.length;\n                        if (!length) {\n                            return \"\";\n                        }\n                        var result = \"\";\n                        while(++index < length){\n                            var codePoint = Number(arguments[index]);\n                            if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                            codePoint < 0 || // not a valid Unicode code point\n                            codePoint > 1114111 || // not a valid Unicode code point\n                            floor2(codePoint) !== codePoint) {\n                                throw RangeError(\"Invalid code point: \" + codePoint);\n                            }\n                            if (codePoint <= 65535) {\n                                codeUnits.push(codePoint);\n                            } else {\n                                codePoint -= 65536;\n                                highSurrogate = (codePoint >> 10) + 55296;\n                                lowSurrogate = codePoint % 1024 + 56320;\n                                codeUnits.push(highSurrogate, lowSurrogate);\n                            }\n                            if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                                result += stringFromCharCode.apply(null, codeUnits);\n                                codeUnits.length = 0;\n                            }\n                        }\n                        return result;\n                    };\n                    if (Object.defineProperty) {\n                        Object.defineProperty(String, \"fromCodePoint\", {\n                            value: fromCodePoint,\n                            configurable: true,\n                            writable: true\n                        });\n                    } else {\n                        String.fromCodePoint = fromCodePoint;\n                    }\n                })();\n            }\n        })(exports);\n    })(sax);\n    return sax;\n}\nvar arrayHelper;\nvar hasRequiredArrayHelper;\nfunction requireArrayHelper() {\n    if (hasRequiredArrayHelper) return arrayHelper;\n    hasRequiredArrayHelper = 1;\n    arrayHelper = {\n        isArray: function(value) {\n            if (Array.isArray) {\n                return Array.isArray(value);\n            }\n            return Object.prototype.toString.call(value) === \"[object Array]\";\n        }\n    };\n    return arrayHelper;\n}\nvar optionsHelper;\nvar hasRequiredOptionsHelper;\nfunction requireOptionsHelper() {\n    if (hasRequiredOptionsHelper) return optionsHelper;\n    hasRequiredOptionsHelper = 1;\n    var isArray = requireArrayHelper().isArray;\n    optionsHelper = {\n        copyOptions: function(options) {\n            var key, copy = {};\n            for(key in options){\n                if (options.hasOwnProperty(key)) {\n                    copy[key] = options[key];\n                }\n            }\n            return copy;\n        },\n        ensureFlagExists: function(item, options) {\n            if (!(item in options) || typeof options[item] !== \"boolean\") {\n                options[item] = false;\n            }\n        },\n        ensureSpacesExists: function(options) {\n            if (!(\"spaces\" in options) || typeof options.spaces !== \"number\" && typeof options.spaces !== \"string\") {\n                options.spaces = 0;\n            }\n        },\n        ensureAlwaysArrayExists: function(options) {\n            if (!(\"alwaysArray\" in options) || typeof options.alwaysArray !== \"boolean\" && !isArray(options.alwaysArray)) {\n                options.alwaysArray = false;\n            }\n        },\n        ensureKeyExists: function(key, options) {\n            if (!(key + \"Key\" in options) || typeof options[key + \"Key\"] !== \"string\") {\n                options[key + \"Key\"] = options.compact ? \"_\" + key : key;\n            }\n        },\n        checkFnExists: function(key, options) {\n            return key + \"Fn\" in options;\n        }\n    };\n    return optionsHelper;\n}\nvar xml2js;\nvar hasRequiredXml2js;\nfunction requireXml2js() {\n    if (hasRequiredXml2js) return xml2js;\n    hasRequiredXml2js = 1;\n    var sax2 = requireSax();\n    var helper = requireOptionsHelper();\n    var isArray = requireArrayHelper().isArray;\n    var options;\n    var currentElement;\n    function validateOptions(userOptions) {\n        options = helper.copyOptions(userOptions);\n        helper.ensureFlagExists(\"ignoreDeclaration\", options);\n        helper.ensureFlagExists(\"ignoreInstruction\", options);\n        helper.ensureFlagExists(\"ignoreAttributes\", options);\n        helper.ensureFlagExists(\"ignoreText\", options);\n        helper.ensureFlagExists(\"ignoreComment\", options);\n        helper.ensureFlagExists(\"ignoreCdata\", options);\n        helper.ensureFlagExists(\"ignoreDoctype\", options);\n        helper.ensureFlagExists(\"compact\", options);\n        helper.ensureFlagExists(\"alwaysChildren\", options);\n        helper.ensureFlagExists(\"addParent\", options);\n        helper.ensureFlagExists(\"trim\", options);\n        helper.ensureFlagExists(\"nativeType\", options);\n        helper.ensureFlagExists(\"nativeTypeAttributes\", options);\n        helper.ensureFlagExists(\"sanitize\", options);\n        helper.ensureFlagExists(\"instructionHasAttributes\", options);\n        helper.ensureFlagExists(\"captureSpacesBetweenElements\", options);\n        helper.ensureAlwaysArrayExists(options);\n        helper.ensureKeyExists(\"declaration\", options);\n        helper.ensureKeyExists(\"instruction\", options);\n        helper.ensureKeyExists(\"attributes\", options);\n        helper.ensureKeyExists(\"text\", options);\n        helper.ensureKeyExists(\"comment\", options);\n        helper.ensureKeyExists(\"cdata\", options);\n        helper.ensureKeyExists(\"doctype\", options);\n        helper.ensureKeyExists(\"type\", options);\n        helper.ensureKeyExists(\"name\", options);\n        helper.ensureKeyExists(\"elements\", options);\n        helper.ensureKeyExists(\"parent\", options);\n        helper.checkFnExists(\"doctype\", options);\n        helper.checkFnExists(\"instruction\", options);\n        helper.checkFnExists(\"cdata\", options);\n        helper.checkFnExists(\"comment\", options);\n        helper.checkFnExists(\"text\", options);\n        helper.checkFnExists(\"instructionName\", options);\n        helper.checkFnExists(\"elementName\", options);\n        helper.checkFnExists(\"attributeName\", options);\n        helper.checkFnExists(\"attributeValue\", options);\n        helper.checkFnExists(\"attributes\", options);\n        return options;\n    }\n    function nativeType(value) {\n        var nValue = Number(value);\n        if (!isNaN(nValue)) {\n            return nValue;\n        }\n        var bValue = value.toLowerCase();\n        if (bValue === \"true\") {\n            return true;\n        } else if (bValue === \"false\") {\n            return false;\n        }\n        return value;\n    }\n    function addField(type2, value) {\n        var key;\n        if (options.compact) {\n            if (!currentElement[options[type2 + \"Key\"]] && (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(options[type2 + \"Key\"]) !== -1 : options.alwaysArray)) {\n                currentElement[options[type2 + \"Key\"]] = [];\n            }\n            if (currentElement[options[type2 + \"Key\"]] && !isArray(currentElement[options[type2 + \"Key\"]])) {\n                currentElement[options[type2 + \"Key\"]] = [\n                    currentElement[options[type2 + \"Key\"]]\n                ];\n            }\n            if (type2 + \"Fn\" in options && typeof value === \"string\") {\n                value = options[type2 + \"Fn\"](value, currentElement);\n            }\n            if (type2 === \"instruction\" && (\"instructionFn\" in options || \"instructionNameFn\" in options)) {\n                for(key in value){\n                    if (value.hasOwnProperty(key)) {\n                        if (\"instructionFn\" in options) {\n                            value[key] = options.instructionFn(value[key], key, currentElement);\n                        } else {\n                            var temp = value[key];\n                            delete value[key];\n                            value[options.instructionNameFn(key, temp, currentElement)] = temp;\n                        }\n                    }\n                }\n            }\n            if (isArray(currentElement[options[type2 + \"Key\"]])) {\n                currentElement[options[type2 + \"Key\"]].push(value);\n            } else {\n                currentElement[options[type2 + \"Key\"]] = value;\n            }\n        } else {\n            if (!currentElement[options.elementsKey]) {\n                currentElement[options.elementsKey] = [];\n            }\n            var element = {};\n            element[options.typeKey] = type2;\n            if (type2 === \"instruction\") {\n                for(key in value){\n                    if (value.hasOwnProperty(key)) {\n                        break;\n                    }\n                }\n                element[options.nameKey] = \"instructionNameFn\" in options ? options.instructionNameFn(key, value, currentElement) : key;\n                if (options.instructionHasAttributes) {\n                    element[options.attributesKey] = value[key][options.attributesKey];\n                    if (\"instructionFn\" in options) {\n                        element[options.attributesKey] = options.instructionFn(element[options.attributesKey], key, currentElement);\n                    }\n                } else {\n                    if (\"instructionFn\" in options) {\n                        value[key] = options.instructionFn(value[key], key, currentElement);\n                    }\n                    element[options.instructionKey] = value[key];\n                }\n            } else {\n                if (type2 + \"Fn\" in options) {\n                    value = options[type2 + \"Fn\"](value, currentElement);\n                }\n                element[options[type2 + \"Key\"]] = value;\n            }\n            if (options.addParent) {\n                element[options.parentKey] = currentElement;\n            }\n            currentElement[options.elementsKey].push(element);\n        }\n    }\n    function manipulateAttributes(attributes) {\n        if (\"attributesFn\" in options && attributes) {\n            attributes = options.attributesFn(attributes, currentElement);\n        }\n        if ((options.trim || \"attributeValueFn\" in options || \"attributeNameFn\" in options || options.nativeTypeAttributes) && attributes) {\n            var key;\n            for(key in attributes){\n                if (attributes.hasOwnProperty(key)) {\n                    if (options.trim) attributes[key] = attributes[key].trim();\n                    if (options.nativeTypeAttributes) {\n                        attributes[key] = nativeType(attributes[key]);\n                    }\n                    if (\"attributeValueFn\" in options) attributes[key] = options.attributeValueFn(attributes[key], key, currentElement);\n                    if (\"attributeNameFn\" in options) {\n                        var temp = attributes[key];\n                        delete attributes[key];\n                        attributes[options.attributeNameFn(key, attributes[key], currentElement)] = temp;\n                    }\n                }\n            }\n        }\n        return attributes;\n    }\n    function onInstruction(instruction) {\n        var attributes = {};\n        if (instruction.body && (instruction.name.toLowerCase() === \"xml\" || options.instructionHasAttributes)) {\n            var attrsRegExp = /([\\w:-]+)\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|(\\w+))\\s*/g;\n            var match;\n            while((match = attrsRegExp.exec(instruction.body)) !== null){\n                attributes[match[1]] = match[2] || match[3] || match[4];\n            }\n            attributes = manipulateAttributes(attributes);\n        }\n        if (instruction.name.toLowerCase() === \"xml\") {\n            if (options.ignoreDeclaration) {\n                return;\n            }\n            currentElement[options.declarationKey] = {};\n            if (Object.keys(attributes).length) {\n                currentElement[options.declarationKey][options.attributesKey] = attributes;\n            }\n            if (options.addParent) {\n                currentElement[options.declarationKey][options.parentKey] = currentElement;\n            }\n        } else {\n            if (options.ignoreInstruction) {\n                return;\n            }\n            if (options.trim) {\n                instruction.body = instruction.body.trim();\n            }\n            var value = {};\n            if (options.instructionHasAttributes && Object.keys(attributes).length) {\n                value[instruction.name] = {};\n                value[instruction.name][options.attributesKey] = attributes;\n            } else {\n                value[instruction.name] = instruction.body;\n            }\n            addField(\"instruction\", value);\n        }\n    }\n    function onStartElement(name, attributes) {\n        var element;\n        if (typeof name === \"object\") {\n            attributes = name.attributes;\n            name = name.name;\n        }\n        attributes = manipulateAttributes(attributes);\n        if (\"elementNameFn\" in options) {\n            name = options.elementNameFn(name, currentElement);\n        }\n        if (options.compact) {\n            element = {};\n            if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\n                element[options.attributesKey] = {};\n                var key;\n                for(key in attributes){\n                    if (attributes.hasOwnProperty(key)) {\n                        element[options.attributesKey][key] = attributes[key];\n                    }\n                }\n            }\n            if (!(name in currentElement) && (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(name) !== -1 : options.alwaysArray)) {\n                currentElement[name] = [];\n            }\n            if (currentElement[name] && !isArray(currentElement[name])) {\n                currentElement[name] = [\n                    currentElement[name]\n                ];\n            }\n            if (isArray(currentElement[name])) {\n                currentElement[name].push(element);\n            } else {\n                currentElement[name] = element;\n            }\n        } else {\n            if (!currentElement[options.elementsKey]) {\n                currentElement[options.elementsKey] = [];\n            }\n            element = {};\n            element[options.typeKey] = \"element\";\n            element[options.nameKey] = name;\n            if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {\n                element[options.attributesKey] = attributes;\n            }\n            if (options.alwaysChildren) {\n                element[options.elementsKey] = [];\n            }\n            currentElement[options.elementsKey].push(element);\n        }\n        element[options.parentKey] = currentElement;\n        currentElement = element;\n    }\n    function onText(text) {\n        if (options.ignoreText) {\n            return;\n        }\n        if (!text.trim() && !options.captureSpacesBetweenElements) {\n            return;\n        }\n        if (options.trim) {\n            text = text.trim();\n        }\n        if (options.nativeType) {\n            text = nativeType(text);\n        }\n        if (options.sanitize) {\n            text = text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        }\n        addField(\"text\", text);\n    }\n    function onComment(comment) {\n        if (options.ignoreComment) {\n            return;\n        }\n        if (options.trim) {\n            comment = comment.trim();\n        }\n        addField(\"comment\", comment);\n    }\n    function onEndElement(name) {\n        var parentElement = currentElement[options.parentKey];\n        if (!options.addParent) {\n            delete currentElement[options.parentKey];\n        }\n        currentElement = parentElement;\n    }\n    function onCdata(cdata) {\n        if (options.ignoreCdata) {\n            return;\n        }\n        if (options.trim) {\n            cdata = cdata.trim();\n        }\n        addField(\"cdata\", cdata);\n    }\n    function onDoctype(doctype) {\n        if (options.ignoreDoctype) {\n            return;\n        }\n        doctype = doctype.replace(/^ /, \"\");\n        if (options.trim) {\n            doctype = doctype.trim();\n        }\n        addField(\"doctype\", doctype);\n    }\n    function onError(error) {\n        error.note = error;\n    }\n    xml2js = function(xml2, userOptions) {\n        var parser = sax2.parser(true, {});\n        var result = {};\n        currentElement = result;\n        options = validateOptions(userOptions);\n        {\n            parser.opt = {\n                strictEntities: true\n            };\n            parser.onopentag = onStartElement;\n            parser.ontext = onText;\n            parser.oncomment = onComment;\n            parser.onclosetag = onEndElement;\n            parser.onerror = onError;\n            parser.oncdata = onCdata;\n            parser.ondoctype = onDoctype;\n            parser.onprocessinginstruction = onInstruction;\n        }\n        {\n            parser.write(xml2).close();\n        }\n        if (result[options.elementsKey]) {\n            var temp = result[options.elementsKey];\n            delete result[options.elementsKey];\n            result[options.elementsKey] = temp;\n            delete result.text;\n        }\n        return result;\n    };\n    return xml2js;\n}\nvar xml2json;\nvar hasRequiredXml2json;\nfunction requireXml2json() {\n    if (hasRequiredXml2json) return xml2json;\n    hasRequiredXml2json = 1;\n    var helper = requireOptionsHelper();\n    var xml2js2 = requireXml2js();\n    function validateOptions(userOptions) {\n        var options = helper.copyOptions(userOptions);\n        helper.ensureSpacesExists(options);\n        return options;\n    }\n    xml2json = function(xml2, userOptions) {\n        var options, js, json, parentKey;\n        options = validateOptions(userOptions);\n        js = xml2js2(xml2, options);\n        parentKey = \"compact\" in options && options.compact ? \"_parent\" : \"parent\";\n        if (\"addParent\" in options && options.addParent) {\n            json = JSON.stringify(js, function(k, v) {\n                return k === parentKey ? \"_\" : v;\n            }, options.spaces);\n        } else {\n            json = JSON.stringify(js, null, options.spaces);\n        }\n        return json.replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\");\n    };\n    return xml2json;\n}\nvar js2xml;\nvar hasRequiredJs2xml;\nfunction requireJs2xml() {\n    if (hasRequiredJs2xml) return js2xml;\n    hasRequiredJs2xml = 1;\n    var helper = requireOptionsHelper();\n    var isArray = requireArrayHelper().isArray;\n    var currentElement, currentElementName;\n    function validateOptions(userOptions) {\n        var options = helper.copyOptions(userOptions);\n        helper.ensureFlagExists(\"ignoreDeclaration\", options);\n        helper.ensureFlagExists(\"ignoreInstruction\", options);\n        helper.ensureFlagExists(\"ignoreAttributes\", options);\n        helper.ensureFlagExists(\"ignoreText\", options);\n        helper.ensureFlagExists(\"ignoreComment\", options);\n        helper.ensureFlagExists(\"ignoreCdata\", options);\n        helper.ensureFlagExists(\"ignoreDoctype\", options);\n        helper.ensureFlagExists(\"compact\", options);\n        helper.ensureFlagExists(\"indentText\", options);\n        helper.ensureFlagExists(\"indentCdata\", options);\n        helper.ensureFlagExists(\"indentAttributes\", options);\n        helper.ensureFlagExists(\"indentInstruction\", options);\n        helper.ensureFlagExists(\"fullTagEmptyElement\", options);\n        helper.ensureFlagExists(\"noQuotesForNativeAttributes\", options);\n        helper.ensureSpacesExists(options);\n        if (typeof options.spaces === \"number\") {\n            options.spaces = Array(options.spaces + 1).join(\" \");\n        }\n        helper.ensureKeyExists(\"declaration\", options);\n        helper.ensureKeyExists(\"instruction\", options);\n        helper.ensureKeyExists(\"attributes\", options);\n        helper.ensureKeyExists(\"text\", options);\n        helper.ensureKeyExists(\"comment\", options);\n        helper.ensureKeyExists(\"cdata\", options);\n        helper.ensureKeyExists(\"doctype\", options);\n        helper.ensureKeyExists(\"type\", options);\n        helper.ensureKeyExists(\"name\", options);\n        helper.ensureKeyExists(\"elements\", options);\n        helper.checkFnExists(\"doctype\", options);\n        helper.checkFnExists(\"instruction\", options);\n        helper.checkFnExists(\"cdata\", options);\n        helper.checkFnExists(\"comment\", options);\n        helper.checkFnExists(\"text\", options);\n        helper.checkFnExists(\"instructionName\", options);\n        helper.checkFnExists(\"elementName\", options);\n        helper.checkFnExists(\"attributeName\", options);\n        helper.checkFnExists(\"attributeValue\", options);\n        helper.checkFnExists(\"attributes\", options);\n        helper.checkFnExists(\"fullTagEmptyElement\", options);\n        return options;\n    }\n    function writeIndentation(options, depth, firstLine) {\n        return (!firstLine && options.spaces ? \"\\n\" : \"\") + Array(depth + 1).join(options.spaces);\n    }\n    function writeAttributes(attributes, options, depth) {\n        if (options.ignoreAttributes) {\n            return \"\";\n        }\n        if (\"attributesFn\" in options) {\n            attributes = options.attributesFn(attributes, currentElementName, currentElement);\n        }\n        var key, attr, attrName, quote, result = [];\n        for(key in attributes){\n            if (attributes.hasOwnProperty(key) && attributes[key] !== null && attributes[key] !== void 0) {\n                quote = options.noQuotesForNativeAttributes && typeof attributes[key] !== \"string\" ? \"\" : '\"';\n                attr = \"\" + attributes[key];\n                attr = attr.replace(/\"/g, \"&quot;\");\n                attrName = \"attributeNameFn\" in options ? options.attributeNameFn(key, attr, currentElementName, currentElement) : key;\n                result.push(options.spaces && options.indentAttributes ? writeIndentation(options, depth + 1, false) : \" \");\n                result.push(attrName + \"=\" + quote + (\"attributeValueFn\" in options ? options.attributeValueFn(attr, key, currentElementName, currentElement) : attr) + quote);\n            }\n        }\n        if (attributes && Object.keys(attributes).length && options.spaces && options.indentAttributes) {\n            result.push(writeIndentation(options, depth, false));\n        }\n        return result.join(\"\");\n    }\n    function writeDeclaration(declaration, options, depth) {\n        currentElement = declaration;\n        currentElementName = \"xml\";\n        return options.ignoreDeclaration ? \"\" : \"<?xml\" + writeAttributes(declaration[options.attributesKey], options, depth) + \"?>\";\n    }\n    function writeInstruction(instruction, options, depth) {\n        if (options.ignoreInstruction) {\n            return \"\";\n        }\n        var key;\n        for(key in instruction){\n            if (instruction.hasOwnProperty(key)) {\n                break;\n            }\n        }\n        var instructionName = \"instructionNameFn\" in options ? options.instructionNameFn(key, instruction[key], currentElementName, currentElement) : key;\n        if (typeof instruction[key] === \"object\") {\n            currentElement = instruction;\n            currentElementName = instructionName;\n            return \"<?\" + instructionName + writeAttributes(instruction[key][options.attributesKey], options, depth) + \"?>\";\n        } else {\n            var instructionValue = instruction[key] ? instruction[key] : \"\";\n            if (\"instructionFn\" in options) instructionValue = options.instructionFn(instructionValue, key, currentElementName, currentElement);\n            return \"<?\" + instructionName + (instructionValue ? \" \" + instructionValue : \"\") + \"?>\";\n        }\n    }\n    function writeComment(comment, options) {\n        return options.ignoreComment ? \"\" : \"<!--\" + (\"commentFn\" in options ? options.commentFn(comment, currentElementName, currentElement) : comment) + \"-->\";\n    }\n    function writeCdata(cdata, options) {\n        return options.ignoreCdata ? \"\" : \"<![CDATA[\" + (\"cdataFn\" in options ? options.cdataFn(cdata, currentElementName, currentElement) : cdata.replace(\"]]>\", \"]]]]><![CDATA[>\")) + \"]]>\";\n    }\n    function writeDoctype(doctype, options) {\n        return options.ignoreDoctype ? \"\" : \"<!DOCTYPE \" + (\"doctypeFn\" in options ? options.doctypeFn(doctype, currentElementName, currentElement) : doctype) + \">\";\n    }\n    function writeText(text, options) {\n        if (options.ignoreText) return \"\";\n        text = \"\" + text;\n        text = text.replace(/&amp;/g, \"&\");\n        text = text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        return \"textFn\" in options ? options.textFn(text, currentElementName, currentElement) : text;\n    }\n    function hasContent(element, options) {\n        var i;\n        if (element.elements && element.elements.length) {\n            for(i = 0; i < element.elements.length; ++i){\n                switch(element.elements[i][options.typeKey]){\n                    case \"text\":\n                        if (options.indentText) {\n                            return true;\n                        }\n                        break;\n                    // skip to next key\n                    case \"cdata\":\n                        if (options.indentCdata) {\n                            return true;\n                        }\n                        break;\n                    // skip to next key\n                    case \"instruction\":\n                        if (options.indentInstruction) {\n                            return true;\n                        }\n                        break;\n                    // skip to next key\n                    case \"doctype\":\n                    case \"comment\":\n                    case \"element\":\n                        return true;\n                    default:\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n    function writeElement(element, options, depth) {\n        currentElement = element;\n        currentElementName = element.name;\n        var xml2 = [], elementName = \"elementNameFn\" in options ? options.elementNameFn(element.name, element) : element.name;\n        xml2.push(\"<\" + elementName);\n        if (element[options.attributesKey]) {\n            xml2.push(writeAttributes(element[options.attributesKey], options, depth));\n        }\n        var withClosingTag = element[options.elementsKey] && element[options.elementsKey].length || element[options.attributesKey] && element[options.attributesKey][\"xml:space\"] === \"preserve\";\n        if (!withClosingTag) {\n            if (\"fullTagEmptyElementFn\" in options) {\n                withClosingTag = options.fullTagEmptyElementFn(element.name, element);\n            } else {\n                withClosingTag = options.fullTagEmptyElement;\n            }\n        }\n        if (withClosingTag) {\n            xml2.push(\">\");\n            if (element[options.elementsKey] && element[options.elementsKey].length) {\n                xml2.push(writeElements(element[options.elementsKey], options, depth + 1));\n                currentElement = element;\n                currentElementName = element.name;\n            }\n            xml2.push(options.spaces && hasContent(element, options) ? \"\\n\" + Array(depth + 1).join(options.spaces) : \"\");\n            xml2.push(\"</\" + elementName + \">\");\n        } else {\n            xml2.push(\"/>\");\n        }\n        return xml2.join(\"\");\n    }\n    function writeElements(elements, options, depth, firstLine) {\n        return elements.reduce(function(xml2, element) {\n            var indent = writeIndentation(options, depth, firstLine && !xml2);\n            switch(element.type){\n                case \"element\":\n                    return xml2 + indent + writeElement(element, options, depth);\n                case \"comment\":\n                    return xml2 + indent + writeComment(element[options.commentKey], options);\n                case \"doctype\":\n                    return xml2 + indent + writeDoctype(element[options.doctypeKey], options);\n                case \"cdata\":\n                    return xml2 + (options.indentCdata ? indent : \"\") + writeCdata(element[options.cdataKey], options);\n                case \"text\":\n                    return xml2 + (options.indentText ? indent : \"\") + writeText(element[options.textKey], options);\n                case \"instruction\":\n                    var instruction = {};\n                    instruction[element[options.nameKey]] = element[options.attributesKey] ? element : element[options.instructionKey];\n                    return xml2 + (options.indentInstruction ? indent : \"\") + writeInstruction(instruction, options, depth);\n            }\n        }, \"\");\n    }\n    function hasContentCompact(element, options, anyContent) {\n        var key;\n        for(key in element){\n            if (element.hasOwnProperty(key)) {\n                switch(key){\n                    case options.parentKey:\n                    case options.attributesKey:\n                        break;\n                    // skip to next key\n                    case options.textKey:\n                        if (options.indentText || anyContent) {\n                            return true;\n                        }\n                        break;\n                    // skip to next key\n                    case options.cdataKey:\n                        if (options.indentCdata || anyContent) {\n                            return true;\n                        }\n                        break;\n                    // skip to next key\n                    case options.instructionKey:\n                        if (options.indentInstruction || anyContent) {\n                            return true;\n                        }\n                        break;\n                    // skip to next key\n                    case options.doctypeKey:\n                    case options.commentKey:\n                        return true;\n                    default:\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n    function writeElementCompact(element, name, options, depth, indent) {\n        currentElement = element;\n        currentElementName = name;\n        var elementName = \"elementNameFn\" in options ? options.elementNameFn(name, element) : name;\n        if (typeof element === \"undefined\" || element === null || element === \"\") {\n            return \"fullTagEmptyElementFn\" in options && options.fullTagEmptyElementFn(name, element) || options.fullTagEmptyElement ? \"<\" + elementName + \"></\" + elementName + \">\" : \"<\" + elementName + \"/>\";\n        }\n        var xml2 = [];\n        if (name) {\n            xml2.push(\"<\" + elementName);\n            if (typeof element !== \"object\") {\n                xml2.push(\">\" + writeText(element, options) + \"</\" + elementName + \">\");\n                return xml2.join(\"\");\n            }\n            if (element[options.attributesKey]) {\n                xml2.push(writeAttributes(element[options.attributesKey], options, depth));\n            }\n            var withClosingTag = hasContentCompact(element, options, true) || element[options.attributesKey] && element[options.attributesKey][\"xml:space\"] === \"preserve\";\n            if (!withClosingTag) {\n                if (\"fullTagEmptyElementFn\" in options) {\n                    withClosingTag = options.fullTagEmptyElementFn(name, element);\n                } else {\n                    withClosingTag = options.fullTagEmptyElement;\n                }\n            }\n            if (withClosingTag) {\n                xml2.push(\">\");\n            } else {\n                xml2.push(\"/>\");\n                return xml2.join(\"\");\n            }\n        }\n        xml2.push(writeElementsCompact(element, options, depth + 1, false));\n        currentElement = element;\n        currentElementName = name;\n        if (name) {\n            xml2.push((indent ? writeIndentation(options, depth, false) : \"\") + \"</\" + elementName + \">\");\n        }\n        return xml2.join(\"\");\n    }\n    function writeElementsCompact(element, options, depth, firstLine) {\n        var i, key, nodes, xml2 = [];\n        for(key in element){\n            if (element.hasOwnProperty(key)) {\n                nodes = isArray(element[key]) ? element[key] : [\n                    element[key]\n                ];\n                for(i = 0; i < nodes.length; ++i){\n                    switch(key){\n                        case options.declarationKey:\n                            xml2.push(writeDeclaration(nodes[i], options, depth));\n                            break;\n                        case options.instructionKey:\n                            xml2.push((options.indentInstruction ? writeIndentation(options, depth, firstLine) : \"\") + writeInstruction(nodes[i], options, depth));\n                            break;\n                        case options.attributesKey:\n                        case options.parentKey:\n                            break;\n                        // skip\n                        case options.textKey:\n                            xml2.push((options.indentText ? writeIndentation(options, depth, firstLine) : \"\") + writeText(nodes[i], options));\n                            break;\n                        case options.cdataKey:\n                            xml2.push((options.indentCdata ? writeIndentation(options, depth, firstLine) : \"\") + writeCdata(nodes[i], options));\n                            break;\n                        case options.doctypeKey:\n                            xml2.push(writeIndentation(options, depth, firstLine) + writeDoctype(nodes[i], options));\n                            break;\n                        case options.commentKey:\n                            xml2.push(writeIndentation(options, depth, firstLine) + writeComment(nodes[i], options));\n                            break;\n                        default:\n                            xml2.push(writeIndentation(options, depth, firstLine) + writeElementCompact(nodes[i], key, options, depth, hasContentCompact(nodes[i], options)));\n                    }\n                    firstLine = firstLine && !xml2.length;\n                }\n            }\n        }\n        return xml2.join(\"\");\n    }\n    js2xml = function(js, options) {\n        options = validateOptions(options);\n        var xml2 = [];\n        currentElement = js;\n        currentElementName = \"_root_\";\n        if (options.compact) {\n            xml2.push(writeElementsCompact(js, options, 0, true));\n        } else {\n            if (js[options.declarationKey]) {\n                xml2.push(writeDeclaration(js[options.declarationKey], options, 0));\n            }\n            if (js[options.elementsKey] && js[options.elementsKey].length) {\n                xml2.push(writeElements(js[options.elementsKey], options, 0, !xml2.length));\n            }\n        }\n        return xml2.join(\"\");\n    };\n    return js2xml;\n}\nvar json2xml;\nvar hasRequiredJson2xml;\nfunction requireJson2xml() {\n    if (hasRequiredJson2xml) return json2xml;\n    hasRequiredJson2xml = 1;\n    var js2xml2 = requireJs2xml();\n    json2xml = function(json, options) {\n        if (json instanceof Buffer) {\n            json = json.toString();\n        }\n        var js = null;\n        if (typeof json === \"string\") {\n            try {\n                js = JSON.parse(json);\n            } catch (e) {\n                throw new Error(\"The JSON structure is invalid\");\n            }\n        } else {\n            js = json;\n        }\n        return js2xml2(js, options);\n    };\n    return json2xml;\n}\nvar lib;\nvar hasRequiredLib;\nfunction requireLib() {\n    if (hasRequiredLib) return lib;\n    hasRequiredLib = 1;\n    var xml2js2 = requireXml2js();\n    var xml2json2 = requireXml2json();\n    var js2xml2 = requireJs2xml();\n    var json2xml2 = requireJson2xml();\n    lib = {\n        xml2js: xml2js2,\n        xml2json: xml2json2,\n        js2xml: js2xml2,\n        json2xml: json2xml2\n    };\n    return lib;\n}\nvar libExports = requireLib();\nconst convertToXmlComponent = (element)=>{\n    switch(element.type){\n        case void 0:\n        case \"element\":\n            const xmlComponent = new ImportedXmlComponent(element.name, element.attributes);\n            const childElements = element.elements || [];\n            for (const childElm of childElements){\n                const child = convertToXmlComponent(childElm);\n                if (child !== void 0) {\n                    xmlComponent.push(child);\n                }\n            }\n            return xmlComponent;\n        case \"text\":\n            return element.text;\n        default:\n            return void 0;\n    }\n};\nclass ImportedXmlComponentAttributes extends XmlAttributeComponent {\n}\nclass ImportedXmlComponent extends XmlComponent {\n    /**\n   * Converts the xml string to a XmlComponent tree.\n   *\n   * @param importedContent xml content of the imported component\n   */ static fromXmlString(importedContent) {\n        const xmlObj = libExports.xml2js(importedContent, {\n            compact: false\n        });\n        return convertToXmlComponent(xmlObj);\n    }\n    /**\n   * Converts the xml string to a XmlComponent tree.\n   *\n   * @param importedContent xml content of the imported component\n   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(rootKey, _attr){\n        super(rootKey);\n        if (_attr) {\n            this.root.push(new ImportedXmlComponentAttributes(_attr));\n        }\n    }\n    push(xmlComponent) {\n        this.root.push(xmlComponent);\n    }\n}\nclass ImportedRootElementAttributes extends XmlComponent {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(_attr){\n        super(\"\");\n        this._attr = _attr;\n    }\n    prepForXml(_) {\n        return {\n            _attr: this._attr\n        };\n    }\n}\nconst WORKAROUND3 = \"\";\nclass InitializableXmlComponent extends XmlComponent {\n    constructor(rootKey, initComponent){\n        super(rootKey);\n        if (initComponent) {\n            this.root = initComponent.root;\n        }\n    }\n}\nconst decimalNumber = (val)=>{\n    if (isNaN(val)) {\n        throw new Error(`Invalid value '${val}' specified. Must be an integer.`);\n    }\n    return Math.floor(val);\n};\nconst unsignedDecimalNumber = (val)=>{\n    const value = decimalNumber(val);\n    if (value < 0) {\n        throw new Error(`Invalid value '${val}' specified. Must be a positive integer.`);\n    }\n    return value;\n};\nconst hexBinary = (val, length)=>{\n    const expectedLength = length * 2;\n    if (val.length !== expectedLength || isNaN(Number(`0x${val}`))) {\n        throw new Error(`Invalid hex value '${val}'. Expected ${expectedLength} digit hex value`);\n    }\n    return val;\n};\nconst longHexNumber = (val)=>hexBinary(val, 4);\nconst shortHexNumber = (val)=>hexBinary(val, 2);\nconst uCharHexNumber = (val)=>hexBinary(val, 1);\nconst universalMeasureValue = (val)=>{\n    const unit = val.slice(-2);\n    const amount = val.substring(0, val.length - 2);\n    return `${Number(amount)}${unit}`;\n};\nconst positiveUniversalMeasureValue = (val)=>{\n    const value = universalMeasureValue(val);\n    if (parseFloat(value) < 0) {\n        throw new Error(`Invalid value '${value}' specified. Expected a positive number.`);\n    }\n    return value;\n};\nconst hexColorValue = (val)=>{\n    if (val === \"auto\") {\n        return val;\n    }\n    const color = val.charAt(0) === \"#\" ? val.substring(1) : val;\n    return hexBinary(color, 3);\n};\nconst signedTwipsMeasureValue = (val)=>typeof val === \"string\" ? universalMeasureValue(val) : decimalNumber(val);\nconst hpsMeasureValue = (val)=>typeof val === \"string\" ? positiveUniversalMeasureValue(val) : unsignedDecimalNumber(val);\nconst signedHpsMeasureValue = (val)=>typeof val === \"string\" ? universalMeasureValue(val) : decimalNumber(val);\nconst twipsMeasureValue = (val)=>typeof val === \"string\" ? positiveUniversalMeasureValue(val) : unsignedDecimalNumber(val);\nconst percentageValue = (val)=>{\n    const percent = val.substring(0, val.length - 1);\n    return `${Number(percent)}%`;\n};\nconst measurementOrPercentValue = (val)=>{\n    if (typeof val === \"number\") {\n        return decimalNumber(val);\n    }\n    if (val.slice(-1) === \"%\") {\n        return percentageValue(val);\n    }\n    return universalMeasureValue(val);\n};\nconst eighthPointMeasureValue = unsignedDecimalNumber;\nconst pointMeasureValue = unsignedDecimalNumber;\nconst dateTimeValue = (val)=>val.toISOString();\nclass OnOffElement extends XmlComponent {\n    constructor(name, val = true){\n        super(name);\n        if (val !== true) {\n            this.root.push(new Attributes({\n                val\n            }));\n        }\n    }\n}\nclass HpsMeasureElement extends XmlComponent {\n    constructor(name, val){\n        super(name);\n        this.root.push(new Attributes({\n            val: hpsMeasureValue(val)\n        }));\n    }\n}\nclass EmptyElement extends XmlComponent {\n}\nclass StringValueElement extends XmlComponent {\n    constructor(name, val){\n        super(name);\n        this.root.push(new Attributes({\n            val\n        }));\n    }\n}\nconst createStringElement = (name, value)=>new BuilderElement({\n        name,\n        attributes: {\n            value: {\n                key: \"w:val\",\n                value\n            }\n        }\n    });\nclass NumberValueElement extends XmlComponent {\n    constructor(name, val){\n        super(name);\n        this.root.push(new Attributes({\n            val\n        }));\n    }\n}\nclass StringEnumValueElement extends XmlComponent {\n    constructor(name, val){\n        super(name);\n        this.root.push(new Attributes({\n            val\n        }));\n    }\n}\nclass StringContainer extends XmlComponent {\n    constructor(name, val){\n        super(name);\n        this.root.push(val);\n    }\n}\nclass BuilderElement extends XmlComponent {\n    constructor({ name, attributes, children }){\n        super(name);\n        if (attributes) {\n            this.root.push(new NextAttributeComponent(attributes));\n        }\n        if (children) {\n            this.root.push(...children);\n        }\n    }\n}\nconst AlignmentType = {\n    /** Align Start */ START: \"start\",\n    /** Align Center */ CENTER: \"center\",\n    /** End */ END: \"end\",\n    /** Justified */ BOTH: \"both\",\n    /** Medium Kashida Length */ MEDIUM_KASHIDA: \"mediumKashida\",\n    /** Distribute All Characters Equally */ DISTRIBUTE: \"distribute\",\n    /** Align to List Tab */ NUM_TAB: \"numTab\",\n    /** Widest Kashida Length */ HIGH_KASHIDA: \"highKashida\",\n    /** Low Kashida Length */ LOW_KASHIDA: \"lowKashida\",\n    /** Thai Language Justification */ THAI_DISTRIBUTE: \"thaiDistribute\",\n    /** Align Left */ LEFT: \"left\",\n    /** Align Right */ RIGHT: \"right\",\n    /** Justified */ JUSTIFIED: \"both\"\n};\nclass AlignmentAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass Alignment extends XmlComponent {\n    constructor(type2){\n        super(\"w:jc\");\n        this.root.push(new AlignmentAttributes({\n            val: type2\n        }));\n    }\n}\nclass BorderElement extends XmlComponent {\n    constructor(elementName, { color, size, space, style }){\n        super(elementName);\n        this.root.push(new BordersAttributes({\n            style,\n            color: color === void 0 ? void 0 : hexColorValue(color),\n            size: size === void 0 ? void 0 : eighthPointMeasureValue(size),\n            space: space === void 0 ? void 0 : pointMeasureValue(space)\n        }));\n    }\n}\nclass BordersAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            style: \"w:val\",\n            color: \"w:color\",\n            size: \"w:sz\",\n            space: \"w:space\"\n        });\n    }\n}\nconst BorderStyle = {\n    /** a single line */ SINGLE: \"single\",\n    /** a line with a series of alternating thin and thick strokes */ DASH_DOT_STROKED: \"dashDotStroked\",\n    /** a dashed line */ DASHED: \"dashed\",\n    /** a dashed line with small gaps */ DASH_SMALL_GAP: \"dashSmallGap\",\n    /** a line with alternating dots and dashes */ DOT_DASH: \"dotDash\",\n    /** a line with a repeating dot - dot - dash sequence */ DOT_DOT_DASH: \"dotDotDash\",\n    /** a dotted line */ DOTTED: \"dotted\",\n    /** a double line */ DOUBLE: \"double\",\n    /** a double wavy line */ DOUBLE_WAVE: \"doubleWave\",\n    /** an inset set of lines */ INSET: \"inset\",\n    /** no border */ NIL: \"nil\",\n    /** no border */ NONE: \"none\",\n    /** an outset set of lines */ OUTSET: \"outset\",\n    /** a single line */ THICK: \"thick\",\n    /** a thick line contained within a thin line with a large-sized intermediate gap */ THICK_THIN_LARGE_GAP: \"thickThinLargeGap\",\n    /** a thick line contained within a thin line with a medium-sized intermediate gap */ THICK_THIN_MEDIUM_GAP: \"thickThinMediumGap\",\n    /** a thick line contained within a thin line with a small intermediate gap */ THICK_THIN_SMALL_GAP: \"thickThinSmallGap\",\n    /** a thin line contained within a thick line with a large-sized intermediate gap */ THIN_THICK_LARGE_GAP: \"thinThickLargeGap\",\n    /** a thick line contained within a thin line with a medium-sized intermediate gap */ THIN_THICK_MEDIUM_GAP: \"thinThickMediumGap\",\n    /** a thick line contained within a thin line with a small intermediate gap */ THIN_THICK_SMALL_GAP: \"thinThickSmallGap\",\n    /** a thin-thick-thin line with a large gap */ THIN_THICK_THIN_LARGE_GAP: \"thinThickThinLargeGap\",\n    /** a thin-thick-thin line with a medium gap */ THIN_THICK_THIN_MEDIUM_GAP: \"thinThickThinMediumGap\",\n    /** a thin-thick-thin line with a small gap */ THIN_THICK_THIN_SMALL_GAP: \"thinThickThinSmallGap\",\n    /** a three-staged gradient line, getting darker towards the paragraph */ THREE_D_EMBOSS: \"threeDEmboss\",\n    /** a three-staged gradient like, getting darker away from the paragraph */ THREE_D_ENGRAVE: \"threeDEngrave\",\n    /** a triple line */ TRIPLE: \"triple\",\n    /** a wavy line */ WAVE: \"wave\"\n};\nclass Border extends IgnoreIfEmptyXmlComponent {\n    constructor(options){\n        super(\"w:pBdr\");\n        if (options.top) {\n            this.root.push(new BorderElement(\"w:top\", options.top));\n        }\n        if (options.bottom) {\n            this.root.push(new BorderElement(\"w:bottom\", options.bottom));\n        }\n        if (options.left) {\n            this.root.push(new BorderElement(\"w:left\", options.left));\n        }\n        if (options.right) {\n            this.root.push(new BorderElement(\"w:right\", options.right));\n        }\n    }\n}\nclass ThematicBreak extends XmlComponent {\n    constructor(){\n        super(\"w:pBdr\");\n        const bottom = new BorderElement(\"w:bottom\", {\n            color: \"auto\",\n            space: 1,\n            style: BorderStyle.SINGLE,\n            size: 6\n        });\n        this.root.push(bottom);\n    }\n}\nclass Indent extends XmlComponent {\n    constructor({ start, end, left, right, hanging, firstLine }){\n        super(\"w:ind\");\n        this.root.push(new NextAttributeComponent({\n            start: {\n                key: \"w:start\",\n                value: start === void 0 ? void 0 : signedTwipsMeasureValue(start)\n            },\n            end: {\n                key: \"w:end\",\n                value: end === void 0 ? void 0 : signedTwipsMeasureValue(end)\n            },\n            left: {\n                key: \"w:left\",\n                value: left === void 0 ? void 0 : signedTwipsMeasureValue(left)\n            },\n            right: {\n                key: \"w:right\",\n                value: right === void 0 ? void 0 : signedTwipsMeasureValue(right)\n            },\n            hanging: {\n                key: \"w:hanging\",\n                value: hanging === void 0 ? void 0 : twipsMeasureValue(hanging)\n            },\n            firstLine: {\n                key: \"w:firstLine\",\n                value: firstLine === void 0 ? void 0 : twipsMeasureValue(firstLine)\n            }\n        }));\n    }\n}\nlet Break$1 = class Break extends XmlComponent {\n    constructor(){\n        super(\"w:br\");\n    }\n};\nconst FieldCharacterType = {\n    BEGIN: \"begin\",\n    END: \"end\",\n    SEPARATE: \"separate\"\n};\nclass FidCharAttrs extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            type: \"w:fldCharType\",\n            dirty: \"w:dirty\"\n        });\n    }\n}\nclass Begin extends XmlComponent {\n    constructor(dirty){\n        super(\"w:fldChar\");\n        this.root.push(new FidCharAttrs({\n            type: FieldCharacterType.BEGIN,\n            dirty\n        }));\n    }\n}\nclass Separate extends XmlComponent {\n    constructor(dirty){\n        super(\"w:fldChar\");\n        this.root.push(new FidCharAttrs({\n            type: FieldCharacterType.SEPARATE,\n            dirty\n        }));\n    }\n}\nclass End extends XmlComponent {\n    constructor(dirty){\n        super(\"w:fldChar\");\n        this.root.push(new FidCharAttrs({\n            type: FieldCharacterType.END,\n            dirty\n        }));\n    }\n}\nconst HorizontalPositionAlign = {\n    CENTER: \"center\",\n    INSIDE: \"inside\",\n    LEFT: \"left\",\n    OUTSIDE: \"outside\",\n    RIGHT: \"right\"\n};\nconst VerticalPositionAlign = {\n    BOTTOM: \"bottom\",\n    CENTER: \"center\",\n    INSIDE: \"inside\",\n    OUTSIDE: \"outside\",\n    TOP: \"top\"\n};\nconst NumberFormat$1 = {\n    DECIMAL: \"decimal\",\n    UPPER_ROMAN: \"upperRoman\",\n    LOWER_ROMAN: \"lowerRoman\",\n    UPPER_LETTER: \"upperLetter\",\n    LOWER_LETTER: \"lowerLetter\",\n    ORDINAL: \"ordinal\",\n    CARDINAL_TEXT: \"cardinalText\",\n    ORDINAL_TEXT: \"ordinalText\",\n    HEX: \"hex\",\n    CHICAGO: \"chicago\",\n    IDEOGRAPH_DIGITAL: \"ideographDigital\",\n    JAPANESE_COUNTING: \"japaneseCounting\",\n    AIUEO: \"aiueo\",\n    IROHA: \"iroha\",\n    DECIMAL_FULL_WIDTH: \"decimalFullWidth\",\n    DECIMAL_HALF_WIDTH: \"decimalHalfWidth\",\n    JAPANESE_LEGAL: \"japaneseLegal\",\n    JAPANESE_DIGITAL_TEN_THOUSAND: \"japaneseDigitalTenThousand\",\n    DECIMAL_ENCLOSED_CIRCLE: \"decimalEnclosedCircle\",\n    DECIMAL_FULL_WIDTH_2: \"decimalFullWidth2\",\n    AIUEO_FULL_WIDTH: \"aiueoFullWidth\",\n    IROHA_FULL_WIDTH: \"irohaFullWidth\",\n    DECIMAL_ZERO: \"decimalZero\",\n    BULLET: \"bullet\",\n    GANADA: \"ganada\",\n    CHOSUNG: \"chosung\",\n    DECIMAL_ENCLOSED_FULL_STOP: \"decimalEnclosedFullstop\",\n    DECIMAL_ENCLOSED_PAREN: \"decimalEnclosedParen\",\n    DECIMAL_ENCLOSED_CIRCLE_CHINESE: \"decimalEnclosedCircleChinese\",\n    IDEOGRAPH_ENCLOSED_CIRCLE: \"ideographEnclosedCircle\",\n    IDEOGRAPH_TRADITIONAL: \"ideographTraditional\",\n    IDEOGRAPH_ZODIAC: \"ideographZodiac\",\n    IDEOGRAPH_ZODIAC_TRADITIONAL: \"ideographZodiacTraditional\",\n    TAIWANESE_COUNTING: \"taiwaneseCounting\",\n    IDEOGRAPH_LEGAL_TRADITIONAL: \"ideographLegalTraditional\",\n    TAIWANESE_COUNTING_THOUSAND: \"taiwaneseCountingThousand\",\n    TAIWANESE_DIGITAL: \"taiwaneseDigital\",\n    CHINESE_COUNTING: \"chineseCounting\",\n    CHINESE_LEGAL_SIMPLIFIED: \"chineseLegalSimplified\",\n    CHINESE_COUNTING_TEN_THOUSAND: \"chineseCountingThousand\",\n    KOREAN_DIGITAL: \"koreanDigital\",\n    KOREAN_COUNTING: \"koreanCounting\",\n    KOREAN_LEGAL: \"koreanLegal\",\n    KOREAN_DIGITAL_2: \"koreanDigital2\",\n    VIETNAMESE_COUNTING: \"vietnameseCounting\",\n    RUSSIAN_LOWER: \"russianLower\",\n    RUSSIAN_UPPER: \"russianUpper\",\n    NONE: \"none\",\n    NUMBER_IN_DASH: \"numberInDash\",\n    HEBREW_1: \"hebrew1\",\n    HEBREW_2: \"hebrew2\",\n    ARABIC_ALPHA: \"arabicAlpha\",\n    ARABIC_ABJAD: \"arabicAbjad\",\n    HINDI_VOWELS: \"hindiVowels\",\n    HINDI_CONSONANTS: \"hindiConsonants\",\n    HINDI_NUMBERS: \"hindiNumbers\",\n    HINDI_COUNTING: \"hindiCounting\",\n    THAI_LETTERS: \"thaiLetters\",\n    THAI_NUMBERS: \"thaiNumbers\",\n    THAI_COUNTING: \"thaiCounting\",\n    BAHT_TEXT: \"bahtText\",\n    DOLLAR_TEXT: \"dollarText\"\n};\nconst SpaceType = {\n    DEFAULT: \"default\",\n    PRESERVE: \"preserve\"\n};\nclass TextAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            space: \"xml:space\"\n        });\n    }\n}\nclass Page extends XmlComponent {\n    constructor(){\n        super(\"w:instrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(\"PAGE\");\n    }\n}\nclass NumberOfPages extends XmlComponent {\n    constructor(){\n        super(\"w:instrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(\"NUMPAGES\");\n    }\n}\nclass NumberOfPagesSection extends XmlComponent {\n    constructor(){\n        super(\"w:instrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(\"SECTIONPAGES\");\n    }\n}\nclass CurrentSection extends XmlComponent {\n    constructor(){\n        super(\"w:instrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(\"SECTION\");\n    }\n}\nclass ShadingAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            fill: \"w:fill\",\n            color: \"w:color\",\n            type: \"w:val\"\n        });\n    }\n}\nclass Shading extends XmlComponent {\n    constructor({ fill, color, type: type2 }){\n        super(\"w:shd\");\n        this.root.push(new ShadingAttributes({\n            fill: fill === void 0 ? void 0 : hexColorValue(fill),\n            color: color === void 0 ? void 0 : hexColorValue(color),\n            type: type2\n        }));\n    }\n}\nconst ShadingType = {\n    CLEAR: \"clear\",\n    DIAGONAL_CROSS: \"diagCross\",\n    DIAGONAL_STRIPE: \"diagStripe\",\n    HORIZONTAL_CROSS: \"horzCross\",\n    HORIZONTAL_STRIPE: \"horzStripe\",\n    NIL: \"nil\",\n    PERCENT_5: \"pct5\",\n    PERCENT_10: \"pct10\",\n    PERCENT_12: \"pct12\",\n    PERCENT_15: \"pct15\",\n    PERCENT_20: \"pct20\",\n    PERCENT_25: \"pct25\",\n    PERCENT_30: \"pct30\",\n    PERCENT_35: \"pct35\",\n    PERCENT_37: \"pct37\",\n    PERCENT_40: \"pct40\",\n    PERCENT_45: \"pct45\",\n    PERCENT_50: \"pct50\",\n    PERCENT_55: \"pct55\",\n    PERCENT_60: \"pct60\",\n    PERCENT_62: \"pct62\",\n    PERCENT_65: \"pct65\",\n    PERCENT_70: \"pct70\",\n    PERCENT_75: \"pct75\",\n    PERCENT_80: \"pct80\",\n    PERCENT_85: \"pct85\",\n    PERCENT_87: \"pct87\",\n    PERCENT_90: \"pct90\",\n    PERCENT_95: \"pct95\",\n    REVERSE_DIAGONAL_STRIPE: \"reverseDiagStripe\",\n    SOLID: \"solid\",\n    THIN_DIAGONAL_CROSS: \"thinDiagCross\",\n    THIN_DIAGONAL_STRIPE: \"thinDiagStripe\",\n    THIN_HORIZONTAL_CROSS: \"thinHorzCross\",\n    THIN_REVERSE_DIAGONAL_STRIPE: \"thinReverseDiagStripe\",\n    THIN_VERTICAL_STRIPE: \"thinVertStripe\",\n    VERTICAL_STRIPE: \"vertStripe\"\n};\nclass ChangeAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"w:id\",\n            author: \"w:author\",\n            date: \"w:date\"\n        });\n    }\n}\nconst EmphasisMarkType = {\n    DOT: \"dot\"\n};\nclass BaseEmphasisMark extends XmlComponent {\n    constructor(emphasisMarkType){\n        super(\"w:em\");\n        this.root.push(new Attributes({\n            val: emphasisMarkType\n        }));\n    }\n}\nclass EmphasisMark extends BaseEmphasisMark {\n    constructor(emphasisMarkType = EmphasisMarkType.DOT){\n        super(emphasisMarkType);\n    }\n}\nclass DotEmphasisMark extends BaseEmphasisMark {\n    constructor(){\n        super(EmphasisMarkType.DOT);\n    }\n}\nclass CharacterSpacing extends XmlComponent {\n    constructor(value){\n        super(\"w:spacing\");\n        this.root.push(new Attributes({\n            val: signedTwipsMeasureValue(value)\n        }));\n    }\n}\nclass Color extends XmlComponent {\n    constructor(color){\n        super(\"w:color\");\n        this.root.push(new Attributes({\n            val: hexColorValue(color)\n        }));\n    }\n}\nclass Highlight extends XmlComponent {\n    constructor(color){\n        super(\"w:highlight\");\n        this.root.push(new Attributes({\n            val: color\n        }));\n    }\n}\nclass HighlightComplexScript extends XmlComponent {\n    constructor(color){\n        super(\"w:highlightCs\");\n        this.root.push(new Attributes({\n            val: color\n        }));\n    }\n}\nconst createLanguageComponent = (options)=>new BuilderElement({\n        name: \"w:lang\",\n        attributes: {\n            value: {\n                key: \"w:val\",\n                value: options.value\n            },\n            eastAsia: {\n                key: \"w:eastAsia\",\n                value: options.eastAsia\n            },\n            bidirectional: {\n                key: \"w:bidi\",\n                value: options.bidirectional\n            }\n        }\n    });\nclass RunFontAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            ascii: \"w:ascii\",\n            cs: \"w:cs\",\n            eastAsia: \"w:eastAsia\",\n            hAnsi: \"w:hAnsi\",\n            hint: \"w:hint\"\n        });\n    }\n}\nclass RunFonts extends XmlComponent {\n    constructor(nameOrAttrs, hint){\n        super(\"w:rFonts\");\n        if (typeof nameOrAttrs === \"string\") {\n            const name = nameOrAttrs;\n            this.root.push(new RunFontAttributes({\n                ascii: name,\n                cs: name,\n                eastAsia: name,\n                hAnsi: name,\n                hint\n            }));\n        } else {\n            const attrs = nameOrAttrs;\n            this.root.push(new RunFontAttributes(attrs));\n        }\n    }\n}\nlet VerticalAlign$1 = class VerticalAlign extends XmlComponent {\n    constructor(type2){\n        super(\"w:vertAlign\");\n        this.root.push(new Attributes({\n            val: type2\n        }));\n    }\n};\nclass SuperScript extends VerticalAlign$1 {\n    constructor(){\n        super(\"superscript\");\n    }\n}\nclass SubScript extends VerticalAlign$1 {\n    constructor(){\n        super(\"subscript\");\n    }\n}\nconst UnderlineType = {\n    SINGLE: \"single\",\n    WORDS: \"words\",\n    DOUBLE: \"double\",\n    THICK: \"thick\",\n    DOTTED: \"dotted\",\n    DOTTEDHEAVY: \"dottedHeavy\",\n    DASH: \"dash\",\n    DASHEDHEAVY: \"dashedHeavy\",\n    DASHLONG: \"dashLong\",\n    DASHLONGHEAVY: \"dashLongHeavy\",\n    DOTDASH: \"dotDash\",\n    DASHDOTHEAVY: \"dashDotHeavy\",\n    DOTDOTDASH: \"dotDotDash\",\n    DASHDOTDOTHEAVY: \"dashDotDotHeavy\",\n    WAVE: \"wave\",\n    WAVYHEAVY: \"wavyHeavy\",\n    WAVYDOUBLE: \"wavyDouble\",\n    NONE: \"none\"\n};\nclass Underline extends XmlComponent {\n    constructor(underlineType = UnderlineType.SINGLE, color){\n        super(\"w:u\");\n        this.root.push(new Attributes({\n            val: underlineType,\n            color: color === void 0 ? void 0 : hexColorValue(color)\n        }));\n    }\n}\nconst TextEffect = {\n    BLINK_BACKGROUND: \"blinkBackground\",\n    LIGHTS: \"lights\",\n    ANTS_BLACK: \"antsBlack\",\n    ANTS_RED: \"antsRed\",\n    SHIMMER: \"shimmer\",\n    SPARKLE: \"sparkle\",\n    NONE: \"none\"\n};\nconst HighlightColor = {\n    BLACK: \"black\",\n    BLUE: \"blue\",\n    CYAN: \"cyan\",\n    DARK_BLUE: \"darkBlue\",\n    DARK_CYAN: \"darkCyan\",\n    DARK_GRAY: \"darkGray\",\n    DARK_GREEN: \"darkGreen\",\n    DARK_MAGENTA: \"darkMagenta\",\n    DARK_RED: \"darkRed\",\n    DARK_YELLOW: \"darkYellow\",\n    GREEN: \"green\",\n    LIGHT_GRAY: \"lightGray\",\n    MAGENTA: \"magenta\",\n    NONE: \"none\",\n    RED: \"red\",\n    WHITE: \"white\",\n    YELLOW: \"yellow\"\n};\nclass RunProperties extends IgnoreIfEmptyXmlComponent {\n    constructor(options){\n        var _a, _b;\n        super(\"w:rPr\");\n        if (!options) {\n            return;\n        }\n        if (options.style) {\n            this.push(new StringValueElement(\"w:rStyle\", options.style));\n        }\n        if (options.font) {\n            if (typeof options.font === \"string\") {\n                this.push(new RunFonts(options.font));\n            } else if (\"name\" in options.font) {\n                this.push(new RunFonts(options.font.name, options.font.hint));\n            } else {\n                this.push(new RunFonts(options.font));\n            }\n        }\n        if (options.bold !== void 0) {\n            this.push(new OnOffElement(\"w:b\", options.bold));\n        }\n        if (options.boldComplexScript === void 0 && options.bold !== void 0 || options.boldComplexScript) {\n            this.push(new OnOffElement(\"w:bCs\", (_a = options.boldComplexScript) != null ? _a : options.bold));\n        }\n        if (options.italics !== void 0) {\n            this.push(new OnOffElement(\"w:i\", options.italics));\n        }\n        if (options.italicsComplexScript === void 0 && options.italics !== void 0 || options.italicsComplexScript) {\n            this.push(new OnOffElement(\"w:iCs\", (_b = options.italicsComplexScript) != null ? _b : options.italics));\n        }\n        if (options.smallCaps !== void 0) {\n            this.push(new OnOffElement(\"w:smallCaps\", options.smallCaps));\n        } else if (options.allCaps !== void 0) {\n            this.push(new OnOffElement(\"w:caps\", options.allCaps));\n        }\n        if (options.strike !== void 0) {\n            this.push(new OnOffElement(\"w:strike\", options.strike));\n        }\n        if (options.doubleStrike !== void 0) {\n            this.push(new OnOffElement(\"w:dstrike\", options.doubleStrike));\n        }\n        if (options.emboss !== void 0) {\n            this.push(new OnOffElement(\"w:emboss\", options.emboss));\n        }\n        if (options.imprint !== void 0) {\n            this.push(new OnOffElement(\"w:imprint\", options.imprint));\n        }\n        if (options.noProof !== void 0) {\n            this.push(new OnOffElement(\"w:noProof\", options.noProof));\n        }\n        if (options.snapToGrid !== void 0) {\n            this.push(new OnOffElement(\"w:snapToGrid\", options.snapToGrid));\n        }\n        if (options.vanish) {\n            this.push(new OnOffElement(\"w:vanish\", options.vanish));\n        }\n        if (options.color) {\n            this.push(new Color(options.color));\n        }\n        if (options.characterSpacing) {\n            this.push(new CharacterSpacing(options.characterSpacing));\n        }\n        if (options.scale !== void 0) {\n            this.push(new NumberValueElement(\"w:w\", options.scale));\n        }\n        if (options.kern) {\n            this.push(new HpsMeasureElement(\"w:kern\", options.kern));\n        }\n        if (options.position) {\n            this.push(new StringValueElement(\"w:position\", options.position));\n        }\n        if (options.size !== void 0) {\n            this.push(new HpsMeasureElement(\"w:sz\", options.size));\n        }\n        const szCs = options.sizeComplexScript === void 0 || options.sizeComplexScript === true ? options.size : options.sizeComplexScript;\n        if (szCs) {\n            this.push(new HpsMeasureElement(\"w:szCs\", szCs));\n        }\n        if (options.highlight) {\n            this.push(new Highlight(options.highlight));\n        }\n        const highlightCs = options.highlightComplexScript === void 0 || options.highlightComplexScript === true ? options.highlight : options.highlightComplexScript;\n        if (highlightCs) {\n            this.push(new HighlightComplexScript(highlightCs));\n        }\n        if (options.underline) {\n            this.push(new Underline(options.underline.type, options.underline.color));\n        }\n        if (options.effect) {\n            this.push(new StringValueElement(\"w:effect\", options.effect));\n        }\n        if (options.border) {\n            this.push(new BorderElement(\"w:bdr\", options.border));\n        }\n        if (options.shading) {\n            this.push(new Shading(options.shading));\n        }\n        if (options.subScript) {\n            this.push(new SubScript());\n        }\n        if (options.superScript) {\n            this.push(new SuperScript());\n        }\n        if (options.rightToLeft !== void 0) {\n            this.push(new OnOffElement(\"w:rtl\", options.rightToLeft));\n        }\n        if (options.emphasisMark) {\n            this.push(new EmphasisMark(options.emphasisMark.type));\n        }\n        if (options.language) {\n            this.push(createLanguageComponent(options.language));\n        }\n        if (options.specVanish) {\n            this.push(new OnOffElement(\"w:specVanish\", options.vanish));\n        }\n        if (options.math) {\n            this.push(new OnOffElement(\"w:oMath\", options.math));\n        }\n        if (options.revision) {\n            this.push(new RunPropertiesChange(options.revision));\n        }\n    }\n    push(item) {\n        this.root.push(item);\n    }\n}\nclass RunPropertiesChange extends XmlComponent {\n    constructor(options){\n        super(\"w:rPrChange\");\n        this.root.push(new ChangeAttributes({\n            id: options.id,\n            author: options.author,\n            date: options.date\n        }));\n        this.addChildElement(new RunProperties(options));\n    }\n}\nclass Text extends XmlComponent {\n    constructor(options){\n        var _a;\n        super(\"w:t\");\n        if (typeof options === \"string\") {\n            this.root.push(new TextAttributes({\n                space: SpaceType.PRESERVE\n            }));\n            this.root.push(options);\n        } else {\n            this.root.push(new TextAttributes({\n                space: (_a = options.space) != null ? _a : SpaceType.DEFAULT\n            }));\n            this.root.push(options.text);\n        }\n    }\n}\nconst PageNumber = {\n    CURRENT: \"CURRENT\",\n    TOTAL_PAGES: \"TOTAL_PAGES\",\n    TOTAL_PAGES_IN_SECTION: \"TOTAL_PAGES_IN_SECTION\",\n    CURRENT_SECTION: \"SECTION\"\n};\nclass Run extends XmlComponent {\n    constructor(options){\n        super(\"w:r\");\n        __publicField(this, \"properties\");\n        this.properties = new RunProperties(options);\n        this.root.push(this.properties);\n        if (options.break) {\n            for(let i = 0; i < options.break; i++){\n                this.root.push(new Break$1());\n            }\n        }\n        if (options.children) {\n            for (const child of options.children){\n                if (typeof child === \"string\") {\n                    switch(child){\n                        case PageNumber.CURRENT:\n                            this.root.push(new Begin());\n                            this.root.push(new Page());\n                            this.root.push(new Separate());\n                            this.root.push(new End());\n                            break;\n                        case PageNumber.TOTAL_PAGES:\n                            this.root.push(new Begin());\n                            this.root.push(new NumberOfPages());\n                            this.root.push(new Separate());\n                            this.root.push(new End());\n                            break;\n                        case PageNumber.TOTAL_PAGES_IN_SECTION:\n                            this.root.push(new Begin());\n                            this.root.push(new NumberOfPagesSection());\n                            this.root.push(new Separate());\n                            this.root.push(new End());\n                            break;\n                        case PageNumber.CURRENT_SECTION:\n                            this.root.push(new Begin());\n                            this.root.push(new CurrentSection());\n                            this.root.push(new Separate());\n                            this.root.push(new End());\n                            break;\n                        default:\n                            this.root.push(new Text(child));\n                            break;\n                    }\n                    continue;\n                }\n                this.root.push(child);\n            }\n        } else if (options.text !== void 0) {\n            this.root.push(new Text(options.text));\n        }\n    }\n}\nclass TextRun extends Run {\n    constructor(options){\n        super(typeof options === \"string\" ? {\n            text: options\n        } : options);\n    }\n}\nclass SymbolAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            char: \"w:char\",\n            symbolfont: \"w:font\"\n        });\n    }\n}\nlet Symbol$1 = class Symbol2 extends XmlComponent {\n    constructor(char = \"\", symbolfont = \"Wingdings\"){\n        super(\"w:sym\");\n        this.root.push(new SymbolAttributes({\n            char,\n            symbolfont\n        }));\n    }\n};\nclass SymbolRun extends Run {\n    constructor(options){\n        if (typeof options === \"string\") {\n            super({});\n            this.root.push(new Symbol$1(options));\n            return this;\n        }\n        super(options);\n        this.root.push(new Symbol$1(options.char, options.symbolfont));\n    }\n}\nvar hash$1 = {};\nvar utils = {};\nvar minimalisticAssert;\nvar hasRequiredMinimalisticAssert;\nfunction requireMinimalisticAssert() {\n    if (hasRequiredMinimalisticAssert) return minimalisticAssert;\n    hasRequiredMinimalisticAssert = 1;\n    minimalisticAssert = assert;\n    function assert(val, msg) {\n        if (!val) throw new Error(msg || \"Assertion failed\");\n    }\n    assert.equal = function assertEqual(l, r, msg) {\n        if (l != r) throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n    };\n    return minimalisticAssert;\n}\nvar hasRequiredUtils;\nfunction requireUtils() {\n    if (hasRequiredUtils) return utils;\n    hasRequiredUtils = 1;\n    var assert = requireMinimalisticAssert();\n    var inherits = requireInherits_browser();\n    utils.inherits = inherits;\n    function isSurrogatePair(msg, i) {\n        if ((msg.charCodeAt(i) & 64512) !== 55296) {\n            return false;\n        }\n        if (i < 0 || i + 1 >= msg.length) {\n            return false;\n        }\n        return (msg.charCodeAt(i + 1) & 64512) === 56320;\n    }\n    function toArray(msg, enc) {\n        if (Array.isArray(msg)) return msg.slice();\n        if (!msg) return [];\n        var res = [];\n        if (typeof msg === \"string\") {\n            if (!enc) {\n                var p = 0;\n                for(var i = 0; i < msg.length; i++){\n                    var c = msg.charCodeAt(i);\n                    if (c < 128) {\n                        res[p++] = c;\n                    } else if (c < 2048) {\n                        res[p++] = c >> 6 | 192;\n                        res[p++] = c & 63 | 128;\n                    } else if (isSurrogatePair(msg, i)) {\n                        c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);\n                        res[p++] = c >> 18 | 240;\n                        res[p++] = c >> 12 & 63 | 128;\n                        res[p++] = c >> 6 & 63 | 128;\n                        res[p++] = c & 63 | 128;\n                    } else {\n                        res[p++] = c >> 12 | 224;\n                        res[p++] = c >> 6 & 63 | 128;\n                        res[p++] = c & 63 | 128;\n                    }\n                }\n            } else if (enc === \"hex\") {\n                msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n                if (msg.length % 2 !== 0) msg = \"0\" + msg;\n                for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));\n            }\n        } else {\n            for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;\n        }\n        return res;\n    }\n    utils.toArray = toArray;\n    function toHex(msg) {\n        var res = \"\";\n        for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));\n        return res;\n    }\n    utils.toHex = toHex;\n    function htonl(w) {\n        var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;\n        return res >>> 0;\n    }\n    utils.htonl = htonl;\n    function toHex32(msg, endian) {\n        var res = \"\";\n        for(var i = 0; i < msg.length; i++){\n            var w = msg[i];\n            if (endian === \"little\") w = htonl(w);\n            res += zero8(w.toString(16));\n        }\n        return res;\n    }\n    utils.toHex32 = toHex32;\n    function zero2(word) {\n        if (word.length === 1) return \"0\" + word;\n        else return word;\n    }\n    utils.zero2 = zero2;\n    function zero8(word) {\n        if (word.length === 7) return \"0\" + word;\n        else if (word.length === 6) return \"00\" + word;\n        else if (word.length === 5) return \"000\" + word;\n        else if (word.length === 4) return \"0000\" + word;\n        else if (word.length === 3) return \"00000\" + word;\n        else if (word.length === 2) return \"000000\" + word;\n        else if (word.length === 1) return \"0000000\" + word;\n        else return word;\n    }\n    utils.zero8 = zero8;\n    function join32(msg, start, end, endian) {\n        var len = end - start;\n        assert(len % 4 === 0);\n        var res = new Array(len / 4);\n        for(var i = 0, k = start; i < res.length; i++, k += 4){\n            var w;\n            if (endian === \"big\") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n            else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n            res[i] = w >>> 0;\n        }\n        return res;\n    }\n    utils.join32 = join32;\n    function split32(msg, endian) {\n        var res = new Array(msg.length * 4);\n        for(var i = 0, k = 0; i < msg.length; i++, k += 4){\n            var m = msg[i];\n            if (endian === \"big\") {\n                res[k] = m >>> 24;\n                res[k + 1] = m >>> 16 & 255;\n                res[k + 2] = m >>> 8 & 255;\n                res[k + 3] = m & 255;\n            } else {\n                res[k + 3] = m >>> 24;\n                res[k + 2] = m >>> 16 & 255;\n                res[k + 1] = m >>> 8 & 255;\n                res[k] = m & 255;\n            }\n        }\n        return res;\n    }\n    utils.split32 = split32;\n    function rotr32(w, b) {\n        return w >>> b | w << 32 - b;\n    }\n    utils.rotr32 = rotr32;\n    function rotl32(w, b) {\n        return w << b | w >>> 32 - b;\n    }\n    utils.rotl32 = rotl32;\n    function sum32(a, b) {\n        return a + b >>> 0;\n    }\n    utils.sum32 = sum32;\n    function sum32_3(a, b, c) {\n        return a + b + c >>> 0;\n    }\n    utils.sum32_3 = sum32_3;\n    function sum32_4(a, b, c, d) {\n        return a + b + c + d >>> 0;\n    }\n    utils.sum32_4 = sum32_4;\n    function sum32_5(a, b, c, d, e) {\n        return a + b + c + d + e >>> 0;\n    }\n    utils.sum32_5 = sum32_5;\n    function sum64(buf, pos, ah, al) {\n        var bh = buf[pos];\n        var bl = buf[pos + 1];\n        var lo = al + bl >>> 0;\n        var hi = (lo < al ? 1 : 0) + ah + bh;\n        buf[pos] = hi >>> 0;\n        buf[pos + 1] = lo;\n    }\n    utils.sum64 = sum64;\n    function sum64_hi(ah, al, bh, bl) {\n        var lo = al + bl >>> 0;\n        var hi = (lo < al ? 1 : 0) + ah + bh;\n        return hi >>> 0;\n    }\n    utils.sum64_hi = sum64_hi;\n    function sum64_lo(ah, al, bh, bl) {\n        var lo = al + bl;\n        return lo >>> 0;\n    }\n    utils.sum64_lo = sum64_lo;\n    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n        var carry = 0;\n        var lo = al;\n        lo = lo + bl >>> 0;\n        carry += lo < al ? 1 : 0;\n        lo = lo + cl >>> 0;\n        carry += lo < cl ? 1 : 0;\n        lo = lo + dl >>> 0;\n        carry += lo < dl ? 1 : 0;\n        var hi = ah + bh + ch + dh + carry;\n        return hi >>> 0;\n    }\n    utils.sum64_4_hi = sum64_4_hi;\n    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n        var lo = al + bl + cl + dl;\n        return lo >>> 0;\n    }\n    utils.sum64_4_lo = sum64_4_lo;\n    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n        var carry = 0;\n        var lo = al;\n        lo = lo + bl >>> 0;\n        carry += lo < al ? 1 : 0;\n        lo = lo + cl >>> 0;\n        carry += lo < cl ? 1 : 0;\n        lo = lo + dl >>> 0;\n        carry += lo < dl ? 1 : 0;\n        lo = lo + el >>> 0;\n        carry += lo < el ? 1 : 0;\n        var hi = ah + bh + ch + dh + eh + carry;\n        return hi >>> 0;\n    }\n    utils.sum64_5_hi = sum64_5_hi;\n    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n        var lo = al + bl + cl + dl + el;\n        return lo >>> 0;\n    }\n    utils.sum64_5_lo = sum64_5_lo;\n    function rotr64_hi(ah, al, num) {\n        var r = al << 32 - num | ah >>> num;\n        return r >>> 0;\n    }\n    utils.rotr64_hi = rotr64_hi;\n    function rotr64_lo(ah, al, num) {\n        var r = ah << 32 - num | al >>> num;\n        return r >>> 0;\n    }\n    utils.rotr64_lo = rotr64_lo;\n    function shr64_hi(ah, al, num) {\n        return ah >>> num;\n    }\n    utils.shr64_hi = shr64_hi;\n    function shr64_lo(ah, al, num) {\n        var r = ah << 32 - num | al >>> num;\n        return r >>> 0;\n    }\n    utils.shr64_lo = shr64_lo;\n    return utils;\n}\nvar common$1 = {};\nvar hasRequiredCommon$1;\nfunction requireCommon$1() {\n    if (hasRequiredCommon$1) return common$1;\n    hasRequiredCommon$1 = 1;\n    var utils2 = requireUtils();\n    var assert = requireMinimalisticAssert();\n    function BlockHash() {\n        this.pending = null;\n        this.pendingTotal = 0;\n        this.blockSize = this.constructor.blockSize;\n        this.outSize = this.constructor.outSize;\n        this.hmacStrength = this.constructor.hmacStrength;\n        this.padLength = this.constructor.padLength / 8;\n        this.endian = \"big\";\n        this._delta8 = this.blockSize / 8;\n        this._delta32 = this.blockSize / 32;\n    }\n    common$1.BlockHash = BlockHash;\n    BlockHash.prototype.update = function update(msg, enc) {\n        msg = utils2.toArray(msg, enc);\n        if (!this.pending) this.pending = msg;\n        else this.pending = this.pending.concat(msg);\n        this.pendingTotal += msg.length;\n        if (this.pending.length >= this._delta8) {\n            msg = this.pending;\n            var r = msg.length % this._delta8;\n            this.pending = msg.slice(msg.length - r, msg.length);\n            if (this.pending.length === 0) this.pending = null;\n            msg = utils2.join32(msg, 0, msg.length - r, this.endian);\n            for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);\n        }\n        return this;\n    };\n    BlockHash.prototype.digest = function digest(enc) {\n        this.update(this._pad());\n        assert(this.pending === null);\n        return this._digest(enc);\n    };\n    BlockHash.prototype._pad = function pad() {\n        var len = this.pendingTotal;\n        var bytes = this._delta8;\n        var k = bytes - (len + this.padLength) % bytes;\n        var res = new Array(k + this.padLength);\n        res[0] = 128;\n        for(var i = 1; i < k; i++)res[i] = 0;\n        len <<= 3;\n        if (this.endian === \"big\") {\n            for(var t = 8; t < this.padLength; t++)res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = len >>> 24 & 255;\n            res[i++] = len >>> 16 & 255;\n            res[i++] = len >>> 8 & 255;\n            res[i++] = len & 255;\n        } else {\n            res[i++] = len & 255;\n            res[i++] = len >>> 8 & 255;\n            res[i++] = len >>> 16 & 255;\n            res[i++] = len >>> 24 & 255;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            res[i++] = 0;\n            for(t = 8; t < this.padLength; t++)res[i++] = 0;\n        }\n        return res;\n    };\n    return common$1;\n}\nvar sha = {};\nvar common = {};\nvar hasRequiredCommon;\nfunction requireCommon() {\n    if (hasRequiredCommon) return common;\n    hasRequiredCommon = 1;\n    var utils2 = requireUtils();\n    var rotr32 = utils2.rotr32;\n    function ft_1(s, x, y, z) {\n        if (s === 0) return ch32(x, y, z);\n        if (s === 1 || s === 3) return p32(x, y, z);\n        if (s === 2) return maj32(x, y, z);\n    }\n    common.ft_1 = ft_1;\n    function ch32(x, y, z) {\n        return x & y ^ ~x & z;\n    }\n    common.ch32 = ch32;\n    function maj32(x, y, z) {\n        return x & y ^ x & z ^ y & z;\n    }\n    common.maj32 = maj32;\n    function p32(x, y, z) {\n        return x ^ y ^ z;\n    }\n    common.p32 = p32;\n    function s0_256(x) {\n        return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n    }\n    common.s0_256 = s0_256;\n    function s1_256(x) {\n        return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n    }\n    common.s1_256 = s1_256;\n    function g0_256(x) {\n        return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n    }\n    common.g0_256 = g0_256;\n    function g1_256(x) {\n        return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n    }\n    common.g1_256 = g1_256;\n    return common;\n}\nvar _1;\nvar hasRequired_1;\nfunction require_1() {\n    if (hasRequired_1) return _1;\n    hasRequired_1 = 1;\n    var utils2 = requireUtils();\n    var common2 = requireCommon$1();\n    var shaCommon = requireCommon();\n    var rotl32 = utils2.rotl32;\n    var sum32 = utils2.sum32;\n    var sum32_5 = utils2.sum32_5;\n    var ft_1 = shaCommon.ft_1;\n    var BlockHash = common2.BlockHash;\n    var sha1_K = [\n        1518500249,\n        1859775393,\n        2400959708,\n        3395469782\n    ];\n    function SHA1() {\n        if (!(this instanceof SHA1)) return new SHA1();\n        BlockHash.call(this);\n        this.h = [\n            1732584193,\n            4023233417,\n            2562383102,\n            271733878,\n            3285377520\n        ];\n        this.W = new Array(80);\n    }\n    utils2.inherits(SHA1, BlockHash);\n    _1 = SHA1;\n    SHA1.blockSize = 512;\n    SHA1.outSize = 160;\n    SHA1.hmacStrength = 80;\n    SHA1.padLength = 64;\n    SHA1.prototype._update = function _update(msg, start) {\n        var W = this.W;\n        for(var i = 0; i < 16; i++)W[i] = msg[start + i];\n        for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n        var a = this.h[0];\n        var b = this.h[1];\n        var c = this.h[2];\n        var d = this.h[3];\n        var e = this.h[4];\n        for(i = 0; i < W.length; i++){\n            var s = ~~(i / 20);\n            var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n            e = d;\n            d = c;\n            c = rotl32(b, 30);\n            b = a;\n            a = t;\n        }\n        this.h[0] = sum32(this.h[0], a);\n        this.h[1] = sum32(this.h[1], b);\n        this.h[2] = sum32(this.h[2], c);\n        this.h[3] = sum32(this.h[3], d);\n        this.h[4] = sum32(this.h[4], e);\n    };\n    SHA1.prototype._digest = function digest(enc) {\n        if (enc === \"hex\") return utils2.toHex32(this.h, \"big\");\n        else return utils2.split32(this.h, \"big\");\n    };\n    return _1;\n}\nvar _256;\nvar hasRequired_256;\nfunction require_256() {\n    if (hasRequired_256) return _256;\n    hasRequired_256 = 1;\n    var utils2 = requireUtils();\n    var common2 = requireCommon$1();\n    var shaCommon = requireCommon();\n    var assert = requireMinimalisticAssert();\n    var sum32 = utils2.sum32;\n    var sum32_4 = utils2.sum32_4;\n    var sum32_5 = utils2.sum32_5;\n    var ch32 = shaCommon.ch32;\n    var maj32 = shaCommon.maj32;\n    var s0_256 = shaCommon.s0_256;\n    var s1_256 = shaCommon.s1_256;\n    var g0_256 = shaCommon.g0_256;\n    var g1_256 = shaCommon.g1_256;\n    var BlockHash = common2.BlockHash;\n    var sha256_K = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n    ];\n    function SHA256() {\n        if (!(this instanceof SHA256)) return new SHA256();\n        BlockHash.call(this);\n        this.h = [\n            1779033703,\n            3144134277,\n            1013904242,\n            2773480762,\n            1359893119,\n            2600822924,\n            528734635,\n            1541459225\n        ];\n        this.k = sha256_K;\n        this.W = new Array(64);\n    }\n    utils2.inherits(SHA256, BlockHash);\n    _256 = SHA256;\n    SHA256.blockSize = 512;\n    SHA256.outSize = 256;\n    SHA256.hmacStrength = 192;\n    SHA256.padLength = 64;\n    SHA256.prototype._update = function _update(msg, start) {\n        var W = this.W;\n        for(var i = 0; i < 16; i++)W[i] = msg[start + i];\n        for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n        var a = this.h[0];\n        var b = this.h[1];\n        var c = this.h[2];\n        var d = this.h[3];\n        var e = this.h[4];\n        var f = this.h[5];\n        var g = this.h[6];\n        var h = this.h[7];\n        assert(this.k.length === W.length);\n        for(i = 0; i < W.length; i++){\n            var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n            var T2 = sum32(s0_256(a), maj32(a, b, c));\n            h = g;\n            g = f;\n            f = e;\n            e = sum32(d, T1);\n            d = c;\n            c = b;\n            b = a;\n            a = sum32(T1, T2);\n        }\n        this.h[0] = sum32(this.h[0], a);\n        this.h[1] = sum32(this.h[1], b);\n        this.h[2] = sum32(this.h[2], c);\n        this.h[3] = sum32(this.h[3], d);\n        this.h[4] = sum32(this.h[4], e);\n        this.h[5] = sum32(this.h[5], f);\n        this.h[6] = sum32(this.h[6], g);\n        this.h[7] = sum32(this.h[7], h);\n    };\n    SHA256.prototype._digest = function digest(enc) {\n        if (enc === \"hex\") return utils2.toHex32(this.h, \"big\");\n        else return utils2.split32(this.h, \"big\");\n    };\n    return _256;\n}\nvar _224;\nvar hasRequired_224;\nfunction require_224() {\n    if (hasRequired_224) return _224;\n    hasRequired_224 = 1;\n    var utils2 = requireUtils();\n    var SHA256 = require_256();\n    function SHA224() {\n        if (!(this instanceof SHA224)) return new SHA224();\n        SHA256.call(this);\n        this.h = [\n            3238371032,\n            914150663,\n            812702999,\n            4144912697,\n            4290775857,\n            1750603025,\n            1694076839,\n            3204075428\n        ];\n    }\n    utils2.inherits(SHA224, SHA256);\n    _224 = SHA224;\n    SHA224.blockSize = 512;\n    SHA224.outSize = 224;\n    SHA224.hmacStrength = 192;\n    SHA224.padLength = 64;\n    SHA224.prototype._digest = function digest(enc) {\n        if (enc === \"hex\") return utils2.toHex32(this.h.slice(0, 7), \"big\");\n        else return utils2.split32(this.h.slice(0, 7), \"big\");\n    };\n    return _224;\n}\nvar _512;\nvar hasRequired_512;\nfunction require_512() {\n    if (hasRequired_512) return _512;\n    hasRequired_512 = 1;\n    var utils2 = requireUtils();\n    var common2 = requireCommon$1();\n    var assert = requireMinimalisticAssert();\n    var rotr64_hi = utils2.rotr64_hi;\n    var rotr64_lo = utils2.rotr64_lo;\n    var shr64_hi = utils2.shr64_hi;\n    var shr64_lo = utils2.shr64_lo;\n    var sum64 = utils2.sum64;\n    var sum64_hi = utils2.sum64_hi;\n    var sum64_lo = utils2.sum64_lo;\n    var sum64_4_hi = utils2.sum64_4_hi;\n    var sum64_4_lo = utils2.sum64_4_lo;\n    var sum64_5_hi = utils2.sum64_5_hi;\n    var sum64_5_lo = utils2.sum64_5_lo;\n    var BlockHash = common2.BlockHash;\n    var sha512_K = [\n        1116352408,\n        3609767458,\n        1899447441,\n        602891725,\n        3049323471,\n        3964484399,\n        3921009573,\n        2173295548,\n        961987163,\n        4081628472,\n        1508970993,\n        3053834265,\n        2453635748,\n        2937671579,\n        2870763221,\n        3664609560,\n        3624381080,\n        2734883394,\n        310598401,\n        1164996542,\n        607225278,\n        1323610764,\n        1426881987,\n        3590304994,\n        1925078388,\n        4068182383,\n        2162078206,\n        991336113,\n        2614888103,\n        633803317,\n        3248222580,\n        3479774868,\n        3835390401,\n        2666613458,\n        4022224774,\n        944711139,\n        264347078,\n        2341262773,\n        604807628,\n        2007800933,\n        770255983,\n        1495990901,\n        1249150122,\n        1856431235,\n        1555081692,\n        3175218132,\n        1996064986,\n        2198950837,\n        2554220882,\n        3999719339,\n        2821834349,\n        766784016,\n        2952996808,\n        2566594879,\n        3210313671,\n        3203337956,\n        3336571891,\n        1034457026,\n        3584528711,\n        2466948901,\n        113926993,\n        3758326383,\n        338241895,\n        168717936,\n        666307205,\n        1188179964,\n        773529912,\n        1546045734,\n        1294757372,\n        1522805485,\n        1396182291,\n        2643833823,\n        1695183700,\n        2343527390,\n        1986661051,\n        1014477480,\n        2177026350,\n        1206759142,\n        2456956037,\n        344077627,\n        2730485921,\n        1290863460,\n        2820302411,\n        3158454273,\n        3259730800,\n        3505952657,\n        3345764771,\n        106217008,\n        3516065817,\n        3606008344,\n        3600352804,\n        1432725776,\n        4094571909,\n        1467031594,\n        275423344,\n        851169720,\n        430227734,\n        3100823752,\n        506948616,\n        1363258195,\n        659060556,\n        3750685593,\n        883997877,\n        3785050280,\n        958139571,\n        3318307427,\n        1322822218,\n        3812723403,\n        1537002063,\n        2003034995,\n        1747873779,\n        3602036899,\n        1955562222,\n        1575990012,\n        2024104815,\n        1125592928,\n        2227730452,\n        2716904306,\n        2361852424,\n        442776044,\n        2428436474,\n        593698344,\n        2756734187,\n        3733110249,\n        3204031479,\n        2999351573,\n        3329325298,\n        3815920427,\n        3391569614,\n        3928383900,\n        3515267271,\n        566280711,\n        3940187606,\n        3454069534,\n        4118630271,\n        4000239992,\n        116418474,\n        1914138554,\n        174292421,\n        2731055270,\n        289380356,\n        3203993006,\n        460393269,\n        320620315,\n        685471733,\n        587496836,\n        852142971,\n        1086792851,\n        1017036298,\n        365543100,\n        1126000580,\n        2618297676,\n        1288033470,\n        3409855158,\n        1501505948,\n        4234509866,\n        1607167915,\n        987167468,\n        1816402316,\n        1246189591\n    ];\n    function SHA512() {\n        if (!(this instanceof SHA512)) return new SHA512();\n        BlockHash.call(this);\n        this.h = [\n            1779033703,\n            4089235720,\n            3144134277,\n            2227873595,\n            1013904242,\n            4271175723,\n            2773480762,\n            1595750129,\n            1359893119,\n            2917565137,\n            2600822924,\n            725511199,\n            528734635,\n            4215389547,\n            1541459225,\n            327033209\n        ];\n        this.k = sha512_K;\n        this.W = new Array(160);\n    }\n    utils2.inherits(SHA512, BlockHash);\n    _512 = SHA512;\n    SHA512.blockSize = 1024;\n    SHA512.outSize = 512;\n    SHA512.hmacStrength = 192;\n    SHA512.padLength = 128;\n    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n        var W = this.W;\n        for(var i = 0; i < 32; i++)W[i] = msg[start + i];\n        for(; i < W.length; i += 2){\n            var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);\n            var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n            var c1_hi = W[i - 14];\n            var c1_lo = W[i - 13];\n            var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);\n            var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n            var c3_hi = W[i - 32];\n            var c3_lo = W[i - 31];\n            W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n            W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n        }\n    };\n    SHA512.prototype._update = function _update(msg, start) {\n        this._prepareBlock(msg, start);\n        var W = this.W;\n        var ah = this.h[0];\n        var al = this.h[1];\n        var bh = this.h[2];\n        var bl = this.h[3];\n        var ch = this.h[4];\n        var cl = this.h[5];\n        var dh = this.h[6];\n        var dl = this.h[7];\n        var eh = this.h[8];\n        var el = this.h[9];\n        var fh = this.h[10];\n        var fl = this.h[11];\n        var gh = this.h[12];\n        var gl = this.h[13];\n        var hh = this.h[14];\n        var hl = this.h[15];\n        assert(this.k.length === W.length);\n        for(var i = 0; i < W.length; i += 2){\n            var c0_hi = hh;\n            var c0_lo = hl;\n            var c1_hi = s1_512_hi(eh, el);\n            var c1_lo = s1_512_lo(eh, el);\n            var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n            var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n            var c3_hi = this.k[i];\n            var c3_lo = this.k[i + 1];\n            var c4_hi = W[i];\n            var c4_lo = W[i + 1];\n            var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n            var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n            c0_hi = s0_512_hi(ah, al);\n            c0_lo = s0_512_lo(ah, al);\n            c1_hi = maj64_hi(ah, al, bh, bl, ch);\n            c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n            var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n            var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n            hh = gh;\n            hl = gl;\n            gh = fh;\n            gl = fl;\n            fh = eh;\n            fl = el;\n            eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n            el = sum64_lo(dl, dl, T1_hi, T1_lo);\n            dh = ch;\n            dl = cl;\n            ch = bh;\n            cl = bl;\n            bh = ah;\n            bl = al;\n            ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n            al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n        }\n        sum64(this.h, 0, ah, al);\n        sum64(this.h, 2, bh, bl);\n        sum64(this.h, 4, ch, cl);\n        sum64(this.h, 6, dh, dl);\n        sum64(this.h, 8, eh, el);\n        sum64(this.h, 10, fh, fl);\n        sum64(this.h, 12, gh, gl);\n        sum64(this.h, 14, hh, hl);\n    };\n    SHA512.prototype._digest = function digest(enc) {\n        if (enc === \"hex\") return utils2.toHex32(this.h, \"big\");\n        else return utils2.split32(this.h, \"big\");\n    };\n    function ch64_hi(xh, xl, yh, yl, zh) {\n        var r = xh & yh ^ ~xh & zh;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function ch64_lo(xh, xl, yh, yl, zh, zl) {\n        var r = xl & yl ^ ~xl & zl;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function maj64_hi(xh, xl, yh, yl, zh) {\n        var r = xh & yh ^ xh & zh ^ yh & zh;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function maj64_lo(xh, xl, yh, yl, zh, zl) {\n        var r = xl & yl ^ xl & zl ^ yl & zl;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function s0_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 28);\n        var c1_hi = rotr64_hi(xl, xh, 2);\n        var c2_hi = rotr64_hi(xl, xh, 7);\n        var r = c0_hi ^ c1_hi ^ c2_hi;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function s0_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 28);\n        var c1_lo = rotr64_lo(xl, xh, 2);\n        var c2_lo = rotr64_lo(xl, xh, 7);\n        var r = c0_lo ^ c1_lo ^ c2_lo;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function s1_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 14);\n        var c1_hi = rotr64_hi(xh, xl, 18);\n        var c2_hi = rotr64_hi(xl, xh, 9);\n        var r = c0_hi ^ c1_hi ^ c2_hi;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function s1_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 14);\n        var c1_lo = rotr64_lo(xh, xl, 18);\n        var c2_lo = rotr64_lo(xl, xh, 9);\n        var r = c0_lo ^ c1_lo ^ c2_lo;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function g0_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 1);\n        var c1_hi = rotr64_hi(xh, xl, 8);\n        var c2_hi = shr64_hi(xh, xl, 7);\n        var r = c0_hi ^ c1_hi ^ c2_hi;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function g0_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 1);\n        var c1_lo = rotr64_lo(xh, xl, 8);\n        var c2_lo = shr64_lo(xh, xl, 7);\n        var r = c0_lo ^ c1_lo ^ c2_lo;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function g1_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 19);\n        var c1_hi = rotr64_hi(xl, xh, 29);\n        var c2_hi = shr64_hi(xh, xl, 6);\n        var r = c0_hi ^ c1_hi ^ c2_hi;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    function g1_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 19);\n        var c1_lo = rotr64_lo(xl, xh, 29);\n        var c2_lo = shr64_lo(xh, xl, 6);\n        var r = c0_lo ^ c1_lo ^ c2_lo;\n        if (r < 0) r += 4294967296;\n        return r;\n    }\n    return _512;\n}\nvar _384;\nvar hasRequired_384;\nfunction require_384() {\n    if (hasRequired_384) return _384;\n    hasRequired_384 = 1;\n    var utils2 = requireUtils();\n    var SHA512 = require_512();\n    function SHA384() {\n        if (!(this instanceof SHA384)) return new SHA384();\n        SHA512.call(this);\n        this.h = [\n            3418070365,\n            3238371032,\n            1654270250,\n            914150663,\n            2438529370,\n            812702999,\n            355462360,\n            4144912697,\n            1731405415,\n            4290775857,\n            2394180231,\n            1750603025,\n            3675008525,\n            1694076839,\n            1203062813,\n            3204075428\n        ];\n    }\n    utils2.inherits(SHA384, SHA512);\n    _384 = SHA384;\n    SHA384.blockSize = 1024;\n    SHA384.outSize = 384;\n    SHA384.hmacStrength = 192;\n    SHA384.padLength = 128;\n    SHA384.prototype._digest = function digest(enc) {\n        if (enc === \"hex\") return utils2.toHex32(this.h.slice(0, 12), \"big\");\n        else return utils2.split32(this.h.slice(0, 12), \"big\");\n    };\n    return _384;\n}\nvar hasRequiredSha;\nfunction requireSha() {\n    if (hasRequiredSha) return sha;\n    hasRequiredSha = 1;\n    sha.sha1 = require_1();\n    sha.sha224 = require_224();\n    sha.sha256 = require_256();\n    sha.sha384 = require_384();\n    sha.sha512 = require_512();\n    return sha;\n}\nvar ripemd = {};\nvar hasRequiredRipemd;\nfunction requireRipemd() {\n    if (hasRequiredRipemd) return ripemd;\n    hasRequiredRipemd = 1;\n    var utils2 = requireUtils();\n    var common2 = requireCommon$1();\n    var rotl32 = utils2.rotl32;\n    var sum32 = utils2.sum32;\n    var sum32_3 = utils2.sum32_3;\n    var sum32_4 = utils2.sum32_4;\n    var BlockHash = common2.BlockHash;\n    function RIPEMD160() {\n        if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n        BlockHash.call(this);\n        this.h = [\n            1732584193,\n            4023233417,\n            2562383102,\n            271733878,\n            3285377520\n        ];\n        this.endian = \"little\";\n    }\n    utils2.inherits(RIPEMD160, BlockHash);\n    ripemd.ripemd160 = RIPEMD160;\n    RIPEMD160.blockSize = 512;\n    RIPEMD160.outSize = 160;\n    RIPEMD160.hmacStrength = 192;\n    RIPEMD160.padLength = 64;\n    RIPEMD160.prototype._update = function update(msg, start) {\n        var A = this.h[0];\n        var B = this.h[1];\n        var C = this.h[2];\n        var D = this.h[3];\n        var E = this.h[4];\n        var Ah = A;\n        var Bh = B;\n        var Ch = C;\n        var Dh = D;\n        var Eh = E;\n        for(var j = 0; j < 80; j++){\n            var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n            A = E;\n            E = D;\n            D = rotl32(C, 10);\n            C = B;\n            B = T;\n            T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n            Ah = Eh;\n            Eh = Dh;\n            Dh = rotl32(Ch, 10);\n            Ch = Bh;\n            Bh = T;\n        }\n        T = sum32_3(this.h[1], C, Dh);\n        this.h[1] = sum32_3(this.h[2], D, Eh);\n        this.h[2] = sum32_3(this.h[3], E, Ah);\n        this.h[3] = sum32_3(this.h[4], A, Bh);\n        this.h[4] = sum32_3(this.h[0], B, Ch);\n        this.h[0] = T;\n    };\n    RIPEMD160.prototype._digest = function digest(enc) {\n        if (enc === \"hex\") return utils2.toHex32(this.h, \"little\");\n        else return utils2.split32(this.h, \"little\");\n    };\n    function f(j, x, y, z) {\n        if (j <= 15) return x ^ y ^ z;\n        else if (j <= 31) return x & y | ~x & z;\n        else if (j <= 47) return (x | ~y) ^ z;\n        else if (j <= 63) return x & z | y & ~z;\n        else return x ^ (y | ~z);\n    }\n    function K(j) {\n        if (j <= 15) return 0;\n        else if (j <= 31) return 1518500249;\n        else if (j <= 47) return 1859775393;\n        else if (j <= 63) return 2400959708;\n        else return 2840853838;\n    }\n    function Kh(j) {\n        if (j <= 15) return 1352829926;\n        else if (j <= 31) return 1548603684;\n        else if (j <= 47) return 1836072691;\n        else if (j <= 63) return 2053994217;\n        else return 0;\n    }\n    var r = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        7,\n        4,\n        13,\n        1,\n        10,\n        6,\n        15,\n        3,\n        12,\n        0,\n        9,\n        5,\n        2,\n        14,\n        11,\n        8,\n        3,\n        10,\n        14,\n        4,\n        9,\n        15,\n        8,\n        1,\n        2,\n        7,\n        0,\n        6,\n        13,\n        11,\n        5,\n        12,\n        1,\n        9,\n        11,\n        10,\n        0,\n        8,\n        12,\n        4,\n        13,\n        3,\n        7,\n        15,\n        14,\n        5,\n        6,\n        2,\n        4,\n        0,\n        5,\n        9,\n        7,\n        12,\n        2,\n        10,\n        14,\n        1,\n        3,\n        8,\n        11,\n        6,\n        15,\n        13\n    ];\n    var rh = [\n        5,\n        14,\n        7,\n        0,\n        9,\n        2,\n        11,\n        4,\n        13,\n        6,\n        15,\n        8,\n        1,\n        10,\n        3,\n        12,\n        6,\n        11,\n        3,\n        7,\n        0,\n        13,\n        5,\n        10,\n        14,\n        15,\n        8,\n        12,\n        4,\n        9,\n        1,\n        2,\n        15,\n        5,\n        1,\n        3,\n        7,\n        14,\n        6,\n        9,\n        11,\n        8,\n        12,\n        2,\n        10,\n        0,\n        4,\n        13,\n        8,\n        6,\n        4,\n        1,\n        3,\n        11,\n        15,\n        0,\n        5,\n        12,\n        2,\n        13,\n        9,\n        7,\n        10,\n        14,\n        12,\n        15,\n        10,\n        4,\n        1,\n        5,\n        8,\n        7,\n        6,\n        2,\n        13,\n        14,\n        0,\n        3,\n        9,\n        11\n    ];\n    var s = [\n        11,\n        14,\n        15,\n        12,\n        5,\n        8,\n        7,\n        9,\n        11,\n        13,\n        14,\n        15,\n        6,\n        7,\n        9,\n        8,\n        7,\n        6,\n        8,\n        13,\n        11,\n        9,\n        7,\n        15,\n        7,\n        12,\n        15,\n        9,\n        11,\n        7,\n        13,\n        12,\n        11,\n        13,\n        6,\n        7,\n        14,\n        9,\n        13,\n        15,\n        14,\n        8,\n        13,\n        6,\n        5,\n        12,\n        7,\n        5,\n        11,\n        12,\n        14,\n        15,\n        14,\n        15,\n        9,\n        8,\n        9,\n        14,\n        5,\n        6,\n        8,\n        6,\n        5,\n        12,\n        9,\n        15,\n        5,\n        11,\n        6,\n        8,\n        13,\n        12,\n        5,\n        12,\n        13,\n        14,\n        11,\n        8,\n        5,\n        6\n    ];\n    var sh = [\n        8,\n        9,\n        9,\n        11,\n        13,\n        15,\n        15,\n        5,\n        7,\n        7,\n        8,\n        11,\n        14,\n        14,\n        12,\n        6,\n        9,\n        13,\n        15,\n        7,\n        12,\n        8,\n        9,\n        11,\n        7,\n        7,\n        12,\n        7,\n        6,\n        15,\n        13,\n        11,\n        9,\n        7,\n        15,\n        11,\n        8,\n        6,\n        6,\n        14,\n        12,\n        13,\n        5,\n        14,\n        13,\n        13,\n        7,\n        5,\n        15,\n        5,\n        8,\n        11,\n        14,\n        14,\n        6,\n        14,\n        6,\n        9,\n        12,\n        9,\n        12,\n        5,\n        15,\n        8,\n        8,\n        5,\n        12,\n        9,\n        12,\n        5,\n        14,\n        6,\n        8,\n        13,\n        6,\n        5,\n        15,\n        13,\n        11,\n        11\n    ];\n    return ripemd;\n}\nvar hmac;\nvar hasRequiredHmac;\nfunction requireHmac() {\n    if (hasRequiredHmac) return hmac;\n    hasRequiredHmac = 1;\n    var utils2 = requireUtils();\n    var assert = requireMinimalisticAssert();\n    function Hmac(hash2, key, enc) {\n        if (!(this instanceof Hmac)) return new Hmac(hash2, key, enc);\n        this.Hash = hash2;\n        this.blockSize = hash2.blockSize / 8;\n        this.outSize = hash2.outSize / 8;\n        this.inner = null;\n        this.outer = null;\n        this._init(utils2.toArray(key, enc));\n    }\n    hmac = Hmac;\n    Hmac.prototype._init = function init(key) {\n        if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n        assert(key.length <= this.blockSize);\n        for(var i = key.length; i < this.blockSize; i++)key.push(0);\n        for(i = 0; i < key.length; i++)key[i] ^= 54;\n        this.inner = new this.Hash().update(key);\n        for(i = 0; i < key.length; i++)key[i] ^= 106;\n        this.outer = new this.Hash().update(key);\n    };\n    Hmac.prototype.update = function update(msg, enc) {\n        this.inner.update(msg, enc);\n        return this;\n    };\n    Hmac.prototype.digest = function digest(enc) {\n        this.outer.update(this.inner.digest());\n        return this.outer.digest(enc);\n    };\n    return hmac;\n}\nvar hasRequiredHash;\nfunction requireHash() {\n    if (hasRequiredHash) return hash$1;\n    hasRequiredHash = 1;\n    (function(exports) {\n        var hash2 = exports;\n        hash2.utils = requireUtils();\n        hash2.common = requireCommon$1();\n        hash2.sha = requireSha();\n        hash2.ripemd = requireRipemd();\n        hash2.hmac = requireHmac();\n        hash2.sha1 = hash2.sha.sha1;\n        hash2.sha256 = hash2.sha.sha256;\n        hash2.sha224 = hash2.sha.sha224;\n        hash2.sha384 = hash2.sha.sha384;\n        hash2.sha512 = hash2.sha.sha512;\n        hash2.ripemd160 = hash2.ripemd.ripemd160;\n    })(hash$1);\n    return hash$1;\n}\nvar hashExports = requireHash();\nconst hash = /* @__PURE__ */ getDefaultExportFromCjs$1(hashExports);\nlet urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet customAlphabet = (alphabet, defaultSize = 21)=>{\n    return (size = defaultSize)=>{\n        let id = \"\";\n        let i = size | 0;\n        while(i--){\n            id += alphabet[Math.random() * alphabet.length | 0];\n        }\n        return id;\n    };\n};\nlet nanoid = (size = 21)=>{\n    let id = \"\";\n    let i = size | 0;\n    while(i--){\n        id += urlAlphabet[Math.random() * 64 | 0];\n    }\n    return id;\n};\nconst convertMillimetersToTwip = (millimeters)=>Math.floor(millimeters / 25.4 * 72 * 20);\nconst convertInchesToTwip = (inches)=>Math.floor(inches * 72 * 20);\nconst uniqueNumericIdCreator = (initial = 0)=>{\n    let currentCount = initial;\n    return ()=>++currentCount;\n};\nconst abstractNumUniqueNumericIdGen = ()=>uniqueNumericIdCreator();\nconst concreteNumUniqueNumericIdGen = ()=>uniqueNumericIdCreator(1);\nconst docPropertiesUniqueNumericIdGen = ()=>uniqueNumericIdCreator();\nconst bookmarkUniqueNumericIdGen = ()=>uniqueNumericIdCreator();\nconst uniqueId = ()=>nanoid().toLowerCase();\nconst hashedId = (data)=>hash.sha1().update(data instanceof ArrayBuffer ? new Uint8Array(data) : data).digest(\"hex\");\nconst generateUuidPart = (count)=>customAlphabet(\"1234567890abcdef\", count)();\nconst uniqueUuid = ()=>`${generateUuidPart(8)}-${generateUuidPart(4)}-${generateUuidPart(4)}-${generateUuidPart(4)}-${generateUuidPart(12)}`;\nconst HorizontalPositionRelativeFrom = {\n    /**\n   * ## Character\n   *\n   * Specifies that the horizontal positioning shall be relative to the position of the anchor within its run content.\n   */ CHARACTER: \"character\",\n    /**\n   * ## Column\n   *\n   * Specifies that the horizontal positioning shall be relative to the extents of the column which contains its anchor.\n   */ COLUMN: \"column\",\n    /**\n   * ## Inside Margin\n   *\n   * Specifies that the horizontal positioning shall be relative to the inside margin of the current page (the left margin on odd pages, right on even pages).\n   */ INSIDE_MARGIN: \"insideMargin\",\n    /**\n   * ## Left Margin\n   *\n   * Specifies that the horizontal positioning shall be relative to the left margin of the page.\n   */ LEFT_MARGIN: \"leftMargin\",\n    /**\n   * ## Page Margin\n   *\n   * Specifies that the horizontal positioning shall be relative to the page margins.\n   */ MARGIN: \"margin\",\n    /**\n   * ## Outside Margin\n   *\n   * Specifies that the horizontal positioning shall be relative to the outside margin of the current page (the right margin on odd pages, left on even pages).\n   */ OUTSIDE_MARGIN: \"outsideMargin\",\n    /**\n   * ## Page Edge\n   *\n   * Specifies that the horizontal positioning shall be relative to the edge of the page.\n   */ PAGE: \"page\",\n    /**\n   * ## Right Margin\n   *\n   * Specifies that the horizontal positioning shall be relative to the right margin of the page.\n   */ RIGHT_MARGIN: \"rightMargin\"\n};\nconst VerticalPositionRelativeFrom = {\n    /**\n   * ## Bottom Margin\n   *\n   * Specifies that the vertical positioning shall be relative to the bottom margin of the current page.\n   */ BOTTOM_MARGIN: \"bottomMargin\",\n    /**\n   * ## Inside Margin\n   *\n   * Specifies that the vertical positioning shall be relative to the inside margin of the current page.\n   */ INSIDE_MARGIN: \"insideMargin\",\n    /**\n   * ## Line\n   *\n   * Specifies that the vertical positioning shall be relative to the line containing the anchor character.\n   */ LINE: \"line\",\n    /**\n   * ## Page Margin\n   *\n   * Specifies that the vertical positioning shall be relative to the page margins.\n   */ MARGIN: \"margin\",\n    /**\n   * ## Outside Margin\n   *\n   * Specifies that the vertical positioning shall be relative to the outside margin of the current page.\n   */ OUTSIDE_MARGIN: \"outsideMargin\",\n    /**\n   * ## Page Edge\n   *\n   * Specifies that the vertical positioning shall be relative to the edge of the page.\n   */ PAGE: \"page\",\n    /**\n   * ## Paragraph\n   *\n   * Specifies that the vertical positioning shall be relative to the paragraph which contains the drawing anchor.\n   */ PARAGRAPH: \"paragraph\",\n    /**\n   * ## Top Margin\n   *\n   * Specifies that the vertical positioning shall be relative to the top margin of the current page.\n   */ TOP_MARGIN: \"topMargin\"\n};\nconst createSimplePos = ()=>new BuilderElement({\n        name: \"wp:simplePos\",\n        // NOTE: It's not fully supported in Microsoft Word, but this element is needed anyway\n        attributes: {\n            x: {\n                key: \"x\",\n                value: 0\n            },\n            y: {\n                key: \"y\",\n                value: 0\n            }\n        }\n    });\nconst createAlign = (value)=>new BuilderElement({\n        name: \"wp:align\",\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        children: [\n            value\n        ]\n    });\nconst createPositionOffset = (offsetValue)=>new BuilderElement({\n        name: \"wp:posOffset\",\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        children: [\n            offsetValue.toString()\n        ]\n    });\nconst createHorizontalPosition = ({ relative, align, offset })=>new BuilderElement({\n        name: \"wp:positionH\",\n        attributes: {\n            relativeFrom: {\n                key: \"relativeFrom\",\n                value: relative != null ? relative : HorizontalPositionRelativeFrom.PAGE\n            }\n        },\n        children: [\n            (()=>{\n                if (align) {\n                    return createAlign(align);\n                } else if (offset !== void 0) {\n                    return createPositionOffset(offset);\n                } else {\n                    throw new Error(\"There is no configuration provided for floating position (Align or offset)\");\n                }\n            })()\n        ]\n    });\nconst createVerticalPosition = ({ relative, align, offset })=>new BuilderElement({\n        name: \"wp:positionV\",\n        attributes: {\n            relativeFrom: {\n                key: \"relativeFrom\",\n                value: relative != null ? relative : VerticalPositionRelativeFrom.PAGE\n            }\n        },\n        children: [\n            (()=>{\n                if (align) {\n                    return createAlign(align);\n                } else if (offset !== void 0) {\n                    return createPositionOffset(offset);\n                } else {\n                    throw new Error(\"There is no configuration provided for floating position (Align or offset)\");\n                }\n            })()\n        ]\n    });\nclass GraphicDataAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            uri: \"uri\"\n        });\n    }\n}\nconst createSvgBlip = (mediaData)=>new BuilderElement({\n        name: \"asvg:svgBlip\",\n        attributes: {\n            asvg: {\n                key: \"xmlns:asvg\",\n                value: \"http://schemas.microsoft.com/office/drawing/2016/SVG/main\"\n            },\n            embed: {\n                key: \"r:embed\",\n                value: `rId{${mediaData.fileName}}`\n            }\n        }\n    });\nconst createExtention = (mediaData)=>new BuilderElement({\n        name: \"a:ext\",\n        attributes: {\n            uri: {\n                key: \"uri\",\n                value: \"{96DAC541-7B7A-43D3-8B79-37D633B846F1}\"\n            }\n        },\n        children: [\n            createSvgBlip(mediaData)\n        ]\n    });\nconst createExtentionList = (mediaData)=>new BuilderElement({\n        name: \"a:extLst\",\n        children: [\n            createExtention(mediaData)\n        ]\n    });\nconst createBlip = (mediaData)=>new BuilderElement({\n        name: \"a:blip\",\n        attributes: {\n            embed: {\n                key: \"r:embed\",\n                value: `rId{${mediaData.type === \"svg\" ? mediaData.fallback.fileName : mediaData.fileName}}`\n            },\n            cstate: {\n                key: \"cstate\",\n                value: \"none\"\n            }\n        },\n        children: mediaData.type === \"svg\" ? [\n            createExtentionList(mediaData)\n        ] : []\n    });\nclass SourceRectangle extends XmlComponent {\n    constructor(){\n        super(\"a:srcRect\");\n    }\n}\nclass FillRectangle extends XmlComponent {\n    constructor(){\n        super(\"a:fillRect\");\n    }\n}\nclass Stretch extends XmlComponent {\n    constructor(){\n        super(\"a:stretch\");\n        this.root.push(new FillRectangle());\n    }\n}\nclass BlipFill extends XmlComponent {\n    constructor(mediaData){\n        super(\"pic:blipFill\");\n        this.root.push(createBlip(mediaData));\n        this.root.push(new SourceRectangle());\n        this.root.push(new Stretch());\n    }\n}\nclass PicLocksAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            noChangeAspect: \"noChangeAspect\",\n            noChangeArrowheads: \"noChangeArrowheads\"\n        });\n    }\n}\nclass PicLocks extends XmlComponent {\n    constructor(){\n        super(\"a:picLocks\");\n        this.root.push(new PicLocksAttributes({\n            noChangeAspect: 1,\n            noChangeArrowheads: 1\n        }));\n    }\n}\nclass ChildNonVisualProperties extends XmlComponent {\n    constructor(){\n        super(\"pic:cNvPicPr\");\n        this.root.push(new PicLocks());\n    }\n}\nconst createHyperlinkClick = (linkId, hasXmlNs)=>new BuilderElement({\n        name: \"a:hlinkClick\",\n        attributes: __spreadProps(__spreadValues({}, hasXmlNs ? {\n            xmlns: {\n                key: \"xmlns:a\",\n                value: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n            }\n        } : {}), {\n            id: {\n                key: \"r:id\",\n                value: `rId${linkId}`\n            }\n        })\n    });\nclass NonVisualPropertiesAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"id\",\n            name: \"name\",\n            descr: \"descr\"\n        });\n    }\n}\nclass NonVisualProperties extends XmlComponent {\n    constructor(){\n        super(\"pic:cNvPr\");\n        this.root.push(new NonVisualPropertiesAttributes({\n            id: 0,\n            name: \"\",\n            descr: \"\"\n        }));\n    }\n    prepForXml(context) {\n        for(let i = context.stack.length - 1; i >= 0; i--){\n            const element = context.stack[i];\n            if (!(element instanceof ConcreteHyperlink)) {\n                continue;\n            }\n            this.root.push(createHyperlinkClick(element.linkId, false));\n            break;\n        }\n        return super.prepForXml(context);\n    }\n}\nclass NonVisualPicProperties extends XmlComponent {\n    constructor(){\n        super(\"pic:nvPicPr\");\n        this.root.push(new NonVisualProperties());\n        this.root.push(new ChildNonVisualProperties());\n    }\n}\nclass PicAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            xmlns: \"xmlns:pic\"\n        });\n    }\n}\nclass ExtentsAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            cx: \"cx\",\n            cy: \"cy\"\n        });\n    }\n}\nclass Extents extends XmlComponent {\n    constructor(x, y){\n        super(\"a:ext\");\n        __publicField(this, \"attributes\");\n        this.attributes = new ExtentsAttributes({\n            cx: x,\n            cy: y\n        });\n        this.root.push(this.attributes);\n    }\n}\nclass OffsetAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            x: \"x\",\n            y: \"y\"\n        });\n    }\n}\nclass Offset extends XmlComponent {\n    constructor(){\n        super(\"a:off\");\n        this.root.push(new OffsetAttributes({\n            x: 0,\n            y: 0\n        }));\n    }\n}\nclass FormAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            flipVertical: \"flipV\",\n            flipHorizontal: \"flipH\",\n            rotation: \"rot\"\n        });\n    }\n}\nclass Form extends XmlComponent {\n    constructor(options){\n        var _a, _b;\n        super(\"a:xfrm\");\n        __publicField(this, \"extents\");\n        this.root.push(new FormAttributes({\n            flipVertical: (_a = options.flip) == null ? void 0 : _a.vertical,\n            flipHorizontal: (_b = options.flip) == null ? void 0 : _b.horizontal,\n            rotation: options.rotation\n        }));\n        this.extents = new Extents(options.emus.x, options.emus.y);\n        this.root.push(new Offset());\n        this.root.push(this.extents);\n    }\n}\nconst createNoFill = ()=>new BuilderElement({\n        name: \"a:noFill\"\n    });\nconst createSolidRgbColor = (options)=>new BuilderElement({\n        name: \"a:srgbClr\",\n        attributes: {\n            value: {\n                key: \"val\",\n                value: options.value\n            }\n        }\n    });\nconst createSchemeColor = (options)=>new BuilderElement({\n        name: \"a:schemeClr\",\n        attributes: {\n            value: {\n                key: \"val\",\n                value: options.value\n            }\n        }\n    });\nconst createSolidFill = (options)=>new BuilderElement({\n        name: \"a:solidFill\",\n        children: [\n            options.type === \"rgb\" ? createSolidRgbColor(options) : createSchemeColor(options)\n        ]\n    });\nconst createOutline = (options)=>new BuilderElement({\n        name: \"a:ln\",\n        attributes: {\n            width: {\n                key: \"w\",\n                value: options.width\n            },\n            cap: {\n                key: \"cap\",\n                value: options.cap\n            },\n            compoundLine: {\n                key: \"cmpd\",\n                value: options.compoundLine\n            },\n            align: {\n                key: \"algn\",\n                value: options.align\n            }\n        },\n        children: [\n            options.type === \"noFill\" ? createNoFill() : options.solidFillType === \"rgb\" ? createSolidFill({\n                type: \"rgb\",\n                value: options.value\n            }) : createSolidFill({\n                type: \"scheme\",\n                value: options.value\n            })\n        ]\n    });\nclass AdjustmentValues extends XmlComponent {\n    constructor(){\n        super(\"a:avLst\");\n    }\n}\nclass PresetGeometryAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            prst: \"prst\"\n        });\n    }\n}\nclass PresetGeometry extends XmlComponent {\n    constructor(){\n        super(\"a:prstGeom\");\n        this.root.push(new PresetGeometryAttributes({\n            prst: \"rect\"\n        }));\n        this.root.push(new AdjustmentValues());\n    }\n}\nclass ShapePropertiesAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            bwMode: \"bwMode\"\n        });\n    }\n}\nclass ShapeProperties extends XmlComponent {\n    constructor({ outline, transform }){\n        super(\"pic:spPr\");\n        __publicField(this, \"form\");\n        this.root.push(new ShapePropertiesAttributes({\n            bwMode: \"auto\"\n        }));\n        this.form = new Form(transform);\n        this.root.push(this.form);\n        this.root.push(new PresetGeometry());\n        if (outline) {\n            this.root.push(createNoFill());\n            this.root.push(createOutline(outline));\n        }\n    }\n}\nclass Pic extends XmlComponent {\n    constructor({ mediaData, transform, outline }){\n        super(\"pic:pic\");\n        this.root.push(new PicAttributes({\n            xmlns: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\n        }));\n        this.root.push(new NonVisualPicProperties());\n        this.root.push(new BlipFill(mediaData));\n        this.root.push(new ShapeProperties({\n            transform,\n            outline\n        }));\n    }\n}\nclass GraphicData extends XmlComponent {\n    constructor({ mediaData, transform, outline }){\n        super(\"a:graphicData\");\n        __publicField(this, \"pic\");\n        this.root.push(new GraphicDataAttributes({\n            uri: \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\n        }));\n        this.pic = new Pic({\n            mediaData,\n            transform,\n            outline\n        });\n        this.root.push(this.pic);\n    }\n}\nclass GraphicAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            a: \"xmlns:a\"\n        });\n    }\n}\nclass Graphic extends XmlComponent {\n    constructor({ mediaData, transform, outline }){\n        super(\"a:graphic\");\n        __publicField(this, \"data\");\n        this.root.push(new GraphicAttributes({\n            a: \"http://schemas.openxmlformats.org/drawingml/2006/main\"\n        }));\n        this.data = new GraphicData({\n            mediaData,\n            transform,\n            outline\n        });\n        this.root.push(this.data);\n    }\n}\nconst TextWrappingType = {\n    NONE: 0,\n    SQUARE: 1,\n    TIGHT: 2,\n    TOP_AND_BOTTOM: 3\n};\nconst TextWrappingSide = {\n    BOTH_SIDES: \"bothSides\",\n    LEFT: \"left\",\n    RIGHT: \"right\",\n    LARGEST: \"largest\"\n};\nclass WrapNone extends XmlComponent {\n    constructor(){\n        super(\"wp:wrapNone\");\n    }\n}\nclass WrapSquareAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            distT: \"distT\",\n            distB: \"distB\",\n            distL: \"distL\",\n            distR: \"distR\",\n            wrapText: \"wrapText\"\n        });\n    }\n}\nclass WrapSquare extends XmlComponent {\n    constructor(textWrapping, margins = {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n    }){\n        super(\"wp:wrapSquare\");\n        this.root.push(new WrapSquareAttributes({\n            wrapText: textWrapping.side || TextWrappingSide.BOTH_SIDES,\n            distT: margins.top,\n            distB: margins.bottom,\n            distL: margins.left,\n            distR: margins.right\n        }));\n    }\n}\nclass WrapTightAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            distT: \"distT\",\n            distB: \"distB\"\n        });\n    }\n}\nclass WrapTight extends XmlComponent {\n    constructor(margins = {\n        top: 0,\n        bottom: 0\n    }){\n        super(\"wp:wrapTight\");\n        this.root.push(new WrapTightAttributes({\n            distT: margins.top,\n            distB: margins.bottom\n        }));\n    }\n}\nclass WrapTopAndBottomAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            distT: \"distT\",\n            distB: \"distB\"\n        });\n    }\n}\nclass WrapTopAndBottom extends XmlComponent {\n    constructor(margins = {\n        top: 0,\n        bottom: 0\n    }){\n        super(\"wp:wrapTopAndBottom\");\n        this.root.push(new WrapTopAndBottomAttributes({\n            distT: margins.top,\n            distB: margins.bottom\n        }));\n    }\n}\nclass DocProperties extends XmlComponent {\n    constructor({ name, description, title } = {\n        name: \"\",\n        description: \"\",\n        title: \"\"\n    }){\n        super(\"wp:docPr\");\n        __publicField(this, \"docPropertiesUniqueNumericId\", docPropertiesUniqueNumericIdGen());\n        const attributes = {\n            id: {\n                key: \"id\",\n                value: this.docPropertiesUniqueNumericId()\n            },\n            name: {\n                key: \"name\",\n                value: name\n            }\n        };\n        if (description !== null && description !== void 0) {\n            attributes.description = {\n                key: \"descr\",\n                value: description\n            };\n        }\n        if (title !== null && title !== void 0) {\n            attributes.title = {\n                key: \"title\",\n                value: title\n            };\n        }\n        this.root.push(new NextAttributeComponent(attributes));\n    }\n    prepForXml(context) {\n        for(let i = context.stack.length - 1; i >= 0; i--){\n            const element = context.stack[i];\n            if (!(element instanceof ConcreteHyperlink)) {\n                continue;\n            }\n            this.root.push(createHyperlinkClick(element.linkId, true));\n            break;\n        }\n        return super.prepForXml(context);\n    }\n}\nconst createEffectExtent = ({ top, right, bottom, left })=>new BuilderElement({\n        name: \"wp:effectExtent\",\n        attributes: {\n            top: {\n                key: \"t\",\n                value: top\n            },\n            right: {\n                key: \"r\",\n                value: right\n            },\n            bottom: {\n                key: \"b\",\n                value: bottom\n            },\n            left: {\n                key: \"l\",\n                value: left\n            }\n        }\n    });\nconst createExtent = ({ x, y })=>new BuilderElement({\n        name: \"wp:extent\",\n        attributes: {\n            x: {\n                key: \"cx\",\n                value: x\n            },\n            y: {\n                key: \"cy\",\n                value: y\n            }\n        }\n    });\nclass GraphicFrameLockAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            xmlns: \"xmlns:a\",\n            noChangeAspect: \"noChangeAspect\"\n        });\n    }\n}\nclass GraphicFrameLocks extends XmlComponent {\n    constructor(){\n        super(\"a:graphicFrameLocks\");\n        this.root.push(new GraphicFrameLockAttributes({\n            xmlns: \"http://schemas.openxmlformats.org/drawingml/2006/main\",\n            noChangeAspect: 1\n        }));\n    }\n}\nconst createGraphicFrameProperties = ()=>new BuilderElement({\n        name: \"wp:cNvGraphicFramePr\",\n        children: [\n            new GraphicFrameLocks()\n        ]\n    });\nclass AnchorAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            distT: \"distT\",\n            distB: \"distB\",\n            distL: \"distL\",\n            distR: \"distR\",\n            allowOverlap: \"allowOverlap\",\n            behindDoc: \"behindDoc\",\n            layoutInCell: \"layoutInCell\",\n            locked: \"locked\",\n            relativeHeight: \"relativeHeight\",\n            simplePos: \"simplePos\"\n        });\n    }\n}\nclass Anchor extends XmlComponent {\n    constructor({ mediaData, transform, drawingOptions }){\n        super(\"wp:anchor\");\n        const floating = __spreadValues({\n            allowOverlap: true,\n            behindDocument: false,\n            lockAnchor: false,\n            layoutInCell: true,\n            verticalPosition: {},\n            horizontalPosition: {}\n        }, drawingOptions.floating);\n        this.root.push(new AnchorAttributes({\n            distT: floating.margins ? floating.margins.top || 0 : 0,\n            distB: floating.margins ? floating.margins.bottom || 0 : 0,\n            distL: floating.margins ? floating.margins.left || 0 : 0,\n            distR: floating.margins ? floating.margins.right || 0 : 0,\n            simplePos: \"0\",\n            // note: word doesn't fully support - so we use 0\n            allowOverlap: floating.allowOverlap === true ? \"1\" : \"0\",\n            behindDoc: floating.behindDocument === true ? \"1\" : \"0\",\n            locked: floating.lockAnchor === true ? \"1\" : \"0\",\n            layoutInCell: floating.layoutInCell === true ? \"1\" : \"0\",\n            relativeHeight: floating.zIndex ? floating.zIndex : transform.emus.y\n        }));\n        this.root.push(createSimplePos());\n        this.root.push(createHorizontalPosition(floating.horizontalPosition));\n        this.root.push(createVerticalPosition(floating.verticalPosition));\n        this.root.push(createExtent({\n            x: transform.emus.x,\n            y: transform.emus.y\n        }));\n        this.root.push(createEffectExtent({\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }));\n        if (drawingOptions.floating !== void 0 && drawingOptions.floating.wrap !== void 0) {\n            switch(drawingOptions.floating.wrap.type){\n                case TextWrappingType.SQUARE:\n                    this.root.push(new WrapSquare(drawingOptions.floating.wrap, drawingOptions.floating.margins));\n                    break;\n                case TextWrappingType.TIGHT:\n                    this.root.push(new WrapTight(drawingOptions.floating.margins));\n                    break;\n                case TextWrappingType.TOP_AND_BOTTOM:\n                    this.root.push(new WrapTopAndBottom(drawingOptions.floating.margins));\n                    break;\n                case TextWrappingType.NONE:\n                default:\n                    this.root.push(new WrapNone());\n            }\n        } else {\n            this.root.push(new WrapNone());\n        }\n        this.root.push(new DocProperties(drawingOptions.docProperties));\n        this.root.push(createGraphicFrameProperties());\n        this.root.push(new Graphic({\n            mediaData,\n            transform,\n            outline: drawingOptions.outline\n        }));\n    }\n}\nconst createInline = ({ mediaData, transform, docProperties, outline })=>{\n    var _a, _b, _c, _d;\n    return new BuilderElement({\n        name: \"wp:inline\",\n        attributes: {\n            distanceTop: {\n                key: \"distT\",\n                value: 0\n            },\n            distanceBottom: {\n                key: \"distB\",\n                value: 0\n            },\n            distanceLeft: {\n                key: \"distL\",\n                value: 0\n            },\n            distanceRight: {\n                key: \"distR\",\n                value: 0\n            }\n        },\n        children: [\n            createExtent({\n                x: transform.emus.x,\n                y: transform.emus.y\n            }),\n            createEffectExtent(outline ? {\n                top: ((_a = outline.width) != null ? _a : 9525) * 2,\n                right: ((_b = outline.width) != null ? _b : 9525) * 2,\n                bottom: ((_c = outline.width) != null ? _c : 9525) * 2,\n                left: ((_d = outline.width) != null ? _d : 9525) * 2\n            } : {\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0\n            }),\n            new DocProperties(docProperties),\n            createGraphicFrameProperties(),\n            new Graphic({\n                mediaData,\n                transform,\n                outline\n            })\n        ]\n    });\n};\nclass Drawing extends XmlComponent {\n    constructor(imageData, drawingOptions = {}){\n        super(\"w:drawing\");\n        if (!drawingOptions.floating) {\n            this.root.push(createInline({\n                mediaData: imageData,\n                transform: imageData.transformation,\n                docProperties: drawingOptions.docProperties,\n                outline: drawingOptions.outline\n            }));\n        } else {\n            this.root.push(new Anchor({\n                mediaData: imageData,\n                transform: imageData.transformation,\n                drawingOptions\n            }));\n        }\n    }\n}\nconst convertDataURIToBinary = (dataURI)=>{\n    if (typeof atob === \"function\") {\n        const BASE64_MARKER = \";base64,\";\n        const base64Index = dataURI.indexOf(BASE64_MARKER);\n        const base64IndexWithOffset = base64Index === -1 ? 0 : base64Index + BASE64_MARKER.length;\n        return new Uint8Array(atob(dataURI.substring(base64IndexWithOffset)).split(\"\").map((c)=>c.charCodeAt(0)));\n    } else {\n        const b = require(\"buffer\");\n        return new b.Buffer(dataURI, \"base64\");\n    }\n};\nconst standardizeData = (data)=>typeof data === \"string\" ? convertDataURIToBinary(data) : data;\nconst createImageData = (options, key)=>({\n        data: standardizeData(options.data),\n        fileName: key,\n        transformation: {\n            pixels: {\n                x: Math.round(options.transformation.width),\n                y: Math.round(options.transformation.height)\n            },\n            emus: {\n                x: Math.round(options.transformation.width * 9525),\n                y: Math.round(options.transformation.height * 9525)\n            },\n            flip: options.transformation.flip,\n            rotation: options.transformation.rotation ? options.transformation.rotation * 6e4 : void 0\n        }\n    });\nclass ImageRun extends Run {\n    constructor(options){\n        super({});\n        __publicField(this, \"imageData\");\n        const hash2 = hashedId(options.data);\n        const key = `${hash2}.${options.type}`;\n        this.imageData = options.type === \"svg\" ? __spreadProps(__spreadValues({\n            type: options.type\n        }, createImageData(options, key)), {\n            fallback: __spreadValues({\n                type: options.fallback.type\n            }, createImageData(__spreadProps(__spreadValues({}, options.fallback), {\n                transformation: options.transformation\n            }), `${hashedId(options.fallback.data)}.${options.fallback.type}`))\n        }) : __spreadValues({\n            type: options.type\n        }, createImageData(options, key));\n        const drawing = new Drawing(this.imageData, {\n            floating: options.floating,\n            docProperties: options.altText,\n            outline: options.outline\n        });\n        this.root.push(drawing);\n    }\n    prepForXml(context) {\n        context.file.Media.addImage(this.imageData.fileName, this.imageData);\n        if (this.imageData.type === \"svg\") {\n            context.file.Media.addImage(this.imageData.fallback.fileName, this.imageData.fallback);\n        }\n        return super.prepForXml(context);\n    }\n}\nclass SequentialIdentifierInstruction extends XmlComponent {\n    constructor(identifier){\n        super(\"w:instrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(`SEQ ${identifier}`);\n    }\n}\nclass SequentialIdentifier extends Run {\n    constructor(identifier){\n        super({});\n        this.root.push(new Begin(true));\n        this.root.push(new SequentialIdentifierInstruction(identifier));\n        this.root.push(new Separate());\n        this.root.push(new End());\n    }\n}\nclass FldSimpleAttrs extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            instr: \"w:instr\"\n        });\n    }\n}\nclass SimpleField extends XmlComponent {\n    constructor(instruction, cachedValue){\n        super(\"w:fldSimple\");\n        this.root.push(new FldSimpleAttrs({\n            instr: instruction\n        }));\n        if (cachedValue !== void 0) {\n            this.root.push(new TextRun(cachedValue));\n        }\n    }\n}\nclass SimpleMailMergeField extends SimpleField {\n    constructor(fieldName){\n        super(` MERGEFIELD ${fieldName} `, `«${fieldName}»`);\n    }\n}\nclass RelationshipsAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            xmlns: \"xmlns\"\n        });\n    }\n}\nclass RelationshipAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"Id\",\n            type: \"Type\",\n            target: \"Target\",\n            targetMode: \"TargetMode\"\n        });\n    }\n}\nconst TargetModeType = {\n    EXTERNAL: \"External\"\n};\nclass Relationship extends XmlComponent {\n    constructor(id, type2, target, targetMode){\n        super(\"Relationship\");\n        this.root.push(new RelationshipAttributes({\n            id,\n            type: type2,\n            target,\n            targetMode\n        }));\n    }\n}\nclass Relationships extends XmlComponent {\n    constructor(){\n        super(\"Relationships\");\n        this.root.push(new RelationshipsAttributes({\n            xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n        }));\n    }\n    createRelationship(id, type2, target, targetMode) {\n        const relationship = new Relationship(`rId${id}`, type2, target, targetMode);\n        this.root.push(relationship);\n        return relationship;\n    }\n    get RelationshipCount() {\n        return this.root.length - 1;\n    }\n}\nclass CommentAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"w:id\",\n            initials: \"w:initials\",\n            author: \"w:author\",\n            date: \"w:date\"\n        });\n    }\n}\nclass CommentRangeAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"w:id\"\n        });\n    }\n}\nclass RootCommentsAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            \"xmlns:cx\": \"xmlns:cx\",\n            \"xmlns:cx1\": \"xmlns:cx1\",\n            \"xmlns:cx2\": \"xmlns:cx2\",\n            \"xmlns:cx3\": \"xmlns:cx3\",\n            \"xmlns:cx4\": \"xmlns:cx4\",\n            \"xmlns:cx5\": \"xmlns:cx5\",\n            \"xmlns:cx6\": \"xmlns:cx6\",\n            \"xmlns:cx7\": \"xmlns:cx7\",\n            \"xmlns:cx8\": \"xmlns:cx8\",\n            \"xmlns:mc\": \"xmlns:mc\",\n            \"xmlns:aink\": \"xmlns:aink\",\n            \"xmlns:am3d\": \"xmlns:am3d\",\n            \"xmlns:o\": \"xmlns:o\",\n            \"xmlns:r\": \"xmlns:r\",\n            \"xmlns:m\": \"xmlns:m\",\n            \"xmlns:v\": \"xmlns:v\",\n            \"xmlns:wp14\": \"xmlns:wp14\",\n            \"xmlns:wp\": \"xmlns:wp\",\n            \"xmlns:w10\": \"xmlns:w10\",\n            \"xmlns:w\": \"xmlns:w\",\n            \"xmlns:w14\": \"xmlns:w14\",\n            \"xmlns:w15\": \"xmlns:w15\",\n            \"xmlns:w16cex\": \"xmlns:w16cex\",\n            \"xmlns:w16cid\": \"xmlns:w16cid\",\n            \"xmlns:w16\": \"xmlns:w16\",\n            \"xmlns:w16sdtdh\": \"xmlns:w16sdtdh\",\n            \"xmlns:w16se\": \"xmlns:w16se\",\n            \"xmlns:wpg\": \"xmlns:wpg\",\n            \"xmlns:wpi\": \"xmlns:wpi\",\n            \"xmlns:wne\": \"xmlns:wne\",\n            \"xmlns:wps\": \"xmlns:wps\"\n        });\n    }\n}\nclass CommentRangeStart extends XmlComponent {\n    constructor(id){\n        super(\"w:commentRangeStart\");\n        this.root.push(new CommentRangeAttributes({\n            id\n        }));\n    }\n}\nclass CommentRangeEnd extends XmlComponent {\n    constructor(id){\n        super(\"w:commentRangeEnd\");\n        this.root.push(new CommentRangeAttributes({\n            id\n        }));\n    }\n}\nclass CommentReference extends XmlComponent {\n    constructor(id){\n        super(\"w:commentReference\");\n        this.root.push(new CommentRangeAttributes({\n            id\n        }));\n    }\n}\nclass Comment extends XmlComponent {\n    constructor({ id, initials, author, date = /* @__PURE__ */ new Date(), children }){\n        super(\"w:comment\");\n        this.root.push(new CommentAttributes({\n            id,\n            initials,\n            author,\n            date: date.toISOString()\n        }));\n        for (const child of children){\n            this.root.push(child);\n        }\n    }\n}\nclass Comments extends XmlComponent {\n    constructor({ children }){\n        super(\"w:comments\");\n        __publicField(this, \"relationships\");\n        this.root.push(new RootCommentsAttributes({\n            \"xmlns:cx\": \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n            \"xmlns:cx1\": \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n            \"xmlns:cx2\": \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n            \"xmlns:cx3\": \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n            \"xmlns:cx4\": \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n            \"xmlns:cx5\": \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n            \"xmlns:cx6\": \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n            \"xmlns:cx7\": \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n            \"xmlns:cx8\": \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n            \"xmlns:mc\": \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n            \"xmlns:aink\": \"http://schemas.microsoft.com/office/drawing/2016/ink\",\n            \"xmlns:am3d\": \"http://schemas.microsoft.com/office/drawing/2017/model3d\",\n            \"xmlns:o\": \"urn:schemas-microsoft-com:office:office\",\n            \"xmlns:r\": \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n            \"xmlns:m\": \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n            \"xmlns:v\": \"urn:schemas-microsoft-com:vml\",\n            \"xmlns:wp14\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n            \"xmlns:wp\": \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n            \"xmlns:w10\": \"urn:schemas-microsoft-com:office:word\",\n            \"xmlns:w\": \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n            \"xmlns:w14\": \"http://schemas.microsoft.com/office/word/2010/wordml\",\n            \"xmlns:w15\": \"http://schemas.microsoft.com/office/word/2012/wordml\",\n            \"xmlns:w16cex\": \"http://schemas.microsoft.com/office/word/2018/wordml/cex\",\n            \"xmlns:w16cid\": \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n            \"xmlns:w16\": \"http://schemas.microsoft.com/office/word/2018/wordml\",\n            \"xmlns:w16sdtdh\": \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\",\n            \"xmlns:w16se\": \"http://schemas.microsoft.com/office/word/2015/wordml/symex\",\n            \"xmlns:wpg\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n            \"xmlns:wpi\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n            \"xmlns:wne\": \"http://schemas.microsoft.com/office/word/2006/wordml\",\n            \"xmlns:wps\": \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"\n        }));\n        for (const child of children){\n            this.root.push(new Comment(child));\n        }\n        this.relationships = new Relationships();\n    }\n    get Relationships() {\n        return this.relationships;\n    }\n}\nclass NoBreakHyphen extends EmptyElement {\n    constructor(){\n        super(\"w:noBreakHyphen\");\n    }\n}\nclass SoftHyphen extends EmptyElement {\n    constructor(){\n        super(\"w:softHyphen\");\n    }\n}\nclass DayShort extends EmptyElement {\n    constructor(){\n        super(\"w:dayShort\");\n    }\n}\nclass MonthShort extends EmptyElement {\n    constructor(){\n        super(\"w:monthShort\");\n    }\n}\nclass YearShort extends EmptyElement {\n    constructor(){\n        super(\"w:yearShort\");\n    }\n}\nclass DayLong extends EmptyElement {\n    constructor(){\n        super(\"w:dayLong\");\n    }\n}\nclass MonthLong extends EmptyElement {\n    constructor(){\n        super(\"w:monthLong\");\n    }\n}\nclass YearLong extends EmptyElement {\n    constructor(){\n        super(\"w:yearLong\");\n    }\n}\nclass AnnotationReference extends EmptyElement {\n    constructor(){\n        super(\"w:annotationRef\");\n    }\n}\nclass FootnoteReferenceElement extends EmptyElement {\n    constructor(){\n        super(\"w:footnoteRef\");\n    }\n}\nclass EndnoteReference extends EmptyElement {\n    constructor(){\n        super(\"w:endnoteRef\");\n    }\n}\nclass Separator extends EmptyElement {\n    constructor(){\n        super(\"w:separator\");\n    }\n}\nclass ContinuationSeparator extends EmptyElement {\n    constructor(){\n        super(\"w:continuationSeparator\");\n    }\n}\nclass PageNumberElement extends EmptyElement {\n    constructor(){\n        super(\"w:pgNum\");\n    }\n}\nclass CarriageReturn extends EmptyElement {\n    constructor(){\n        super(\"w:cr\");\n    }\n}\nclass Tab extends EmptyElement {\n    constructor(){\n        super(\"w:tab\");\n    }\n}\nclass LastRenderedPageBreak extends EmptyElement {\n    constructor(){\n        super(\"w:lastRenderedPageBreak\");\n    }\n}\nconst PositionalTabAlignment = {\n    LEFT: \"left\",\n    CENTER: \"center\",\n    RIGHT: \"right\"\n};\nconst PositionalTabRelativeTo = {\n    MARGIN: \"margin\",\n    INDENT: \"indent\"\n};\nconst PositionalTabLeader = {\n    NONE: \"none\",\n    DOT: \"dot\",\n    HYPHEN: \"hyphen\",\n    UNDERSCORE: \"underscore\",\n    MIDDLE_DOT: \"middleDot\"\n};\nclass PositionalTab extends XmlComponent {\n    constructor(options){\n        super(\"w:ptab\");\n        this.root.push(new NextAttributeComponent({\n            alignment: {\n                key: \"w:alignment\",\n                value: options.alignment\n            },\n            relativeTo: {\n                key: \"w:relativeTo\",\n                value: options.relativeTo\n            },\n            leader: {\n                key: \"w:leader\",\n                value: options.leader\n            }\n        }));\n    }\n}\nconst BreakType = {\n    COLUMN: \"column\",\n    PAGE: \"page\"\n};\nclass Break2 extends XmlComponent {\n    constructor(type2){\n        super(\"w:br\");\n        this.root.push(new Attributes({\n            type: type2\n        }));\n    }\n}\nclass PageBreak extends Run {\n    constructor(){\n        super({});\n        this.root.push(new Break2(BreakType.PAGE));\n    }\n}\nclass ColumnBreak extends Run {\n    constructor(){\n        super({});\n        this.root.push(new Break2(BreakType.COLUMN));\n    }\n}\nclass PageBreakBefore extends XmlComponent {\n    constructor(){\n        super(\"w:pageBreakBefore\");\n    }\n}\nconst LineRuleType = {\n    AT_LEAST: \"atLeast\",\n    EXACTLY: \"exactly\",\n    EXACT: \"exact\",\n    AUTO: \"auto\"\n};\nclass SpacingAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            after: \"w:after\",\n            before: \"w:before\",\n            line: \"w:line\",\n            lineRule: \"w:lineRule\",\n            beforeAutoSpacing: \"w:beforeAutospacing\",\n            afterAutoSpacing: \"w:afterAutospacing\"\n        });\n    }\n}\nclass Spacing extends XmlComponent {\n    constructor(options){\n        super(\"w:spacing\");\n        this.root.push(new SpacingAttributes(options));\n    }\n}\nconst HeadingLevel = {\n    HEADING_1: \"Heading1\",\n    HEADING_2: \"Heading2\",\n    HEADING_3: \"Heading3\",\n    HEADING_4: \"Heading4\",\n    HEADING_5: \"Heading5\",\n    HEADING_6: \"Heading6\",\n    TITLE: \"Title\"\n};\nlet Style$1 = class Style extends XmlComponent {\n    constructor(styleId){\n        super(\"w:pStyle\");\n        this.root.push(new Attributes({\n            val: styleId\n        }));\n    }\n};\nclass TabStop extends XmlComponent {\n    constructor(tabDefinitions){\n        super(\"w:tabs\");\n        for (const tabDefinition of tabDefinitions){\n            this.root.push(new TabStopItem(tabDefinition));\n        }\n    }\n}\nconst TabStopType = {\n    LEFT: \"left\",\n    RIGHT: \"right\",\n    CENTER: \"center\",\n    BAR: \"bar\",\n    CLEAR: \"clear\",\n    DECIMAL: \"decimal\",\n    END: \"end\",\n    NUM: \"num\",\n    START: \"start\"\n};\nconst LeaderType = {\n    DOT: \"dot\",\n    HYPHEN: \"hyphen\",\n    MIDDLE_DOT: \"middleDot\",\n    NONE: \"none\",\n    UNDERSCORE: \"underscore\"\n};\nconst TabStopPosition = {\n    MAX: 9026\n};\nclass TabAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\",\n            pos: \"w:pos\",\n            leader: \"w:leader\"\n        });\n    }\n}\nclass TabStopItem extends XmlComponent {\n    constructor({ type: type2, position, leader }){\n        super(\"w:tab\");\n        this.root.push(new TabAttributes({\n            val: type2,\n            pos: position,\n            leader\n        }));\n    }\n}\nclass NumberProperties extends XmlComponent {\n    constructor(numberId, indentLevel){\n        super(\"w:numPr\");\n        this.root.push(new IndentLevel(indentLevel));\n        this.root.push(new NumberId(numberId));\n    }\n}\nclass IndentLevel extends XmlComponent {\n    constructor(level){\n        super(\"w:ilvl\");\n        if (level > 9) {\n            throw new Error(\"Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7\");\n        }\n        this.root.push(new Attributes({\n            val: level\n        }));\n    }\n}\nclass NumberId extends XmlComponent {\n    constructor(id){\n        super(\"w:numId\");\n        this.root.push(new Attributes({\n            val: typeof id === \"string\" ? `{${id}}` : id\n        }));\n    }\n}\nclass FileChild extends XmlComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"fileChild\", Symbol());\n    }\n}\nclass HyperlinkAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"r:id\",\n            history: \"w:history\",\n            anchor: \"w:anchor\"\n        });\n    }\n}\nconst HyperlinkType = {\n    INTERNAL: \"INTERNAL\",\n    EXTERNAL: \"EXTERNAL\"\n};\nclass ConcreteHyperlink extends XmlComponent {\n    constructor(children, relationshipId, anchor){\n        super(\"w:hyperlink\");\n        __publicField(this, \"linkId\");\n        this.linkId = relationshipId;\n        const props = {\n            history: 1,\n            anchor: anchor ? anchor : void 0,\n            id: !anchor ? `rId${this.linkId}` : void 0\n        };\n        const attributes = new HyperlinkAttributes(props);\n        this.root.push(attributes);\n        children.forEach((child)=>{\n            this.root.push(child);\n        });\n    }\n}\nclass InternalHyperlink extends ConcreteHyperlink {\n    constructor(options){\n        super(options.children, uniqueId(), options.anchor);\n    }\n}\nclass ExternalHyperlink extends XmlComponent {\n    constructor(options){\n        super(\"w:externalHyperlink\");\n        this.options = options;\n    }\n}\nclass BookmarkStartAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"w:id\",\n            name: \"w:name\"\n        });\n    }\n}\nclass BookmarkEndAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"w:id\"\n        });\n    }\n}\nclass Bookmark {\n    constructor(options){\n        __publicField(this, \"bookmarkUniqueNumericId\", bookmarkUniqueNumericIdGen());\n        __publicField(this, \"start\");\n        __publicField(this, \"children\");\n        __publicField(this, \"end\");\n        const linkId = this.bookmarkUniqueNumericId();\n        this.start = new BookmarkStart(options.id, linkId);\n        this.children = options.children;\n        this.end = new BookmarkEnd(linkId);\n    }\n}\nclass BookmarkStart extends XmlComponent {\n    constructor(id, linkId){\n        super(\"w:bookmarkStart\");\n        const attributes = new BookmarkStartAttributes({\n            name: id,\n            id: linkId\n        });\n        this.root.push(attributes);\n    }\n}\nclass BookmarkEnd extends XmlComponent {\n    constructor(linkId){\n        super(\"w:bookmarkEnd\");\n        const attributes = new BookmarkEndAttributes({\n            id: linkId\n        });\n        this.root.push(attributes);\n    }\n}\nclass OutlineLevel extends XmlComponent {\n    constructor(level){\n        super(\"w:outlineLvl\");\n        this.level = level;\n        this.root.push(new Attributes({\n            val: level\n        }));\n    }\n}\nclass PageReferenceFieldInstruction extends XmlComponent {\n    constructor(bookmarkId, options = {}){\n        super(\"w:instrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        let instruction = `PAGEREF ${bookmarkId}`;\n        if (options.hyperlink) {\n            instruction = `${instruction} \\\\h`;\n        }\n        if (options.useRelativePosition) {\n            instruction = `${instruction} \\\\p`;\n        }\n        this.root.push(instruction);\n    }\n}\nclass PageReference extends Run {\n    constructor(bookmarkId, options = {}){\n        super({\n            children: [\n                new Begin(true),\n                new PageReferenceFieldInstruction(bookmarkId, options),\n                new End()\n            ]\n        });\n    }\n}\nconst VerticalAlignTable = {\n    TOP: \"top\",\n    CENTER: \"center\",\n    BOTTOM: \"bottom\"\n};\nconst VerticalAlignSection = __spreadProps(__spreadValues({}, VerticalAlignTable), {\n    BOTH: \"both\"\n});\nconst VerticalAlign2 = VerticalAlignSection;\nclass VerticalAlignAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            verticalAlign: \"w:val\"\n        });\n    }\n}\nclass VerticalAlignElement extends XmlComponent {\n    constructor(value){\n        super(\"w:vAlign\");\n        this.root.push(new VerticalAlignAttributes({\n            verticalAlign: value\n        }));\n    }\n}\nclass Columns extends XmlComponent {\n    constructor({ space, count, separate, equalWidth, children }){\n        super(\"w:cols\");\n        this.root.push(new NextAttributeComponent({\n            space: {\n                key: \"w:space\",\n                value: space === void 0 ? void 0 : twipsMeasureValue(space)\n            },\n            count: {\n                key: \"w:num\",\n                value: count === void 0 ? void 0 : decimalNumber(count)\n            },\n            separate: {\n                key: \"w:sep\",\n                value: separate\n            },\n            equalWidth: {\n                key: \"w:equalWidth\",\n                value: equalWidth\n            }\n        }));\n        if (!equalWidth && children) {\n            children.forEach((column)=>this.addChildElement(column));\n        }\n    }\n}\nconst DocumentGridType = {\n    /**\n   * Specifies that no document grid shall be applied to the contents of the current section in the document.\n   */ DEFAULT: \"default\",\n    /**\n   * Specifies that the parent section shall have additional line pitch added to each line within it (as specified on the <docGrid> element (§2.6.5)) in order to maintain the specified number of lines per page.\n   */ LINES: \"lines\",\n    /**\n   * Specifies that the parent section shall have both the additional line pitch and character pitch added to each line and character within it (as specified on the <docGrid> element (§2.6.5)) in order to maintain a specific number of lines per page and characters per line.\n   *\n   * When this value is set, the input specified via the user interface may be allowed in exact number of line/character pitch units. */ LINES_AND_CHARS: \"linesAndChars\",\n    /**\n   * Specifies that the parent section shall have both the additional line pitch and character pitch added to each line and character within it (as specified on the <docGrid> element (§2.6.5)) in order to maintain a specific number of lines per page and characters per line.\n   *\n   * When this value is set, the input specified via the user interface may be restricted to the number of lines per page and characters per line, with the consumer or producer translating this information based on the current font data to get the resulting line and character pitch values\n   */ SNAP_TO_CHARS: \"snapToChars\"\n};\nconst createDocumentGrid = ({ type: type2, linePitch, charSpace })=>new BuilderElement({\n        name: \"w:docGrid\",\n        attributes: {\n            type: {\n                key: \"w:type\",\n                value: type2\n            },\n            linePitch: {\n                key: \"w:linePitch\",\n                value: decimalNumber(linePitch)\n            },\n            charSpace: {\n                key: \"w:charSpace\",\n                value: charSpace ? decimalNumber(charSpace) : void 0\n            }\n        }\n    });\nconst HeaderFooterReferenceType = {\n    /** Specifies that this header or footer shall appear on every page in this section which is not overridden with a specific `even` or `first` page header/footer. In a section with all three types specified, this type shall be used on all odd numbered pages (counting from the `first` page in the section, not the section numbering). */ DEFAULT: \"default\",\n    /** Specifies that this header or footer shall appear on the first page in this section. The appearance of this header or footer is contingent on the setting of the `titlePg` element (§2.10.6). */ FIRST: \"first\",\n    /** Specifies that this header or footer shall appear on all even numbered pages in this section (counting from the first page in the section, not the section numbering). The appearance of this header or footer is contingent on the setting of the `evenAndOddHeaders` element (§2.10.1). */ EVEN: \"even\"\n};\nclass FooterReferenceAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            type: \"w:type\",\n            id: \"r:id\"\n        });\n    }\n}\nconst HeaderFooterType = {\n    HEADER: \"w:headerReference\",\n    FOOTER: \"w:footerReference\"\n};\nclass HeaderFooterReference extends XmlComponent {\n    constructor(type2, options){\n        super(type2);\n        this.root.push(new FooterReferenceAttributes({\n            type: options.type || HeaderFooterReferenceType.DEFAULT,\n            id: `rId${options.id}`\n        }));\n    }\n}\nconst LineNumberRestartFormat = {\n    /**\n   * ## Restart Line Numbering on Each Page\n   *\n   * Specifies that line numbering for the parent section shall restart to the starting value whenever a new page is displayed.\n   */ NEW_PAGE: \"newPage\",\n    /**\n   * ## Restart Line Numbering for Each Section\n   *\n   * Specifies that line numbering for the parent section shall restart to the starting value whenever the parent begins.\n   */ NEW_SECTION: \"newSection\",\n    /**\n   * ## Continue Line Numbering From Previous Section\n   *\n   * Specifies that line numbering for the parent section shall continue from the line numbering from the end of the previous section, if any.\n   */ CONTINUOUS: \"continuous\"\n};\nconst createLineNumberType = ({ countBy, start, restart, distance })=>new BuilderElement({\n        name: \"w:lnNumType\",\n        attributes: {\n            countBy: {\n                key: \"w:countBy\",\n                value: countBy === void 0 ? void 0 : decimalNumber(countBy)\n            },\n            start: {\n                key: \"w:start\",\n                value: start === void 0 ? void 0 : decimalNumber(start)\n            },\n            restart: {\n                key: \"w:restart\",\n                value: restart\n            },\n            distance: {\n                key: \"w:distance\",\n                value: distance === void 0 ? void 0 : twipsMeasureValue(distance)\n            }\n        }\n    });\nconst PageBorderDisplay = {\n    ALL_PAGES: \"allPages\",\n    FIRST_PAGE: \"firstPage\",\n    NOT_FIRST_PAGE: \"notFirstPage\"\n};\nconst PageBorderOffsetFrom = {\n    PAGE: \"page\",\n    TEXT: \"text\"\n};\nconst PageBorderZOrder = {\n    BACK: \"back\",\n    FRONT: \"front\"\n};\nclass PageBordersAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            display: \"w:display\",\n            offsetFrom: \"w:offsetFrom\",\n            zOrder: \"w:zOrder\"\n        });\n    }\n}\nclass PageBorders extends IgnoreIfEmptyXmlComponent {\n    constructor(options){\n        super(\"w:pgBorders\");\n        if (!options) {\n            return this;\n        }\n        if (options.pageBorders) {\n            this.root.push(new PageBordersAttributes({\n                display: options.pageBorders.display,\n                offsetFrom: options.pageBorders.offsetFrom,\n                zOrder: options.pageBorders.zOrder\n            }));\n        } else {\n            this.root.push(new PageBordersAttributes({}));\n        }\n        if (options.pageBorderTop) {\n            this.root.push(new BorderElement(\"w:top\", options.pageBorderTop));\n        }\n        if (options.pageBorderLeft) {\n            this.root.push(new BorderElement(\"w:left\", options.pageBorderLeft));\n        }\n        if (options.pageBorderBottom) {\n            this.root.push(new BorderElement(\"w:bottom\", options.pageBorderBottom));\n        }\n        if (options.pageBorderRight) {\n            this.root.push(new BorderElement(\"w:right\", options.pageBorderRight));\n        }\n    }\n}\nclass PageMargin extends XmlComponent {\n    constructor(top, right, bottom, left, header, footer, gutter){\n        super(\"w:pgMar\");\n        this.root.push(new NextAttributeComponent({\n            top: {\n                key: \"w:top\",\n                value: signedTwipsMeasureValue(top)\n            },\n            right: {\n                key: \"w:right\",\n                value: twipsMeasureValue(right)\n            },\n            bottom: {\n                key: \"w:bottom\",\n                value: signedTwipsMeasureValue(bottom)\n            },\n            left: {\n                key: \"w:left\",\n                value: twipsMeasureValue(left)\n            },\n            header: {\n                key: \"w:header\",\n                value: twipsMeasureValue(header)\n            },\n            footer: {\n                key: \"w:footer\",\n                value: twipsMeasureValue(footer)\n            },\n            gutter: {\n                key: \"w:gutter\",\n                value: twipsMeasureValue(gutter)\n            }\n        }));\n    }\n}\nconst PageNumberSeparator = {\n    HYPHEN: \"hyphen\",\n    PERIOD: \"period\",\n    COLON: \"colon\",\n    EM_DASH: \"emDash\",\n    EN_DASH: \"endash\"\n};\nclass PageNumberTypeAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            start: \"w:start\",\n            formatType: \"w:fmt\",\n            separator: \"w:chapSep\"\n        });\n    }\n}\nclass PageNumberType extends XmlComponent {\n    constructor({ start, formatType, separator }){\n        super(\"w:pgNumType\");\n        this.root.push(new PageNumberTypeAttributes({\n            start: start === void 0 ? void 0 : decimalNumber(start),\n            formatType,\n            separator\n        }));\n    }\n}\nconst PageOrientation = {\n    /**\n   * ## Portrait Mode\n   *\n   * Specifies that pages in this section shall be printed in portrait mode.\n   */ PORTRAIT: \"portrait\",\n    /**\n   * ## Landscape Mode\n   *\n   * Specifies that pages in this section shall be printed in landscape mode, which prints the page contents with a 90 degree rotation with respect to the normal page orientation.\n   */ LANDSCAPE: \"landscape\"\n};\nconst createPageSize = ({ width, height, orientation, code })=>{\n    const widthTwips = twipsMeasureValue(width);\n    const heightTwips = twipsMeasureValue(height);\n    return new BuilderElement({\n        name: \"w:pgSz\",\n        attributes: {\n            width: {\n                key: \"w:w\",\n                value: orientation === PageOrientation.LANDSCAPE ? heightTwips : widthTwips\n            },\n            height: {\n                key: \"w:h\",\n                value: orientation === PageOrientation.LANDSCAPE ? widthTwips : heightTwips\n            },\n            orientation: {\n                key: \"w:orient\",\n                value: orientation\n            },\n            code: {\n                key: \"w:code\",\n                value: code\n            }\n        }\n    });\n};\nconst PageTextDirectionType = {\n    LEFT_TO_RIGHT_TOP_TO_BOTTOM: \"lrTb\",\n    TOP_TO_BOTTOM_RIGHT_TO_LEFT: \"tbRl\"\n};\nclass PageTextDirectionAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass PageTextDirection extends XmlComponent {\n    constructor(value){\n        super(\"w:textDirection\");\n        this.root.push(new PageTextDirectionAttributes({\n            val: value\n        }));\n    }\n}\nconst SectionType = {\n    NEXT_PAGE: \"nextPage\",\n    NEXT_COLUMN: \"nextColumn\",\n    CONTINUOUS: \"continuous\",\n    EVEN_PAGE: \"evenPage\",\n    ODD_PAGE: \"oddPage\"\n};\nclass SectionTypeAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass Type extends XmlComponent {\n    constructor(value){\n        super(\"w:type\");\n        this.root.push(new SectionTypeAttributes({\n            val: value\n        }));\n    }\n}\nconst sectionMarginDefaults = {\n    TOP: 1440,\n    RIGHT: 1440,\n    BOTTOM: 1440,\n    LEFT: 1440,\n    HEADER: 708,\n    FOOTER: 708,\n    GUTTER: 0\n};\nconst sectionPageSizeDefaults = {\n    WIDTH: 11906,\n    HEIGHT: 16838,\n    ORIENTATION: PageOrientation.PORTRAIT\n};\nclass SectionProperties extends XmlComponent {\n    constructor({ page: { size: { width = sectionPageSizeDefaults.WIDTH, height = sectionPageSizeDefaults.HEIGHT, orientation = sectionPageSizeDefaults.ORIENTATION } = {}, margin: { top = sectionMarginDefaults.TOP, right = sectionMarginDefaults.RIGHT, bottom = sectionMarginDefaults.BOTTOM, left = sectionMarginDefaults.LEFT, header = sectionMarginDefaults.HEADER, footer = sectionMarginDefaults.FOOTER, gutter = sectionMarginDefaults.GUTTER } = {}, pageNumbers = {}, borders, textDirection } = {}, grid: { linePitch = 360, charSpace, type: gridType } = {}, headerWrapperGroup = {}, footerWrapperGroup = {}, lineNumbers, titlePage, verticalAlign, column, type: type2 } = {}){\n        super(\"w:sectPr\");\n        this.addHeaderFooterGroup(HeaderFooterType.HEADER, headerWrapperGroup);\n        this.addHeaderFooterGroup(HeaderFooterType.FOOTER, footerWrapperGroup);\n        if (type2) {\n            this.root.push(new Type(type2));\n        }\n        this.root.push(createPageSize({\n            width,\n            height,\n            orientation\n        }));\n        this.root.push(new PageMargin(top, right, bottom, left, header, footer, gutter));\n        if (borders) {\n            this.root.push(new PageBorders(borders));\n        }\n        if (lineNumbers) {\n            this.root.push(createLineNumberType(lineNumbers));\n        }\n        this.root.push(new PageNumberType(pageNumbers));\n        if (column) {\n            this.root.push(new Columns(column));\n        }\n        if (verticalAlign) {\n            this.root.push(new VerticalAlignElement(verticalAlign));\n        }\n        if (titlePage !== void 0) {\n            this.root.push(new OnOffElement(\"w:titlePg\", titlePage));\n        }\n        if (textDirection) {\n            this.root.push(new PageTextDirection(textDirection));\n        }\n        this.root.push(createDocumentGrid({\n            linePitch,\n            charSpace,\n            type: gridType\n        }));\n    }\n    addHeaderFooterGroup(type2, group) {\n        if (group.default) {\n            this.root.push(new HeaderFooterReference(type2, {\n                type: HeaderFooterReferenceType.DEFAULT,\n                id: group.default.View.ReferenceId\n            }));\n        }\n        if (group.first) {\n            this.root.push(new HeaderFooterReference(type2, {\n                type: HeaderFooterReferenceType.FIRST,\n                id: group.first.View.ReferenceId\n            }));\n        }\n        if (group.even) {\n            this.root.push(new HeaderFooterReference(type2, {\n                type: HeaderFooterReferenceType.EVEN,\n                id: group.even.View.ReferenceId\n            }));\n        }\n    }\n}\nclass Body extends XmlComponent {\n    constructor(){\n        super(\"w:body\");\n        // eslint-disable-next-line functional/prefer-readonly-type\n        __publicField(this, \"sections\", []);\n    }\n    /**\n   * Adds new section properties.\n   * Note: Previous section is created in paragraph after the current element, and then new section will be added.\n   * The spec says:\n   *  - section element should be in the last paragraph of the section\n   *  - last section should be direct child of body\n   *\n   * @param options new section options\n   */ addSection(options) {\n        const currentSection = this.sections.pop();\n        this.root.push(this.createSectionParagraph(currentSection));\n        this.sections.push(new SectionProperties(options));\n    }\n    prepForXml(context) {\n        if (this.sections.length === 1) {\n            this.root.splice(0, 1);\n            this.root.push(this.sections.pop());\n        }\n        return super.prepForXml(context);\n    }\n    push(component) {\n        this.root.push(component);\n    }\n    createSectionParagraph(section) {\n        const paragraph = new Paragraph({});\n        const properties = new ParagraphProperties({});\n        properties.push(section);\n        paragraph.addChildElement(properties);\n        return paragraph;\n    }\n}\nclass Column extends XmlComponent {\n    constructor({ width, space }){\n        super(\"w:col\");\n        this.root.push(new NextAttributeComponent({\n            width: {\n                key: \"w:w\",\n                value: twipsMeasureValue(width)\n            },\n            space: {\n                key: \"w:space\",\n                value: space === void 0 ? void 0 : twipsMeasureValue(space)\n            }\n        }));\n    }\n}\nconst DocumentAttributeNamespaces = {\n    wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n    mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n    o: \"urn:schemas-microsoft-com:office:office\",\n    r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n    m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n    v: \"urn:schemas-microsoft-com:vml\",\n    wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n    wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n    w10: \"urn:schemas-microsoft-com:office:word\",\n    w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n    w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n    w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n    wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n    wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n    wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n    wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n    cp: \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\",\n    dc: \"http://purl.org/dc/elements/1.1/\",\n    dcterms: \"http://purl.org/dc/terms/\",\n    dcmitype: \"http://purl.org/dc/dcmitype/\",\n    xsi: \"http://www.w3.org/2001/XMLSchema-instance\",\n    cx: \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n    cx1: \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n    cx2: \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n    cx3: \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n    cx4: \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n    cx5: \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n    cx6: \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n    cx7: \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n    cx8: \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n    aink: \"http://schemas.microsoft.com/office/drawing/2016/ink\",\n    am3d: \"http://schemas.microsoft.com/office/drawing/2017/model3d\",\n    w16cex: \"http://schemas.microsoft.com/office/word/2018/wordml/cex\",\n    w16cid: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n    w16: \"http://schemas.microsoft.com/office/word/2018/wordml\",\n    w16sdtdh: \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\",\n    w16se: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\"\n};\nclass DocumentAttributes extends XmlAttributeComponent {\n    constructor(ns, Ignorable){\n        super(__spreadValues({\n            Ignorable\n        }, Object.fromEntries(ns.map((n)=>[\n                n,\n                DocumentAttributeNamespaces[n]\n            ]))));\n        __publicField(this, \"xmlKeys\", __spreadValues({\n            Ignorable: \"mc:Ignorable\"\n        }, Object.fromEntries(Object.keys(DocumentAttributeNamespaces).map((key)=>[\n                key,\n                `xmlns:${key}`\n            ]))));\n    }\n}\nclass DocumentBackgroundAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            color: \"w:color\",\n            themeColor: \"w:themeColor\",\n            themeShade: \"w:themeShade\",\n            themeTint: \"w:themeTint\"\n        });\n    }\n}\nclass DocumentBackground extends XmlComponent {\n    constructor(options){\n        super(\"w:background\");\n        this.root.push(new DocumentBackgroundAttributes({\n            color: options.color === void 0 ? void 0 : hexColorValue(options.color),\n            themeColor: options.themeColor,\n            themeShade: options.themeShade === void 0 ? void 0 : uCharHexNumber(options.themeShade),\n            themeTint: options.themeTint === void 0 ? void 0 : uCharHexNumber(options.themeTint)\n        }));\n    }\n}\nclass Document extends XmlComponent {\n    constructor(options){\n        super(\"w:document\");\n        __publicField(this, \"body\");\n        this.root.push(new DocumentAttributes([\n            \"wpc\",\n            \"mc\",\n            \"o\",\n            \"r\",\n            \"m\",\n            \"v\",\n            \"wp14\",\n            \"wp\",\n            \"w10\",\n            \"w\",\n            \"w14\",\n            \"w15\",\n            \"wpg\",\n            \"wpi\",\n            \"wne\",\n            \"wps\",\n            \"cx\",\n            \"cx1\",\n            \"cx2\",\n            \"cx3\",\n            \"cx4\",\n            \"cx5\",\n            \"cx6\",\n            \"cx7\",\n            \"cx8\",\n            \"aink\",\n            \"am3d\",\n            \"w16cex\",\n            \"w16cid\",\n            \"w16\",\n            \"w16sdtdh\",\n            \"w16se\"\n        ], \"w14 w15 wp14\"));\n        this.body = new Body();\n        if (options.background) {\n            this.root.push(new DocumentBackground(options.background));\n        }\n        this.root.push(this.body);\n    }\n    add(item) {\n        this.body.push(item);\n        return this;\n    }\n    get Body() {\n        return this.body;\n    }\n}\nclass DocumentWrapper {\n    constructor(options){\n        __publicField(this, \"document\");\n        __publicField(this, \"relationships\");\n        this.document = new Document(options);\n        this.relationships = new Relationships();\n    }\n    get View() {\n        return this.document;\n    }\n    get Relationships() {\n        return this.relationships;\n    }\n}\nclass WordWrapAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass WordWrap extends XmlComponent {\n    constructor(){\n        super(\"w:wordWrap\");\n        this.root.push(new WordWrapAttributes({\n            val: 0\n        }));\n    }\n}\nconst DropCapType = {\n    NONE: \"none\",\n    DROP: \"drop\",\n    MARGIN: \"margin\"\n};\nconst FrameAnchorType = {\n    MARGIN: \"margin\",\n    PAGE: \"page\",\n    TEXT: \"text\"\n};\nconst FrameWrap = {\n    AROUND: \"around\",\n    AUTO: \"auto\",\n    NONE: \"none\",\n    NOT_BESIDE: \"notBeside\",\n    THROUGH: \"through\",\n    TIGHT: \"tight\"\n};\nconst createFrameProperties = (options)=>{\n    var _a, _b;\n    return new BuilderElement({\n        name: \"w:framePr\",\n        attributes: {\n            anchorLock: {\n                key: \"w:anchorLock\",\n                value: options.anchorLock\n            },\n            dropCap: {\n                key: \"w:dropCap\",\n                value: options.dropCap\n            },\n            width: {\n                key: \"w:w\",\n                value: options.width\n            },\n            height: {\n                key: \"w:h\",\n                value: options.height\n            },\n            x: {\n                key: \"w:x\",\n                value: options.position ? options.position.x : void 0\n            },\n            y: {\n                key: \"w:y\",\n                value: options.position ? options.position.y : void 0\n            },\n            anchorHorizontal: {\n                key: \"w:hAnchor\",\n                value: options.anchor.horizontal\n            },\n            anchorVertical: {\n                key: \"w:vAnchor\",\n                value: options.anchor.vertical\n            },\n            spaceHorizontal: {\n                key: \"w:hSpace\",\n                value: (_a = options.space) == null ? void 0 : _a.horizontal\n            },\n            spaceVertical: {\n                key: \"w:vSpace\",\n                value: (_b = options.space) == null ? void 0 : _b.vertical\n            },\n            rule: {\n                key: \"w:hRule\",\n                value: options.rule\n            },\n            alignmentX: {\n                key: \"w:xAlign\",\n                value: options.alignment ? options.alignment.x : void 0\n            },\n            alignmentY: {\n                key: \"w:yAlign\",\n                value: options.alignment ? options.alignment.y : void 0\n            },\n            lines: {\n                key: \"w:lines\",\n                value: options.lines\n            },\n            wrap: {\n                key: \"w:wrap\",\n                value: options.wrap\n            }\n        }\n    });\n};\nclass ParagraphProperties extends IgnoreIfEmptyXmlComponent {\n    constructor(options){\n        var _a, _b;\n        super(\"w:pPr\");\n        // eslint-disable-next-line functional/prefer-readonly-type\n        __publicField(this, \"numberingReferences\", []);\n        if (!options) {\n            return this;\n        }\n        if (options.heading) {\n            this.push(new Style$1(options.heading));\n        }\n        if (options.bullet) {\n            this.push(new Style$1(\"ListParagraph\"));\n        }\n        if (options.numbering) {\n            if (!options.style && !options.heading) {\n                if (!options.numbering.custom) {\n                    this.push(new Style$1(\"ListParagraph\"));\n                }\n            }\n        }\n        if (options.style) {\n            this.push(new Style$1(options.style));\n        }\n        if (options.keepNext !== void 0) {\n            this.push(new OnOffElement(\"w:keepNext\", options.keepNext));\n        }\n        if (options.keepLines !== void 0) {\n            this.push(new OnOffElement(\"w:keepLines\", options.keepLines));\n        }\n        if (options.pageBreakBefore) {\n            this.push(new PageBreakBefore());\n        }\n        if (options.frame) {\n            this.push(createFrameProperties(options.frame));\n        }\n        if (options.widowControl !== void 0) {\n            this.push(new OnOffElement(\"w:widowControl\", options.widowControl));\n        }\n        if (options.bullet) {\n            this.push(new NumberProperties(1, options.bullet.level));\n        }\n        if (options.numbering) {\n            this.numberingReferences.push({\n                reference: options.numbering.reference,\n                instance: (_a = options.numbering.instance) != null ? _a : 0\n            });\n            this.push(new NumberProperties(`${options.numbering.reference}-${(_b = options.numbering.instance) != null ? _b : 0}`, options.numbering.level));\n        } else if (options.numbering === false) {\n            this.push(new NumberProperties(0, 0));\n        }\n        if (options.border) {\n            this.push(new Border(options.border));\n        }\n        if (options.thematicBreak) {\n            this.push(new ThematicBreak());\n        }\n        if (options.shading) {\n            this.push(new Shading(options.shading));\n        }\n        if (options.wordWrap) {\n            this.push(new WordWrap());\n        }\n        if (options.overflowPunctuation) {\n            this.push(new OnOffElement(\"w:overflowPunct\", options.overflowPunctuation));\n        }\n        const tabDefinitions = [\n            ...options.rightTabStop !== void 0 ? [\n                {\n                    type: TabStopType.RIGHT,\n                    position: options.rightTabStop\n                }\n            ] : [],\n            ...options.tabStops ? options.tabStops : [],\n            ...options.leftTabStop !== void 0 ? [\n                {\n                    type: TabStopType.LEFT,\n                    position: options.leftTabStop\n                }\n            ] : []\n        ];\n        if (tabDefinitions.length > 0) {\n            this.push(new TabStop(tabDefinitions));\n        }\n        if (options.bidirectional !== void 0) {\n            this.push(new OnOffElement(\"w:bidi\", options.bidirectional));\n        }\n        if (options.spacing) {\n            this.push(new Spacing(options.spacing));\n        }\n        if (options.indent) {\n            this.push(new Indent(options.indent));\n        }\n        if (options.contextualSpacing !== void 0) {\n            this.push(new OnOffElement(\"w:contextualSpacing\", options.contextualSpacing));\n        }\n        if (options.alignment) {\n            this.push(new Alignment(options.alignment));\n        }\n        if (options.outlineLevel !== void 0) {\n            this.push(new OutlineLevel(options.outlineLevel));\n        }\n        if (options.suppressLineNumbers !== void 0) {\n            this.push(new OnOffElement(\"w:suppressLineNumbers\", options.suppressLineNumbers));\n        }\n        if (options.autoSpaceEastAsianText !== void 0) {\n            this.push(new OnOffElement(\"w:autoSpaceDN\", options.autoSpaceEastAsianText));\n        }\n        if (options.run) {\n            this.push(new RunProperties(options.run));\n        }\n    }\n    push(item) {\n        this.root.push(item);\n    }\n    prepForXml(context) {\n        if (context.viewWrapper instanceof DocumentWrapper) {\n            for (const reference of this.numberingReferences){\n                context.file.Numbering.createConcreteNumberingInstance(reference.reference, reference.instance);\n            }\n        }\n        return super.prepForXml(context);\n    }\n}\nclass Paragraph extends FileChild {\n    constructor(options){\n        super(\"w:p\");\n        __publicField(this, \"properties\");\n        if (typeof options === \"string\") {\n            this.properties = new ParagraphProperties({});\n            this.root.push(this.properties);\n            this.root.push(new TextRun(options));\n            return this;\n        }\n        this.properties = new ParagraphProperties(options);\n        this.root.push(this.properties);\n        if (options.text) {\n            this.root.push(new TextRun(options.text));\n        }\n        if (options.children) {\n            for (const child of options.children){\n                if (child instanceof Bookmark) {\n                    this.root.push(child.start);\n                    for (const textRun of child.children){\n                        this.root.push(textRun);\n                    }\n                    this.root.push(child.end);\n                    continue;\n                }\n                this.root.push(child);\n            }\n        }\n    }\n    prepForXml(context) {\n        for (const element of this.root){\n            if (element instanceof ExternalHyperlink) {\n                const index = this.root.indexOf(element);\n                const concreteHyperlink = new ConcreteHyperlink(element.options.children, uniqueId());\n                context.viewWrapper.Relationships.createRelationship(concreteHyperlink.linkId, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\", element.options.link, TargetModeType.EXTERNAL);\n                this.root[index] = concreteHyperlink;\n            }\n        }\n        return super.prepForXml(context);\n    }\n    addRunToFront(run) {\n        this.root.splice(1, 0, run);\n        return this;\n    }\n}\nlet Math$1 = class Math2 extends XmlComponent {\n    constructor(options){\n        super(\"m:oMath\");\n        for (const child of options.children){\n            this.root.push(child);\n        }\n    }\n};\nclass MathText extends XmlComponent {\n    constructor(text){\n        super(\"m:t\");\n        this.root.push(text);\n    }\n}\nclass MathRun extends XmlComponent {\n    constructor(text){\n        super(\"m:r\");\n        this.root.push(new MathText(text));\n    }\n}\nclass MathDenominator extends XmlComponent {\n    constructor(children){\n        super(\"m:den\");\n        for (const child of children){\n            this.root.push(child);\n        }\n    }\n}\nclass MathNumerator extends XmlComponent {\n    constructor(children){\n        super(\"m:num\");\n        for (const child of children){\n            this.root.push(child);\n        }\n    }\n}\nclass MathFraction extends XmlComponent {\n    constructor(options){\n        super(\"m:f\");\n        this.root.push(new MathNumerator(options.numerator));\n        this.root.push(new MathDenominator(options.denominator));\n    }\n}\nconst createMathAccentCharacter = ({ accent })=>new BuilderElement({\n        name: \"m:chr\",\n        attributes: {\n            accent: {\n                key: \"m:val\",\n                value: accent\n            }\n        }\n    });\nconst createMathBase = ({ children })=>new BuilderElement({\n        name: \"m:e\",\n        children\n    });\nconst createMathLimitLocation = ({ value })=>new BuilderElement({\n        name: \"m:limLoc\",\n        attributes: {\n            value: {\n                key: \"m:val\",\n                value: value || \"undOvr\"\n            }\n        }\n    });\nconst createMathSubScriptHide = ()=>new BuilderElement({\n        name: \"m:subHide\",\n        attributes: {\n            hide: {\n                key: \"m:val\",\n                value: 1\n            }\n        }\n    });\nconst createMathSuperScriptHide = ()=>new BuilderElement({\n        name: \"m:supHide\",\n        attributes: {\n            hide: {\n                key: \"m:val\",\n                value: 1\n            }\n        }\n    });\nconst createMathNAryProperties = ({ accent, hasSuperScript, hasSubScript, limitLocationVal })=>new BuilderElement({\n        name: \"m:naryPr\",\n        children: [\n            ...!!accent ? [\n                createMathAccentCharacter({\n                    accent\n                })\n            ] : [],\n            createMathLimitLocation({\n                value: limitLocationVal\n            }),\n            ...!hasSuperScript ? [\n                createMathSuperScriptHide()\n            ] : [],\n            ...!hasSubScript ? [\n                createMathSubScriptHide()\n            ] : []\n        ]\n    });\nconst createMathSubScriptElement = ({ children })=>new BuilderElement({\n        name: \"m:sub\",\n        children\n    });\nconst createMathSuperScriptElement = ({ children })=>new BuilderElement({\n        name: \"m:sup\",\n        children\n    });\nclass MathSum extends XmlComponent {\n    constructor(options){\n        super(\"m:nary\");\n        this.root.push(createMathNAryProperties({\n            accent: \"∑\",\n            hasSuperScript: !!options.superScript,\n            hasSubScript: !!options.subScript\n        }));\n        if (!!options.subScript) {\n            this.root.push(createMathSubScriptElement({\n                children: options.subScript\n            }));\n        }\n        if (!!options.superScript) {\n            this.root.push(createMathSuperScriptElement({\n                children: options.superScript\n            }));\n        }\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n    }\n}\nclass MathIntegral extends XmlComponent {\n    constructor(options){\n        super(\"m:nary\");\n        this.root.push(createMathNAryProperties({\n            accent: \"\",\n            hasSuperScript: !!options.superScript,\n            hasSubScript: !!options.subScript,\n            limitLocationVal: \"subSup\"\n        }));\n        if (!!options.subScript) {\n            this.root.push(createMathSubScriptElement({\n                children: options.subScript\n            }));\n        }\n        if (!!options.superScript) {\n            this.root.push(createMathSuperScriptElement({\n                children: options.superScript\n            }));\n        }\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n    }\n}\nclass MathLimit extends XmlComponent {\n    constructor(children){\n        super(\"m:lim\");\n        for (const child of children){\n            this.root.push(child);\n        }\n    }\n}\nclass MathLimitUpper extends XmlComponent {\n    constructor(options){\n        super(\"m:limUpp\");\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n        this.root.push(new MathLimit(options.limit));\n    }\n}\nclass MathLimitLower extends XmlComponent {\n    constructor(options){\n        super(\"m:limLow\");\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n        this.root.push(new MathLimit(options.limit));\n    }\n}\nconst createMathSuperScriptProperties = ()=>new BuilderElement({\n        name: \"m:sSupPr\"\n    });\nclass MathSuperScript extends XmlComponent {\n    constructor(options){\n        super(\"m:sSup\");\n        this.root.push(createMathSuperScriptProperties());\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n        this.root.push(createMathSuperScriptElement({\n            children: options.superScript\n        }));\n    }\n}\nconst createMathSubScriptProperties = ()=>new BuilderElement({\n        name: \"m:sSubPr\"\n    });\nclass MathSubScript extends XmlComponent {\n    constructor(options){\n        super(\"m:sSub\");\n        this.root.push(createMathSubScriptProperties());\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n        this.root.push(createMathSubScriptElement({\n            children: options.subScript\n        }));\n    }\n}\nconst createMathSubSuperScriptProperties = ()=>new BuilderElement({\n        name: \"m:sSubSupPr\"\n    });\nclass MathSubSuperScript extends XmlComponent {\n    constructor(options){\n        super(\"m:sSubSup\");\n        this.root.push(createMathSubSuperScriptProperties());\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n        this.root.push(createMathSubScriptElement({\n            children: options.subScript\n        }));\n        this.root.push(createMathSuperScriptElement({\n            children: options.superScript\n        }));\n    }\n}\nconst createMathPreSubSuperScriptProperties = ()=>new BuilderElement({\n        name: \"m:sPrePr\"\n    });\nclass MathPreSubSuperScript extends BuilderElement {\n    constructor({ children, subScript, superScript }){\n        super({\n            name: \"m:sPre\",\n            children: [\n                createMathPreSubSuperScriptProperties(),\n                createMathBase({\n                    children\n                }),\n                createMathSubScriptElement({\n                    children: subScript\n                }),\n                createMathSuperScriptElement({\n                    children: superScript\n                })\n            ]\n        });\n    }\n}\nconst WORKAROUND4 = \"\";\nclass MathDegree extends XmlComponent {\n    constructor(children){\n        super(\"m:deg\");\n        if (!!children) {\n            for (const child of children){\n                this.root.push(child);\n            }\n        }\n    }\n}\nclass MathDegreeHideAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            hide: \"m:val\"\n        });\n    }\n}\nclass MathDegreeHide extends XmlComponent {\n    constructor(){\n        super(\"m:degHide\");\n        this.root.push(new MathDegreeHideAttributes({\n            hide: 1\n        }));\n    }\n}\nclass MathRadicalProperties extends XmlComponent {\n    constructor(hasDegree){\n        super(\"m:radPr\");\n        if (!hasDegree) {\n            this.root.push(new MathDegreeHide());\n        }\n    }\n}\nclass MathRadical extends XmlComponent {\n    constructor(options){\n        super(\"m:rad\");\n        this.root.push(new MathRadicalProperties(!!options.degree));\n        this.root.push(new MathDegree(options.degree));\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n    }\n}\nclass MathFunctionName extends XmlComponent {\n    constructor(children){\n        super(\"m:fName\");\n        for (const child of children){\n            this.root.push(child);\n        }\n    }\n}\nclass MathFunctionProperties extends XmlComponent {\n    constructor(){\n        super(\"m:funcPr\");\n    }\n}\nclass MathFunction extends XmlComponent {\n    constructor(options){\n        super(\"m:func\");\n        this.root.push(new MathFunctionProperties());\n        this.root.push(new MathFunctionName(options.name));\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n    }\n}\nconst createMathBeginningCharacter = ({ character })=>new BuilderElement({\n        name: \"m:begChr\",\n        attributes: {\n            character: {\n                key: \"m:val\",\n                value: character\n            }\n        }\n    });\nconst createMathEndingCharacter = ({ character })=>new BuilderElement({\n        name: \"m:endChr\",\n        attributes: {\n            character: {\n                key: \"m:val\",\n                value: character\n            }\n        }\n    });\nconst createMathBracketProperties = ({ characters })=>new BuilderElement({\n        name: \"m:dPr\",\n        children: !!characters ? [\n            createMathBeginningCharacter({\n                character: characters.beginningCharacter\n            }),\n            createMathEndingCharacter({\n                character: characters.endingCharacter\n            })\n        ] : []\n    });\nclass MathRoundBrackets extends XmlComponent {\n    constructor(options){\n        super(\"m:d\");\n        this.root.push(createMathBracketProperties({}));\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n    }\n}\nclass MathSquareBrackets extends XmlComponent {\n    constructor(options){\n        super(\"m:d\");\n        this.root.push(createMathBracketProperties({\n            characters: {\n                beginningCharacter: \"[\",\n                endingCharacter: \"]\"\n            }\n        }));\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n    }\n}\nclass MathCurlyBrackets extends XmlComponent {\n    constructor(options){\n        super(\"m:d\");\n        this.root.push(createMathBracketProperties({\n            characters: {\n                beginningCharacter: \"{\",\n                endingCharacter: \"}\"\n            }\n        }));\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n    }\n}\nclass MathAngledBrackets extends XmlComponent {\n    constructor(options){\n        super(\"m:d\");\n        this.root.push(createMathBracketProperties({\n            characters: {\n                beginningCharacter: \"〈\",\n                endingCharacter: \"〉\"\n            }\n        }));\n        this.root.push(createMathBase({\n            children: options.children\n        }));\n    }\n}\nclass TableGrid extends XmlComponent {\n    constructor(widths){\n        super(\"w:tblGrid\");\n        for (const width of widths){\n            this.root.push(new GridCol(width));\n        }\n    }\n}\nclass GridCol extends XmlComponent {\n    constructor(width){\n        super(\"w:gridCol\");\n        if (width !== void 0) {\n            this.root.push(new NextAttributeComponent({\n                width: {\n                    key: \"w:w\",\n                    value: twipsMeasureValue(width)\n                }\n            }));\n        }\n    }\n}\nconst TableCellMarginElementType = {\n    TABLE: \"w:tblCellMar\",\n    TABLE_CELL: \"w:tcMar\"\n};\nclass TableCellMargin extends IgnoreIfEmptyXmlComponent {\n    constructor(type2, { marginUnitType = WidthType.DXA, top, left, bottom, right }){\n        super(type2);\n        if (top !== void 0) {\n            this.root.push(new TableWidthElement(\"w:top\", {\n                type: marginUnitType,\n                size: top\n            }));\n        }\n        if (left !== void 0) {\n            this.root.push(new TableWidthElement(\"w:left\", {\n                type: marginUnitType,\n                size: left\n            }));\n        }\n        if (bottom !== void 0) {\n            this.root.push(new TableWidthElement(\"w:bottom\", {\n                type: marginUnitType,\n                size: bottom\n            }));\n        }\n        if (right !== void 0) {\n            this.root.push(new TableWidthElement(\"w:right\", {\n                type: marginUnitType,\n                size: right\n            }));\n        }\n    }\n}\nconst WidthType = {\n    /** Auto. */ AUTO: \"auto\",\n    /** Value is in twentieths of a point */ DXA: \"dxa\",\n    /** No (empty) value. */ NIL: \"nil\",\n    /** Value is in percentage. */ PERCENTAGE: \"pct\"\n};\nclass TableWidthElement extends XmlComponent {\n    constructor(name, { type: type2 = WidthType.AUTO, size }){\n        super(name);\n        let tableWidthValue = size;\n        if (type2 === WidthType.PERCENTAGE && typeof size === \"number\") {\n            tableWidthValue = `${size}%`;\n        }\n        this.root.push(new NextAttributeComponent({\n            type: {\n                key: \"w:type\",\n                value: type2\n            },\n            size: {\n                key: \"w:w\",\n                value: measurementOrPercentValue(tableWidthValue)\n            }\n        }));\n    }\n}\nclass TableCellBorders extends IgnoreIfEmptyXmlComponent {\n    constructor(options){\n        super(\"w:tcBorders\");\n        if (options.top) {\n            this.root.push(new BorderElement(\"w:top\", options.top));\n        }\n        if (options.start) {\n            this.root.push(new BorderElement(\"w:start\", options.start));\n        }\n        if (options.left) {\n            this.root.push(new BorderElement(\"w:left\", options.left));\n        }\n        if (options.bottom) {\n            this.root.push(new BorderElement(\"w:bottom\", options.bottom));\n        }\n        if (options.end) {\n            this.root.push(new BorderElement(\"w:end\", options.end));\n        }\n        if (options.right) {\n            this.root.push(new BorderElement(\"w:right\", options.right));\n        }\n    }\n}\nclass GridSpanAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass GridSpan extends XmlComponent {\n    constructor(value){\n        super(\"w:gridSpan\");\n        this.root.push(new GridSpanAttributes({\n            val: decimalNumber(value)\n        }));\n    }\n}\nconst VerticalMergeType = {\n    /**\n   * Cell that is merged with upper one.\n   */ CONTINUE: \"continue\",\n    /**\n   * Cell that is starting the vertical merge.\n   */ RESTART: \"restart\"\n};\nclass VerticalMergeAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass VerticalMerge extends XmlComponent {\n    constructor(value){\n        super(\"w:vMerge\");\n        this.root.push(new VerticalMergeAttributes({\n            val: value\n        }));\n    }\n}\nconst TextDirection = {\n    BOTTOM_TO_TOP_LEFT_TO_RIGHT: \"btLr\",\n    LEFT_TO_RIGHT_TOP_TO_BOTTOM: \"lrTb\",\n    TOP_TO_BOTTOM_RIGHT_TO_LEFT: \"tbRl\"\n};\nclass TDirectionAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass TDirection extends XmlComponent {\n    constructor(value){\n        super(\"w:textDirection\");\n        this.root.push(new TDirectionAttributes({\n            val: value\n        }));\n    }\n}\nclass TableCellProperties extends IgnoreIfEmptyXmlComponent {\n    constructor(options){\n        super(\"w:tcPr\");\n        if (options.width) {\n            this.root.push(new TableWidthElement(\"w:tcW\", options.width));\n        }\n        if (options.columnSpan) {\n            this.root.push(new GridSpan(options.columnSpan));\n        }\n        if (options.verticalMerge) {\n            this.root.push(new VerticalMerge(options.verticalMerge));\n        } else if (options.rowSpan && options.rowSpan > 1) {\n            this.root.push(new VerticalMerge(VerticalMergeType.RESTART));\n        }\n        if (options.borders) {\n            this.root.push(new TableCellBorders(options.borders));\n        }\n        if (options.shading) {\n            this.root.push(new Shading(options.shading));\n        }\n        if (options.margins) {\n            this.root.push(new TableCellMargin(TableCellMarginElementType.TABLE_CELL, options.margins));\n        }\n        if (options.textDirection) {\n            this.root.push(new TDirection(options.textDirection));\n        }\n        if (options.verticalAlign) {\n            this.root.push(new VerticalAlignElement(options.verticalAlign));\n        }\n    }\n}\nclass TableCell extends XmlComponent {\n    constructor(options){\n        super(\"w:tc\");\n        this.options = options;\n        this.root.push(new TableCellProperties(options));\n        for (const child of options.children){\n            this.root.push(child);\n        }\n    }\n    prepForXml(context) {\n        if (!(this.root[this.root.length - 1] instanceof Paragraph)) {\n            this.root.push(new Paragraph({}));\n        }\n        return super.prepForXml(context);\n    }\n}\nconst NONE_BORDER = {\n    style: BorderStyle.NONE,\n    size: 0,\n    color: \"auto\"\n};\nconst DEFAULT_BORDER = {\n    style: BorderStyle.SINGLE,\n    size: 4,\n    color: \"auto\"\n};\nclass TableBorders extends XmlComponent {\n    constructor(options){\n        super(\"w:tblBorders\");\n        if (options.top) {\n            this.root.push(new BorderElement(\"w:top\", options.top));\n        } else {\n            this.root.push(new BorderElement(\"w:top\", DEFAULT_BORDER));\n        }\n        if (options.left) {\n            this.root.push(new BorderElement(\"w:left\", options.left));\n        } else {\n            this.root.push(new BorderElement(\"w:left\", DEFAULT_BORDER));\n        }\n        if (options.bottom) {\n            this.root.push(new BorderElement(\"w:bottom\", options.bottom));\n        } else {\n            this.root.push(new BorderElement(\"w:bottom\", DEFAULT_BORDER));\n        }\n        if (options.right) {\n            this.root.push(new BorderElement(\"w:right\", options.right));\n        } else {\n            this.root.push(new BorderElement(\"w:right\", DEFAULT_BORDER));\n        }\n        if (options.insideHorizontal) {\n            this.root.push(new BorderElement(\"w:insideH\", options.insideHorizontal));\n        } else {\n            this.root.push(new BorderElement(\"w:insideH\", DEFAULT_BORDER));\n        }\n        if (options.insideVertical) {\n            this.root.push(new BorderElement(\"w:insideV\", options.insideVertical));\n        } else {\n            this.root.push(new BorderElement(\"w:insideV\", DEFAULT_BORDER));\n        }\n    }\n}\n__publicField(TableBorders, \"NONE\", {\n    top: NONE_BORDER,\n    bottom: NONE_BORDER,\n    left: NONE_BORDER,\n    right: NONE_BORDER,\n    insideHorizontal: NONE_BORDER,\n    insideVertical: NONE_BORDER\n});\nconst TableAnchorType = {\n    MARGIN: \"margin\",\n    PAGE: \"page\",\n    TEXT: \"text\"\n};\nconst RelativeHorizontalPosition = {\n    CENTER: \"center\",\n    INSIDE: \"inside\",\n    LEFT: \"left\",\n    OUTSIDE: \"outside\",\n    RIGHT: \"right\"\n};\nconst RelativeVerticalPosition = {\n    CENTER: \"center\",\n    INSIDE: \"inside\",\n    BOTTOM: \"bottom\",\n    OUTSIDE: \"outside\",\n    INLINE: \"inline\",\n    TOP: \"top\"\n};\nconst OverlapType = {\n    NEVER: \"never\",\n    OVERLAP: \"overlap\"\n};\nclass TableFloatProperties extends XmlComponent {\n    constructor({ horizontalAnchor, verticalAnchor, absoluteHorizontalPosition, relativeHorizontalPosition, absoluteVerticalPosition, relativeVerticalPosition, bottomFromText, topFromText, leftFromText, rightFromText, overlap }){\n        super(\"w:tblpPr\");\n        this.root.push(new NextAttributeComponent({\n            leftFromText: {\n                key: \"w:leftFromText\",\n                value: leftFromText === void 0 ? void 0 : twipsMeasureValue(leftFromText)\n            },\n            rightFromText: {\n                key: \"w:rightFromText\",\n                value: rightFromText === void 0 ? void 0 : twipsMeasureValue(rightFromText)\n            },\n            topFromText: {\n                key: \"w:topFromText\",\n                value: topFromText === void 0 ? void 0 : twipsMeasureValue(topFromText)\n            },\n            bottomFromText: {\n                key: \"w:bottomFromText\",\n                value: bottomFromText === void 0 ? void 0 : twipsMeasureValue(bottomFromText)\n            },\n            absoluteHorizontalPosition: {\n                key: \"w:tblpX\",\n                value: absoluteHorizontalPosition === void 0 ? void 0 : signedTwipsMeasureValue(absoluteHorizontalPosition)\n            },\n            absoluteVerticalPosition: {\n                key: \"w:tblpY\",\n                value: absoluteVerticalPosition === void 0 ? void 0 : signedTwipsMeasureValue(absoluteVerticalPosition)\n            },\n            horizontalAnchor: {\n                key: \"w:horzAnchor\",\n                value: horizontalAnchor === void 0 ? void 0 : horizontalAnchor\n            },\n            relativeHorizontalPosition: {\n                key: \"w:tblpXSpec\",\n                value: relativeHorizontalPosition\n            },\n            relativeVerticalPosition: {\n                key: \"w:tblpYSpec\",\n                value: relativeVerticalPosition\n            },\n            verticalAnchor: {\n                key: \"w:vertAnchor\",\n                value: verticalAnchor\n            }\n        }));\n        if (overlap) {\n            this.root.push(new StringEnumValueElement(\"w:tblOverlap\", overlap));\n        }\n    }\n}\nconst TableLayoutType = {\n    AUTOFIT: \"autofit\",\n    FIXED: \"fixed\"\n};\nclass TableLayoutAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            type: \"w:type\"\n        });\n    }\n}\nclass TableLayout extends XmlComponent {\n    constructor(type2){\n        super(\"w:tblLayout\");\n        this.root.push(new TableLayoutAttributes({\n            type: type2\n        }));\n    }\n}\nconst CellSpacingType = {\n    /** Value is in twentieths of a point */ DXA: \"dxa\"\n};\nclass TableCellSpacingElement extends XmlComponent {\n    constructor({ type: type2 = CellSpacingType.DXA, value }){\n        super(\"w:tblCellSpacing\");\n        this.root.push(new NextAttributeComponent({\n            type: {\n                key: \"w:type\",\n                value: type2\n            },\n            value: {\n                key: \"w:w\",\n                value: measurementOrPercentValue(value)\n            }\n        }));\n    }\n}\nclass TableProperties extends IgnoreIfEmptyXmlComponent {\n    constructor(options){\n        super(\"w:tblPr\");\n        if (options.style) {\n            this.root.push(new StringValueElement(\"w:tblStyle\", options.style));\n        }\n        if (options.float) {\n            this.root.push(new TableFloatProperties(options.float));\n        }\n        if (options.visuallyRightToLeft !== void 0) {\n            this.root.push(new OnOffElement(\"w:bidiVisual\", options.visuallyRightToLeft));\n        }\n        if (options.width) {\n            this.root.push(new TableWidthElement(\"w:tblW\", options.width));\n        }\n        if (options.alignment) {\n            this.root.push(new Alignment(options.alignment));\n        }\n        if (options.indent) {\n            this.root.push(new TableWidthElement(\"w:tblInd\", options.indent));\n        }\n        if (options.borders) {\n            this.root.push(new TableBorders(options.borders));\n        }\n        if (options.shading) {\n            this.root.push(new Shading(options.shading));\n        }\n        if (options.layout) {\n            this.root.push(new TableLayout(options.layout));\n        }\n        if (options.cellMargin) {\n            this.root.push(new TableCellMargin(TableCellMarginElementType.TABLE, options.cellMargin));\n        }\n        if (options.cellSpacing) {\n            this.root.push(new TableCellSpacingElement(options.cellSpacing));\n        }\n    }\n}\nclass Table extends FileChild {\n    constructor({ rows, width, // eslint-disable-next-line functional/immutable-data\n    columnWidths = Array(Math.max(...rows.map((row)=>row.CellCount))).fill(100), margins, indent, float, layout, style, borders, alignment, visuallyRightToLeft, cellSpacing }){\n        super(\"w:tbl\");\n        this.root.push(new TableProperties({\n            borders: borders != null ? borders : {},\n            width: width != null ? width : {\n                size: 100\n            },\n            indent,\n            float,\n            layout,\n            style,\n            alignment,\n            cellMargin: margins,\n            visuallyRightToLeft,\n            cellSpacing\n        }));\n        this.root.push(new TableGrid(columnWidths));\n        for (const row of rows){\n            this.root.push(row);\n        }\n        rows.forEach((row, rowIndex)=>{\n            if (rowIndex === rows.length - 1) {\n                return;\n            }\n            let columnIndex = 0;\n            row.cells.forEach((cell)=>{\n                if (cell.options.rowSpan && cell.options.rowSpan > 1) {\n                    const continueCell = new TableCell({\n                        // the inserted CONTINUE cell has rowSpan, and will be handled when process the next row\n                        rowSpan: cell.options.rowSpan - 1,\n                        columnSpan: cell.options.columnSpan,\n                        borders: cell.options.borders,\n                        children: [],\n                        verticalMerge: VerticalMergeType.CONTINUE\n                    });\n                    rows[rowIndex + 1].addCellToColumnIndex(continueCell, columnIndex);\n                }\n                columnIndex += cell.options.columnSpan || 1;\n            });\n        });\n    }\n}\nconst HeightRule = {\n    /** Height is determined based on the content, so value is ignored. */ AUTO: \"auto\",\n    /** At least the value specified */ ATLEAST: \"atLeast\",\n    /** Exactly the value specified */ EXACT: \"exact\"\n};\nclass TableRowHeightAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            value: \"w:val\",\n            rule: \"w:hRule\"\n        });\n    }\n}\nclass TableRowHeight extends XmlComponent {\n    constructor(value, rule){\n        super(\"w:trHeight\");\n        this.root.push(new TableRowHeightAttributes({\n            value: twipsMeasureValue(value),\n            rule\n        }));\n    }\n}\nclass TableRowProperties extends IgnoreIfEmptyXmlComponent {\n    constructor(options){\n        super(\"w:trPr\");\n        if (options.cantSplit !== void 0) {\n            this.root.push(new OnOffElement(\"w:cantSplit\", options.cantSplit));\n        }\n        if (options.tableHeader !== void 0) {\n            this.root.push(new OnOffElement(\"w:tblHeader\", options.tableHeader));\n        }\n        if (options.height) {\n            this.root.push(new TableRowHeight(options.height.value, options.height.rule));\n        }\n        if (options.cellSpacing) {\n            this.root.push(new TableCellSpacingElement(options.cellSpacing));\n        }\n    }\n}\nclass TableRow extends XmlComponent {\n    constructor(options){\n        super(\"w:tr\");\n        this.options = options;\n        this.root.push(new TableRowProperties(options));\n        for (const child of options.children){\n            this.root.push(child);\n        }\n    }\n    get CellCount() {\n        return this.options.children.length;\n    }\n    get cells() {\n        return this.root.filter((xmlComponent)=>xmlComponent instanceof TableCell);\n    }\n    addCellToIndex(cell, index) {\n        this.root.splice(index + 1, 0, cell);\n    }\n    addCellToColumnIndex(cell, columnIndex) {\n        const rootIndex = this.columnIndexToRootIndex(columnIndex, true);\n        this.addCellToIndex(cell, rootIndex - 1);\n    }\n    rootIndexToColumnIndex(rootIndex) {\n        if (rootIndex < 1 || rootIndex >= this.root.length) {\n            throw new Error(`cell 'rootIndex' should between 1 to ${this.root.length - 1}`);\n        }\n        let colIdx = 0;\n        for(let rootIdx = 1; rootIdx < rootIndex; rootIdx++){\n            const cell = this.root[rootIdx];\n            colIdx += cell.options.columnSpan || 1;\n        }\n        return colIdx;\n    }\n    columnIndexToRootIndex(columnIndex, allowEndNewCell = false) {\n        if (columnIndex < 0) {\n            throw new Error(`cell 'columnIndex' should not less than zero`);\n        }\n        let colIdx = 0;\n        let rootIdx = 1;\n        while(colIdx <= columnIndex){\n            if (rootIdx >= this.root.length) {\n                if (allowEndNewCell) {\n                    return this.root.length;\n                } else {\n                    throw new Error(`cell 'columnIndex' should not great than ${colIdx - 1}`);\n                }\n            }\n            const cell = this.root[rootIdx];\n            rootIdx += 1;\n            colIdx += cell && cell.options.columnSpan || 1;\n        }\n        return rootIdx - 1;\n    }\n}\nclass AppPropertiesAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            xmlns: \"xmlns\",\n            vt: \"xmlns:vt\"\n        });\n    }\n}\nclass AppProperties extends XmlComponent {\n    constructor(){\n        super(\"Properties\");\n        this.root.push(new AppPropertiesAttributes({\n            xmlns: \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\",\n            vt: \"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"\n        }));\n    }\n}\nclass ContentTypeAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            xmlns: \"xmlns\"\n        });\n    }\n}\nclass DefaultAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            contentType: \"ContentType\",\n            extension: \"Extension\"\n        });\n    }\n}\nclass Default extends XmlComponent {\n    constructor(contentType, extension){\n        super(\"Default\");\n        this.root.push(new DefaultAttributes({\n            contentType,\n            extension\n        }));\n    }\n}\nclass OverrideAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            contentType: \"ContentType\",\n            partName: \"PartName\"\n        });\n    }\n}\nclass Override extends XmlComponent {\n    constructor(contentType, partName){\n        super(\"Override\");\n        this.root.push(new OverrideAttributes({\n            contentType,\n            partName\n        }));\n    }\n}\nclass ContentTypes extends XmlComponent {\n    constructor(){\n        super(\"Types\");\n        this.root.push(new ContentTypeAttributes({\n            xmlns: \"http://schemas.openxmlformats.org/package/2006/content-types\"\n        }));\n        this.root.push(new Default(\"image/png\", \"png\"));\n        this.root.push(new Default(\"image/jpeg\", \"jpeg\"));\n        this.root.push(new Default(\"image/jpeg\", \"jpg\"));\n        this.root.push(new Default(\"image/bmp\", \"bmp\"));\n        this.root.push(new Default(\"image/gif\", \"gif\"));\n        this.root.push(new Default(\"image/svg+xml\", \"svg\"));\n        this.root.push(new Default(\"application/vnd.openxmlformats-package.relationships+xml\", \"rels\"));\n        this.root.push(new Default(\"application/xml\", \"xml\"));\n        this.root.push(new Default(\"application/vnd.openxmlformats-officedocument.obfuscatedFont\", \"odttf\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\", \"/word/document.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\", \"/word/styles.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-package.core-properties+xml\", \"/docProps/core.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.custom-properties+xml\", \"/docProps/custom.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.extended-properties+xml\", \"/docProps/app.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\", \"/word/numbering.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\", \"/word/footnotes.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\", \"/word/settings.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\", \"/word/comments.xml\"));\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml\", \"/word/fontTable.xml\"));\n    }\n    addFooter(index) {\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\", `/word/footer${index}.xml`));\n    }\n    addHeader(index) {\n        this.root.push(new Override(\"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\", `/word/header${index}.xml`));\n    }\n}\nclass CoreProperties extends XmlComponent {\n    constructor(options){\n        super(\"cp:coreProperties\");\n        this.root.push(new DocumentAttributes([\n            \"cp\",\n            \"dc\",\n            \"dcterms\",\n            \"dcmitype\",\n            \"xsi\"\n        ]));\n        if (options.title) {\n            this.root.push(new StringContainer(\"dc:title\", options.title));\n        }\n        if (options.subject) {\n            this.root.push(new StringContainer(\"dc:subject\", options.subject));\n        }\n        if (options.creator) {\n            this.root.push(new StringContainer(\"dc:creator\", options.creator));\n        }\n        if (options.keywords) {\n            this.root.push(new StringContainer(\"cp:keywords\", options.keywords));\n        }\n        if (options.description) {\n            this.root.push(new StringContainer(\"dc:description\", options.description));\n        }\n        if (options.lastModifiedBy) {\n            this.root.push(new StringContainer(\"cp:lastModifiedBy\", options.lastModifiedBy));\n        }\n        if (options.revision) {\n            this.root.push(new StringContainer(\"cp:revision\", String(options.revision)));\n        }\n        this.root.push(new TimestampElement(\"dcterms:created\"));\n        this.root.push(new TimestampElement(\"dcterms:modified\"));\n    }\n}\nclass TimestampElementProperties extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            type: \"xsi:type\"\n        });\n    }\n}\nclass TimestampElement extends XmlComponent {\n    constructor(name){\n        super(name);\n        this.root.push(new TimestampElementProperties({\n            type: \"dcterms:W3CDTF\"\n        }));\n        this.root.push(dateTimeValue(/* @__PURE__ */ new Date()));\n    }\n}\nclass CustomPropertiesAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            xmlns: \"xmlns\",\n            vt: \"xmlns:vt\"\n        });\n    }\n}\nclass CustomPropertyAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            fmtid: \"fmtid\",\n            pid: \"pid\",\n            name: \"name\"\n        });\n    }\n}\nclass CustomProperty extends XmlComponent {\n    constructor(id, properties){\n        super(\"property\");\n        this.root.push(new CustomPropertyAttributes({\n            fmtid: \"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}\",\n            pid: id.toString(),\n            name: properties.name\n        }));\n        this.root.push(new CustomPropertyValue(properties.value));\n    }\n}\nclass CustomPropertyValue extends XmlComponent {\n    constructor(value){\n        super(\"vt:lpwstr\");\n        this.root.push(value);\n    }\n}\nclass CustomProperties extends XmlComponent {\n    constructor(properties){\n        super(\"Properties\");\n        // eslint-disable-next-line functional/prefer-readonly-type\n        __publicField(this, \"nextId\");\n        // eslint-disable-next-line functional/prefer-readonly-type\n        __publicField(this, \"properties\", []);\n        this.root.push(new CustomPropertiesAttributes({\n            xmlns: \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\",\n            vt: \"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"\n        }));\n        this.nextId = 2;\n        for (const property of properties){\n            this.addCustomProperty(property);\n        }\n    }\n    prepForXml(context) {\n        this.properties.forEach((x)=>this.root.push(x));\n        return super.prepForXml(context);\n    }\n    addCustomProperty(property) {\n        this.properties.push(new CustomProperty(this.nextId++, property));\n    }\n}\nconst CharacterSet = {\n    ANSI: \"00\",\n    DEFAULT: \"01\",\n    SYMBOL: \"02\",\n    MAC: \"4D\",\n    JIS: \"80\",\n    HANGUL: \"81\",\n    JOHAB: \"82\",\n    GB_2312: \"86\",\n    CHINESEBIG5: \"88\",\n    GREEK: \"A1\",\n    TURKISH: \"A2\",\n    VIETNAMESE: \"A3\",\n    HEBREW: \"B1\",\n    ARABIC: \"B2\",\n    BALTIC: \"BA\",\n    RUSSIAN: \"CC\",\n    THAI: \"DE\",\n    EASTEUROPE: \"EE\",\n    OEM: \"FF\"\n};\nconst createFontRelationship = ({ id, fontKey, subsetted }, name)=>new BuilderElement({\n        name,\n        attributes: __spreadValues({\n            id: {\n                key: \"r:id\",\n                value: id\n            }\n        }, fontKey ? {\n            fontKey: {\n                key: \"w:fontKey\",\n                value: `{${fontKey}}`\n            }\n        } : {}),\n        children: [\n            ...subsetted ? [\n                new OnOffElement(\"w:subsetted\", subsetted)\n            ] : []\n        ]\n    });\nconst createFont = ({ name, altName, panose1, charset, family, notTrueType, pitch, sig, embedRegular, embedBold, embedItalic, embedBoldItalic })=>// http://www.datypic.com/sc/ooxml/e-w_font-1.html\n    new BuilderElement({\n        name: \"w:font\",\n        attributes: {\n            name: {\n                key: \"w:name\",\n                value: name\n            }\n        },\n        children: [\n            // http://www.datypic.com/sc/ooxml/e-w_altName-1.html\n            ...altName ? [\n                createStringElement(\"w:altName\", altName)\n            ] : [],\n            // http://www.datypic.com/sc/ooxml/e-w_panose1-1.html\n            ...panose1 ? [\n                createStringElement(\"w:panose1\", panose1)\n            ] : [],\n            // http://www.datypic.com/sc/ooxml/e-w_charset-1.html\n            ...charset ? [\n                createStringElement(\"w:charset\", charset)\n            ] : [],\n            // http://www.datypic.com/sc/ooxml/e-w_family-1.html\n            ...[\n                createStringElement(\"w:family\", family)\n            ],\n            // http://www.datypic.com/sc/ooxml/e-w_notTrueType-1.html\n            ...notTrueType ? [\n                new OnOffElement(\"w:notTrueType\", notTrueType)\n            ] : [],\n            ...[\n                createStringElement(\"w:pitch\", pitch)\n            ],\n            // http://www.datypic.com/sc/ooxml/e-w_sig-1.html\n            ...sig ? [\n                new BuilderElement({\n                    name: \"w:sig\",\n                    attributes: {\n                        usb0: {\n                            key: \"w:usb0\",\n                            value: sig.usb0\n                        },\n                        usb1: {\n                            key: \"w:usb1\",\n                            value: sig.usb1\n                        },\n                        usb2: {\n                            key: \"w:usb2\",\n                            value: sig.usb2\n                        },\n                        usb3: {\n                            key: \"w:usb3\",\n                            value: sig.usb3\n                        },\n                        csb0: {\n                            key: \"w:csb0\",\n                            value: sig.csb0\n                        },\n                        csb1: {\n                            key: \"w:csb1\",\n                            value: sig.csb1\n                        }\n                    }\n                })\n            ] : [],\n            // http://www.datypic.com/sc/ooxml/e-w_embedRegular-1.html\n            ...embedRegular ? [\n                createFontRelationship(embedRegular, \"w:embedRegular\")\n            ] : [],\n            // http://www.datypic.com/sc/ooxml/e-w_embedBold-1.html\n            ...embedBold ? [\n                createFontRelationship(embedBold, \"w:embedBold\")\n            ] : [],\n            // http://www.datypic.com/sc/ooxml/e-w_embedItalic-1.html\n            ...embedItalic ? [\n                createFontRelationship(embedItalic, \"w:embedItalic\")\n            ] : [],\n            // http://www.datypic.com/sc/ooxml/e-w_embedBoldItalic-1.html\n            ...embedBoldItalic ? [\n                createFontRelationship(embedBoldItalic, \"w:embedBoldItalic\")\n            ] : []\n        ]\n    });\nconst createRegularFont = ({ name, index, fontKey, characterSet })=>createFont({\n        name,\n        sig: {\n            usb0: \"E0002AFF\",\n            usb1: \"C000247B\",\n            usb2: \"00000009\",\n            usb3: \"00000000\",\n            csb0: \"000001FF\",\n            csb1: \"00000000\"\n        },\n        charset: characterSet,\n        family: \"auto\",\n        pitch: \"variable\",\n        embedRegular: {\n            fontKey,\n            id: `rId${index}`\n        }\n    });\nconst createFontTable = (fonts)=>// https://c-rex.net/projects/samples/ooxml/e1/Part4/OOXML_P4_DOCX_Font_topic_ID0ERNCU.html\n    // http://www.datypic.com/sc/ooxml/e-w_fonts.html\n    new BuilderElement({\n        name: \"w:fonts\",\n        attributes: {\n            mc: {\n                key: \"xmlns:mc\",\n                value: \"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n            },\n            r: {\n                key: \"xmlns:r\",\n                value: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n            },\n            w: {\n                key: \"xmlns:w\",\n                value: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\n            },\n            w14: {\n                key: \"xmlns:w14\",\n                value: \"http://schemas.microsoft.com/office/word/2010/wordml\"\n            },\n            w15: {\n                key: \"xmlns:w15\",\n                value: \"http://schemas.microsoft.com/office/word/2012/wordml\"\n            },\n            w16cex: {\n                key: \"xmlns:w16cex\",\n                value: \"http://schemas.microsoft.com/office/word/2018/wordml/cex\"\n            },\n            w16cid: {\n                key: \"xmlns:w16cid\",\n                value: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\"\n            },\n            w16: {\n                key: \"xmlns:w16\",\n                value: \"http://schemas.microsoft.com/office/word/2018/wordml\"\n            },\n            w16sdtdh: {\n                key: \"xmlns:w16sdtdh\",\n                value: \"http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash\"\n            },\n            w16se: {\n                key: \"xmlns:w16se\",\n                value: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\"\n            },\n            Ignorable: {\n                key: \"mc:Ignorable\",\n                value: \"w14 w15 w16se w16cid w16 w16cex w16sdtdh\"\n            }\n        },\n        children: fonts.map((font, i)=>createRegularFont({\n                name: font.name,\n                index: i + 1,\n                fontKey: font.fontKey\n            }))\n    });\nclass FontWrapper {\n    constructor(options){\n        __publicField(this, \"fontTable\");\n        __publicField(this, \"relationships\");\n        __publicField(this, \"fontOptionsWithKey\", []);\n        this.options = options;\n        this.fontOptionsWithKey = options.map((o)=>__spreadProps(__spreadValues({}, o), {\n                fontKey: uniqueUuid()\n            }));\n        this.fontTable = createFontTable(this.fontOptionsWithKey);\n        this.relationships = new Relationships();\n        for(let i = 0; i < options.length; i++){\n            this.relationships.createRelationship(i + 1, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/font\", `fonts/${options[i].name}.odttf`);\n        }\n    }\n    get View() {\n        return this.fontTable;\n    }\n    get Relationships() {\n        return this.relationships;\n    }\n}\nclass FooterAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            wpc: \"xmlns:wpc\",\n            mc: \"xmlns:mc\",\n            o: \"xmlns:o\",\n            r: \"xmlns:r\",\n            m: \"xmlns:m\",\n            v: \"xmlns:v\",\n            wp14: \"xmlns:wp14\",\n            wp: \"xmlns:wp\",\n            w10: \"xmlns:w10\",\n            w: \"xmlns:w\",\n            w14: \"xmlns:w14\",\n            w15: \"xmlns:w15\",\n            wpg: \"xmlns:wpg\",\n            wpi: \"xmlns:wpi\",\n            wne: \"xmlns:wne\",\n            wps: \"xmlns:wps\",\n            cp: \"xmlns:cp\",\n            dc: \"xmlns:dc\",\n            dcterms: \"xmlns:dcterms\",\n            dcmitype: \"xmlns:dcmitype\",\n            xsi: \"xmlns:xsi\",\n            type: \"xsi:type\"\n        });\n    }\n}\nlet Footer$1 = class Footer extends InitializableXmlComponent {\n    constructor(referenceNumber, initContent){\n        super(\"w:ftr\", initContent);\n        __publicField(this, \"refId\");\n        this.refId = referenceNumber;\n        if (!initContent) {\n            this.root.push(new FooterAttributes({\n                wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n                mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n                o: \"urn:schemas-microsoft-com:office:office\",\n                r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n                m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n                v: \"urn:schemas-microsoft-com:vml\",\n                wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n                wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n                w10: \"urn:schemas-microsoft-com:office:word\",\n                w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n                w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n                w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n                wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n                wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n                wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n                wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"\n            }));\n        }\n    }\n    get ReferenceId() {\n        return this.refId;\n    }\n    add(item) {\n        this.root.push(item);\n    }\n};\nclass FooterWrapper {\n    constructor(media, referenceId, initContent){\n        __publicField(this, \"footer\");\n        __publicField(this, \"relationships\");\n        this.media = media;\n        this.footer = new Footer$1(referenceId, initContent);\n        this.relationships = new Relationships();\n    }\n    add(item) {\n        this.footer.add(item);\n    }\n    addChildElement(childElement) {\n        this.footer.addChildElement(childElement);\n    }\n    get View() {\n        return this.footer;\n    }\n    get Relationships() {\n        return this.relationships;\n    }\n    get Media() {\n        return this.media;\n    }\n}\nclass FootnoteAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            type: \"w:type\",\n            id: \"w:id\"\n        });\n    }\n}\nclass FootnoteRef extends XmlComponent {\n    constructor(){\n        super(\"w:footnoteRef\");\n    }\n}\nclass FootnoteRefRun extends Run {\n    constructor(){\n        super({\n            style: \"FootnoteReference\"\n        });\n        this.root.push(new FootnoteRef());\n    }\n}\nconst FootnoteType = {\n    SEPERATOR: \"separator\",\n    CONTINUATION_SEPERATOR: \"continuationSeparator\"\n};\nclass Footnote extends XmlComponent {\n    constructor(options){\n        super(\"w:footnote\");\n        this.root.push(new FootnoteAttributes({\n            type: options.type,\n            id: options.id\n        }));\n        for(let i = 0; i < options.children.length; i++){\n            const child = options.children[i];\n            if (i === 0) {\n                child.addRunToFront(new FootnoteRefRun());\n            }\n            this.root.push(child);\n        }\n    }\n}\nclass ContinuationSeperator extends XmlComponent {\n    constructor(){\n        super(\"w:continuationSeparator\");\n    }\n}\nclass ContinuationSeperatorRun extends Run {\n    constructor(){\n        super({});\n        this.root.push(new ContinuationSeperator());\n    }\n}\nclass Seperator extends XmlComponent {\n    constructor(){\n        super(\"w:separator\");\n    }\n}\nclass SeperatorRun extends Run {\n    constructor(){\n        super({});\n        this.root.push(new Seperator());\n    }\n}\nclass FootnotesAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            wpc: \"xmlns:wpc\",\n            mc: \"xmlns:mc\",\n            o: \"xmlns:o\",\n            r: \"xmlns:r\",\n            m: \"xmlns:m\",\n            v: \"xmlns:v\",\n            wp14: \"xmlns:wp14\",\n            wp: \"xmlns:wp\",\n            w10: \"xmlns:w10\",\n            w: \"xmlns:w\",\n            w14: \"xmlns:w14\",\n            w15: \"xmlns:w15\",\n            wpg: \"xmlns:wpg\",\n            wpi: \"xmlns:wpi\",\n            wne: \"xmlns:wne\",\n            wps: \"xmlns:wps\",\n            Ignorable: \"mc:Ignorable\"\n        });\n    }\n}\nclass FootNotes extends XmlComponent {\n    constructor(){\n        super(\"w:footnotes\");\n        this.root.push(new FootnotesAttributes({\n            wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n            mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n            o: \"urn:schemas-microsoft-com:office:office\",\n            r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n            m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n            v: \"urn:schemas-microsoft-com:vml\",\n            wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n            wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n            w10: \"urn:schemas-microsoft-com:office:word\",\n            w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n            w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n            w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n            wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n            wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n            wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n            wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n            Ignorable: \"w14 w15 wp14\"\n        }));\n        const begin = new Footnote({\n            id: -1,\n            type: FootnoteType.SEPERATOR,\n            children: [\n                new Paragraph({\n                    spacing: {\n                        after: 0,\n                        line: 240,\n                        lineRule: LineRuleType.AUTO\n                    },\n                    children: [\n                        new SeperatorRun()\n                    ]\n                })\n            ]\n        });\n        this.root.push(begin);\n        const spacing = new Footnote({\n            id: 0,\n            type: FootnoteType.CONTINUATION_SEPERATOR,\n            children: [\n                new Paragraph({\n                    spacing: {\n                        after: 0,\n                        line: 240,\n                        lineRule: LineRuleType.AUTO\n                    },\n                    children: [\n                        new ContinuationSeperatorRun()\n                    ]\n                })\n            ]\n        });\n        this.root.push(spacing);\n    }\n    createFootNote(id, paragraph) {\n        const footnote = new Footnote({\n            id,\n            children: paragraph\n        });\n        this.root.push(footnote);\n    }\n}\nclass FootnotesWrapper {\n    constructor(){\n        __publicField(this, \"footnotess\");\n        __publicField(this, \"relationships\");\n        this.footnotess = new FootNotes();\n        this.relationships = new Relationships();\n    }\n    get View() {\n        return this.footnotess;\n    }\n    get Relationships() {\n        return this.relationships;\n    }\n}\nclass HeaderAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            wpc: \"xmlns:wpc\",\n            mc: \"xmlns:mc\",\n            o: \"xmlns:o\",\n            r: \"xmlns:r\",\n            m: \"xmlns:m\",\n            v: \"xmlns:v\",\n            wp14: \"xmlns:wp14\",\n            wp: \"xmlns:wp\",\n            w10: \"xmlns:w10\",\n            w: \"xmlns:w\",\n            w14: \"xmlns:w14\",\n            w15: \"xmlns:w15\",\n            wpg: \"xmlns:wpg\",\n            wpi: \"xmlns:wpi\",\n            wne: \"xmlns:wne\",\n            wps: \"xmlns:wps\",\n            cp: \"xmlns:cp\",\n            dc: \"xmlns:dc\",\n            dcterms: \"xmlns:dcterms\",\n            dcmitype: \"xmlns:dcmitype\",\n            xsi: \"xmlns:xsi\",\n            type: \"xsi:type\",\n            cx: \"xmlns:cx\",\n            cx1: \"xmlns:cx1\",\n            cx2: \"xmlns:cx2\",\n            cx3: \"xmlns:cx3\",\n            cx4: \"xmlns:cx4\",\n            cx5: \"xmlns:cx5\",\n            cx6: \"xmlns:cx6\",\n            cx7: \"xmlns:cx7\",\n            cx8: \"xmlns:cx8\",\n            w16cid: \"xmlns:w16cid\",\n            w16se: \"xmlns:w16se\"\n        });\n    }\n}\nlet Header$1 = class Header extends InitializableXmlComponent {\n    constructor(referenceNumber, initContent){\n        super(\"w:hdr\", initContent);\n        __publicField(this, \"refId\");\n        this.refId = referenceNumber;\n        if (!initContent) {\n            this.root.push(new HeaderAttributes({\n                wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n                mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n                o: \"urn:schemas-microsoft-com:office:office\",\n                r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n                m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n                v: \"urn:schemas-microsoft-com:vml\",\n                wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n                wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n                w10: \"urn:schemas-microsoft-com:office:word\",\n                w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n                w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n                w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n                wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n                wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n                wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n                wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n                cx: \"http://schemas.microsoft.com/office/drawing/2014/chartex\",\n                cx1: \"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex\",\n                cx2: \"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex\",\n                cx3: \"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex\",\n                cx4: \"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex\",\n                cx5: \"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex\",\n                cx6: \"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex\",\n                cx7: \"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex\",\n                cx8: \"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex\",\n                w16cid: \"http://schemas.microsoft.com/office/word/2016/wordml/cid\",\n                w16se: \"http://schemas.microsoft.com/office/word/2015/wordml/symex\"\n            }));\n        }\n    }\n    get ReferenceId() {\n        return this.refId;\n    }\n    add(item) {\n        this.root.push(item);\n    }\n};\nclass HeaderWrapper {\n    constructor(media, referenceId, initContent){\n        __publicField(this, \"header\");\n        __publicField(this, \"relationships\");\n        this.media = media;\n        this.header = new Header$1(referenceId, initContent);\n        this.relationships = new Relationships();\n    }\n    add(item) {\n        this.header.add(item);\n        return this;\n    }\n    addChildElement(childElement) {\n        this.header.addChildElement(childElement);\n    }\n    get View() {\n        return this.header;\n    }\n    get Relationships() {\n        return this.relationships;\n    }\n    get Media() {\n        return this.media;\n    }\n}\nclass Media {\n    constructor(){\n        // eslint-disable-next-line functional/prefer-readonly-type\n        __publicField(this, \"map\");\n        this.map = /* @__PURE__ */ new Map();\n    }\n    addImage(key, mediaData) {\n        this.map.set(key, mediaData);\n    }\n    get Array() {\n        return Array.from(this.map.values());\n    }\n}\nconst WORKAROUND2 = \"\";\nconst LevelFormat = {\n    DECIMAL: \"decimal\",\n    UPPER_ROMAN: \"upperRoman\",\n    LOWER_ROMAN: \"lowerRoman\",\n    UPPER_LETTER: \"upperLetter\",\n    LOWER_LETTER: \"lowerLetter\",\n    ORDINAL: \"ordinal\",\n    CARDINAL_TEXT: \"cardinalText\",\n    ORDINAL_TEXT: \"ordinalText\",\n    HEX: \"hex\",\n    CHICAGO: \"chicago\",\n    IDEOGRAPH__DIGITAL: \"ideographDigital\",\n    JAPANESE_COUNTING: \"japaneseCounting\",\n    AIUEO: \"aiueo\",\n    IROHA: \"iroha\",\n    DECIMAL_FULL_WIDTH: \"decimalFullWidth\",\n    DECIMAL_HALF_WIDTH: \"decimalHalfWidth\",\n    JAPANESE_LEGAL: \"japaneseLegal\",\n    JAPANESE_DIGITAL_TEN_THOUSAND: \"japaneseDigitalTenThousand\",\n    DECIMAL_ENCLOSED_CIRCLE: \"decimalEnclosedCircle\",\n    DECIMAL_FULL_WIDTH2: \"decimalFullWidth2\",\n    AIUEO_FULL_WIDTH: \"aiueoFullWidth\",\n    IROHA_FULL_WIDTH: \"irohaFullWidth\",\n    DECIMAL_ZERO: \"decimalZero\",\n    BULLET: \"bullet\",\n    GANADA: \"ganada\",\n    CHOSUNG: \"chosung\",\n    DECIMAL_ENCLOSED_FULLSTOP: \"decimalEnclosedFullstop\",\n    DECIMAL_ENCLOSED_PARENTHESES: \"decimalEnclosedParen\",\n    DECIMAL_ENCLOSED_CIRCLE_CHINESE: \"decimalEnclosedCircleChinese\",\n    IDEOGRAPH_ENCLOSED_CIRCLE: \"ideographEnclosedCircle\",\n    IDEOGRAPH_TRADITIONAL: \"ideographTraditional\",\n    IDEOGRAPH_ZODIAC: \"ideographZodiac\",\n    IDEOGRAPH_ZODIAC_TRADITIONAL: \"ideographZodiacTraditional\",\n    TAIWANESE_COUNTING: \"taiwaneseCounting\",\n    IDEOGRAPH_LEGAL_TRADITIONAL: \"ideographLegalTraditional\",\n    TAIWANESE_COUNTING_THOUSAND: \"taiwaneseCountingThousand\",\n    TAIWANESE_DIGITAL: \"taiwaneseDigital\",\n    CHINESE_COUNTING: \"chineseCounting\",\n    CHINESE_LEGAL_SIMPLIFIED: \"chineseLegalSimplified\",\n    CHINESE_COUNTING_THOUSAND: \"chineseCountingThousand\",\n    KOREAN_DIGITAL: \"koreanDigital\",\n    KOREAN_COUNTING: \"koreanCounting\",\n    KOREAN_LEGAL: \"koreanLegal\",\n    KOREAN_DIGITAL2: \"koreanDigital2\",\n    VIETNAMESE_COUNTING: \"vietnameseCounting\",\n    RUSSIAN_LOWER: \"russianLower\",\n    RUSSIAN_UPPER: \"russianUpper\",\n    NONE: \"none\",\n    NUMBER_IN_DASH: \"numberInDash\",\n    HEBREW1: \"hebrew1\",\n    HEBREW2: \"hebrew2\",\n    ARABIC_ALPHA: \"arabicAlpha\",\n    ARABIC_ABJAD: \"arabicAbjad\",\n    HINDI_VOWELS: \"hindiVowels\",\n    HINDI_CONSONANTS: \"hindiConsonants\",\n    HINDI_NUMBERS: \"hindiNumbers\",\n    HINDI_COUNTING: \"hindiCounting\",\n    THAI_LETTERS: \"thaiLetters\",\n    THAI_NUMBERS: \"thaiNumbers\",\n    THAI_COUNTING: \"thaiCounting\",\n    BAHT_TEXT: \"bahtText\",\n    DOLLAR_TEXT: \"dollarText\",\n    CUSTOM: \"custom\"\n};\nclass LevelAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            ilvl: \"w:ilvl\",\n            tentative: \"w15:tentative\"\n        });\n    }\n}\nclass NumberFormat extends XmlComponent {\n    constructor(value){\n        super(\"w:numFmt\");\n        this.root.push(new Attributes({\n            val: value\n        }));\n    }\n}\nclass LevelText extends XmlComponent {\n    constructor(value){\n        super(\"w:lvlText\");\n        this.root.push(new Attributes({\n            val: value\n        }));\n    }\n}\nclass LevelJc extends XmlComponent {\n    constructor(value){\n        super(\"w:lvlJc\");\n        this.root.push(new Attributes({\n            val: value\n        }));\n    }\n}\nconst LevelSuffix = {\n    NOTHING: \"nothing\",\n    SPACE: \"space\",\n    TAB: \"tab\"\n};\nclass Suffix extends XmlComponent {\n    constructor(value){\n        super(\"w:suff\");\n        this.root.push(new Attributes({\n            val: value\n        }));\n    }\n}\nclass IsLegalNumberingStyle extends XmlComponent {\n    constructor(){\n        super(\"w:isLgl\");\n    }\n}\nclass LevelBase extends XmlComponent {\n    constructor({ level, format, text, alignment = AlignmentType.START, start = 1, style, suffix, isLegalNumberingStyle }){\n        super(\"w:lvl\");\n        __publicField(this, \"paragraphProperties\");\n        __publicField(this, \"runProperties\");\n        this.root.push(new NumberValueElement(\"w:start\", decimalNumber(start)));\n        if (format) {\n            this.root.push(new NumberFormat(format));\n        }\n        if (suffix) {\n            this.root.push(new Suffix(suffix));\n        }\n        if (isLegalNumberingStyle) {\n            this.root.push(new IsLegalNumberingStyle());\n        }\n        if (text) {\n            this.root.push(new LevelText(text));\n        }\n        this.root.push(new LevelJc(alignment));\n        this.paragraphProperties = new ParagraphProperties(style && style.paragraph);\n        this.runProperties = new RunProperties(style && style.run);\n        this.root.push(this.paragraphProperties);\n        this.root.push(this.runProperties);\n        if (level > 9) {\n            throw new Error(\"Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7\");\n        }\n        this.root.push(new LevelAttributes({\n            ilvl: decimalNumber(level),\n            tentative: 1\n        }));\n    }\n}\nclass Level extends LevelBase {\n}\nclass LevelForOverride extends LevelBase {\n}\nclass MultiLevelType extends XmlComponent {\n    constructor(value){\n        super(\"w:multiLevelType\");\n        this.root.push(new Attributes({\n            val: value\n        }));\n    }\n}\nclass AbstractNumberingAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            abstractNumId: \"w:abstractNumId\",\n            restartNumberingAfterBreak: \"w15:restartNumberingAfterBreak\"\n        });\n    }\n}\nclass AbstractNumbering extends XmlComponent {\n    constructor(id, levelOptions){\n        super(\"w:abstractNum\");\n        __publicField(this, \"id\");\n        this.root.push(new AbstractNumberingAttributes({\n            abstractNumId: decimalNumber(id),\n            restartNumberingAfterBreak: 0\n        }));\n        this.root.push(new MultiLevelType(\"hybridMultilevel\"));\n        this.id = id;\n        for (const option of levelOptions){\n            this.root.push(new Level(option));\n        }\n    }\n}\nclass AbstractNumId extends XmlComponent {\n    constructor(value){\n        super(\"w:abstractNumId\");\n        this.root.push(new Attributes({\n            val: value\n        }));\n    }\n}\nclass NumAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            numId: \"w:numId\"\n        });\n    }\n}\nclass ConcreteNumbering extends XmlComponent {\n    constructor(options){\n        super(\"w:num\");\n        __publicField(this, \"numId\");\n        __publicField(this, \"reference\");\n        __publicField(this, \"instance\");\n        this.numId = options.numId;\n        this.reference = options.reference;\n        this.instance = options.instance;\n        this.root.push(new NumAttributes({\n            numId: decimalNumber(options.numId)\n        }));\n        this.root.push(new AbstractNumId(decimalNumber(options.abstractNumId)));\n        if (options.overrideLevels && options.overrideLevels.length) {\n            for (const level of options.overrideLevels){\n                this.root.push(new LevelOverride(level.num, level.start));\n            }\n        }\n    }\n}\nclass LevelOverrideAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            ilvl: \"w:ilvl\"\n        });\n    }\n}\nclass LevelOverride extends XmlComponent {\n    constructor(levelNum, start){\n        super(\"w:lvlOverride\");\n        this.root.push(new LevelOverrideAttributes({\n            ilvl: levelNum\n        }));\n        if (start !== void 0) {\n            this.root.push(new StartOverride(start));\n        }\n    }\n}\nclass StartOverrideAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass StartOverride extends XmlComponent {\n    constructor(start){\n        super(\"w:startOverride\");\n        this.root.push(new StartOverrideAttributes({\n            val: start\n        }));\n    }\n}\nclass Numbering extends XmlComponent {\n    constructor(options){\n        super(\"w:numbering\");\n        __publicField(this, \"abstractNumberingMap\", /* @__PURE__ */ new Map());\n        __publicField(this, \"concreteNumberingMap\", /* @__PURE__ */ new Map());\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        __publicField(this, \"referenceConfigMap\", /* @__PURE__ */ new Map());\n        __publicField(this, \"abstractNumUniqueNumericId\", abstractNumUniqueNumericIdGen());\n        __publicField(this, \"concreteNumUniqueNumericId\", concreteNumUniqueNumericIdGen());\n        this.root.push(new DocumentAttributes([\n            \"wpc\",\n            \"mc\",\n            \"o\",\n            \"r\",\n            \"m\",\n            \"v\",\n            \"wp14\",\n            \"wp\",\n            \"w10\",\n            \"w\",\n            \"w14\",\n            \"w15\",\n            \"wpg\",\n            \"wpi\",\n            \"wne\",\n            \"wps\"\n        ], \"w14 w15 wp14\"));\n        const abstractNumbering = new AbstractNumbering(this.abstractNumUniqueNumericId(), [\n            {\n                level: 0,\n                format: LevelFormat.BULLET,\n                text: \"●\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: convertInchesToTwip(0.5),\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            },\n            {\n                level: 1,\n                format: LevelFormat.BULLET,\n                text: \"○\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: convertInchesToTwip(1),\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            },\n            {\n                level: 2,\n                format: LevelFormat.BULLET,\n                text: \"■\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: 2160,\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            },\n            {\n                level: 3,\n                format: LevelFormat.BULLET,\n                text: \"●\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: 2880,\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            },\n            {\n                level: 4,\n                format: LevelFormat.BULLET,\n                text: \"○\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: 3600,\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            },\n            {\n                level: 5,\n                format: LevelFormat.BULLET,\n                text: \"■\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: 4320,\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            },\n            {\n                level: 6,\n                format: LevelFormat.BULLET,\n                text: \"●\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: 5040,\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            },\n            {\n                level: 7,\n                format: LevelFormat.BULLET,\n                text: \"●\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: 5760,\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            },\n            {\n                level: 8,\n                format: LevelFormat.BULLET,\n                text: \"●\",\n                alignment: AlignmentType.LEFT,\n                style: {\n                    paragraph: {\n                        indent: {\n                            left: 6480,\n                            hanging: convertInchesToTwip(0.25)\n                        }\n                    }\n                }\n            }\n        ]);\n        this.concreteNumberingMap.set(\"default-bullet-numbering\", new ConcreteNumbering({\n            numId: 1,\n            abstractNumId: abstractNumbering.id,\n            reference: \"default-bullet-numbering\",\n            instance: 0,\n            overrideLevels: [\n                {\n                    num: 0,\n                    start: 1\n                }\n            ]\n        }));\n        this.abstractNumberingMap.set(\"default-bullet-numbering\", abstractNumbering);\n        for (const con of options.config){\n            this.abstractNumberingMap.set(con.reference, new AbstractNumbering(this.abstractNumUniqueNumericId(), con.levels));\n            this.referenceConfigMap.set(con.reference, con.levels);\n        }\n    }\n    prepForXml(context) {\n        for (const numbering of this.abstractNumberingMap.values()){\n            this.root.push(numbering);\n        }\n        for (const numbering of this.concreteNumberingMap.values()){\n            this.root.push(numbering);\n        }\n        return super.prepForXml(context);\n    }\n    createConcreteNumberingInstance(reference, instance) {\n        const abstractNumbering = this.abstractNumberingMap.get(reference);\n        if (!abstractNumbering) {\n            return;\n        }\n        const fullReference = `${reference}-${instance}`;\n        if (this.concreteNumberingMap.has(fullReference)) {\n            return;\n        }\n        const referenceConfigLevels = this.referenceConfigMap.get(reference);\n        const firstLevelStartNumber = referenceConfigLevels && referenceConfigLevels[0].start;\n        const concreteNumberingSettings = {\n            numId: this.concreteNumUniqueNumericId(),\n            abstractNumId: abstractNumbering.id,\n            reference,\n            instance,\n            overrideLevels: [\n                firstLevelStartNumber && Number.isInteger(firstLevelStartNumber) ? {\n                    num: 0,\n                    start: firstLevelStartNumber\n                } : {\n                    num: 0,\n                    start: 1\n                }\n            ]\n        };\n        this.concreteNumberingMap.set(fullReference, new ConcreteNumbering(concreteNumberingSettings));\n    }\n    get ConcreteNumbering() {\n        return Array.from(this.concreteNumberingMap.values());\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get ReferenceConfig() {\n        return Array.from(this.referenceConfigMap.values());\n    }\n}\nclass CompatibilitySettingAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            version: \"w:val\",\n            name: \"w:name\",\n            uri: \"w:uri\"\n        });\n    }\n}\nclass CompatibilitySetting extends XmlComponent {\n    constructor(version){\n        super(\"w:compatSetting\");\n        this.root.push(new CompatibilitySettingAttributes({\n            version,\n            uri: \"http://schemas.microsoft.com/office/word\",\n            name: \"compatibilityMode\"\n        }));\n    }\n}\nclass Compatibility extends XmlComponent {\n    constructor(options){\n        super(\"w:compat\");\n        if (options.version) {\n            this.root.push(new CompatibilitySetting(options.version));\n        }\n        if (options.useSingleBorderforContiguousCells) {\n            this.root.push(new OnOffElement(\"w:useSingleBorderforContiguousCells\", options.useSingleBorderforContiguousCells));\n        }\n        if (options.wordPerfectJustification) {\n            this.root.push(new OnOffElement(\"w:wpJustification\", options.wordPerfectJustification));\n        }\n        if (options.noTabStopForHangingIndent) {\n            this.root.push(new OnOffElement(\"w:noTabHangInd\", options.noTabStopForHangingIndent));\n        }\n        if (options.noLeading) {\n            this.root.push(new OnOffElement(\"w:noLeading\", options.noLeading));\n        }\n        if (options.spaceForUnderline) {\n            this.root.push(new OnOffElement(\"w:spaceForUL\", options.spaceForUnderline));\n        }\n        if (options.noColumnBalance) {\n            this.root.push(new OnOffElement(\"w:noColumnBalance\", options.noColumnBalance));\n        }\n        if (options.balanceSingleByteDoubleByteWidth) {\n            this.root.push(new OnOffElement(\"w:balanceSingleByteDoubleByteWidth\", options.balanceSingleByteDoubleByteWidth));\n        }\n        if (options.noExtraLineSpacing) {\n            this.root.push(new OnOffElement(\"w:noExtraLineSpacing\", options.noExtraLineSpacing));\n        }\n        if (options.doNotLeaveBackslashAlone) {\n            this.root.push(new OnOffElement(\"w:doNotLeaveBackslashAlone\", options.doNotLeaveBackslashAlone));\n        }\n        if (options.underlineTrailingSpaces) {\n            this.root.push(new OnOffElement(\"w:ulTrailSpace\", options.underlineTrailingSpaces));\n        }\n        if (options.doNotExpandShiftReturn) {\n            this.root.push(new OnOffElement(\"w:doNotExpandShiftReturn\", options.doNotExpandShiftReturn));\n        }\n        if (options.spacingInWholePoints) {\n            this.root.push(new OnOffElement(\"w:spacingInWholePoints\", options.spacingInWholePoints));\n        }\n        if (options.lineWrapLikeWord6) {\n            this.root.push(new OnOffElement(\"w:lineWrapLikeWord6\", options.lineWrapLikeWord6));\n        }\n        if (options.printBodyTextBeforeHeader) {\n            this.root.push(new OnOffElement(\"w:printBodyTextBeforeHeader\", options.printBodyTextBeforeHeader));\n        }\n        if (options.printColorsBlack) {\n            this.root.push(new OnOffElement(\"w:printColBlack\", options.printColorsBlack));\n        }\n        if (options.spaceWidth) {\n            this.root.push(new OnOffElement(\"w:wpSpaceWidth\", options.spaceWidth));\n        }\n        if (options.showBreaksInFrames) {\n            this.root.push(new OnOffElement(\"w:showBreaksInFrames\", options.showBreaksInFrames));\n        }\n        if (options.subFontBySize) {\n            this.root.push(new OnOffElement(\"w:subFontBySize\", options.subFontBySize));\n        }\n        if (options.suppressBottomSpacing) {\n            this.root.push(new OnOffElement(\"w:suppressBottomSpacing\", options.suppressBottomSpacing));\n        }\n        if (options.suppressTopSpacing) {\n            this.root.push(new OnOffElement(\"w:suppressTopSpacing\", options.suppressTopSpacing));\n        }\n        if (options.suppressSpacingAtTopOfPage) {\n            this.root.push(new OnOffElement(\"w:suppressSpacingAtTopOfPage\", options.suppressSpacingAtTopOfPage));\n        }\n        if (options.suppressTopSpacingWP) {\n            this.root.push(new OnOffElement(\"w:suppressTopSpacingWP\", options.suppressTopSpacingWP));\n        }\n        if (options.suppressSpBfAfterPgBrk) {\n            this.root.push(new OnOffElement(\"w:suppressSpBfAfterPgBrk\", options.suppressSpBfAfterPgBrk));\n        }\n        if (options.swapBordersFacingPages) {\n            this.root.push(new OnOffElement(\"w:swapBordersFacingPages\", options.swapBordersFacingPages));\n        }\n        if (options.convertMailMergeEsc) {\n            this.root.push(new OnOffElement(\"w:convMailMergeEsc\", options.convertMailMergeEsc));\n        }\n        if (options.truncateFontHeightsLikeWP6) {\n            this.root.push(new OnOffElement(\"w:truncateFontHeightsLikeWP6\", options.truncateFontHeightsLikeWP6));\n        }\n        if (options.macWordSmallCaps) {\n            this.root.push(new OnOffElement(\"w:mwSmallCaps\", options.macWordSmallCaps));\n        }\n        if (options.usePrinterMetrics) {\n            this.root.push(new OnOffElement(\"w:usePrinterMetrics\", options.usePrinterMetrics));\n        }\n        if (options.doNotSuppressParagraphBorders) {\n            this.root.push(new OnOffElement(\"w:doNotSuppressParagraphBorders\", options.doNotSuppressParagraphBorders));\n        }\n        if (options.wrapTrailSpaces) {\n            this.root.push(new OnOffElement(\"w:wrapTrailSpaces\", options.wrapTrailSpaces));\n        }\n        if (options.footnoteLayoutLikeWW8) {\n            this.root.push(new OnOffElement(\"w:footnoteLayoutLikeWW8\", options.footnoteLayoutLikeWW8));\n        }\n        if (options.shapeLayoutLikeWW8) {\n            this.root.push(new OnOffElement(\"w:shapeLayoutLikeWW8\", options.shapeLayoutLikeWW8));\n        }\n        if (options.alignTablesRowByRow) {\n            this.root.push(new OnOffElement(\"w:alignTablesRowByRow\", options.alignTablesRowByRow));\n        }\n        if (options.forgetLastTabAlignment) {\n            this.root.push(new OnOffElement(\"w:forgetLastTabAlignment\", options.forgetLastTabAlignment));\n        }\n        if (options.adjustLineHeightInTable) {\n            this.root.push(new OnOffElement(\"w:adjustLineHeightInTable\", options.adjustLineHeightInTable));\n        }\n        if (options.autoSpaceLikeWord95) {\n            this.root.push(new OnOffElement(\"w:autoSpaceLikeWord95\", options.autoSpaceLikeWord95));\n        }\n        if (options.noSpaceRaiseLower) {\n            this.root.push(new OnOffElement(\"w:noSpaceRaiseLower\", options.noSpaceRaiseLower));\n        }\n        if (options.doNotUseHTMLParagraphAutoSpacing) {\n            this.root.push(new OnOffElement(\"w:doNotUseHTMLParagraphAutoSpacing\", options.doNotUseHTMLParagraphAutoSpacing));\n        }\n        if (options.layoutRawTableWidth) {\n            this.root.push(new OnOffElement(\"w:layoutRawTableWidth\", options.layoutRawTableWidth));\n        }\n        if (options.layoutTableRowsApart) {\n            this.root.push(new OnOffElement(\"w:layoutTableRowsApart\", options.layoutTableRowsApart));\n        }\n        if (options.useWord97LineBreakRules) {\n            this.root.push(new OnOffElement(\"w:useWord97LineBreakRules\", options.useWord97LineBreakRules));\n        }\n        if (options.doNotBreakWrappedTables) {\n            this.root.push(new OnOffElement(\"w:doNotBreakWrappedTables\", options.doNotBreakWrappedTables));\n        }\n        if (options.doNotSnapToGridInCell) {\n            this.root.push(new OnOffElement(\"w:doNotSnapToGridInCell\", options.doNotSnapToGridInCell));\n        }\n        if (options.selectFieldWithFirstOrLastCharacter) {\n            this.root.push(new OnOffElement(\"w:selectFldWithFirstOrLastChar\", options.selectFieldWithFirstOrLastCharacter));\n        }\n        if (options.applyBreakingRules) {\n            this.root.push(new OnOffElement(\"w:applyBreakingRules\", options.applyBreakingRules));\n        }\n        if (options.doNotWrapTextWithPunctuation) {\n            this.root.push(new OnOffElement(\"w:doNotWrapTextWithPunct\", options.doNotWrapTextWithPunctuation));\n        }\n        if (options.doNotUseEastAsianBreakRules) {\n            this.root.push(new OnOffElement(\"w:doNotUseEastAsianBreakRules\", options.doNotUseEastAsianBreakRules));\n        }\n        if (options.useWord2002TableStyleRules) {\n            this.root.push(new OnOffElement(\"w:useWord2002TableStyleRules\", options.useWord2002TableStyleRules));\n        }\n        if (options.growAutofit) {\n            this.root.push(new OnOffElement(\"w:growAutofit\", options.growAutofit));\n        }\n        if (options.useFELayout) {\n            this.root.push(new OnOffElement(\"w:useFELayout\", options.useFELayout));\n        }\n        if (options.useNormalStyleForList) {\n            this.root.push(new OnOffElement(\"w:useNormalStyleForList\", options.useNormalStyleForList));\n        }\n        if (options.doNotUseIndentAsNumberingTabStop) {\n            this.root.push(new OnOffElement(\"w:doNotUseIndentAsNumberingTabStop\", options.doNotUseIndentAsNumberingTabStop));\n        }\n        if (options.useAlternateEastAsianLineBreakRules) {\n            this.root.push(new OnOffElement(\"w:useAltKinsokuLineBreakRules\", options.useAlternateEastAsianLineBreakRules));\n        }\n        if (options.allowSpaceOfSameStyleInTable) {\n            this.root.push(new OnOffElement(\"w:allowSpaceOfSameStyleInTable\", options.allowSpaceOfSameStyleInTable));\n        }\n        if (options.doNotSuppressIndentation) {\n            this.root.push(new OnOffElement(\"w:doNotSuppressIndentation\", options.doNotSuppressIndentation));\n        }\n        if (options.doNotAutofitConstrainedTables) {\n            this.root.push(new OnOffElement(\"w:doNotAutofitConstrainedTables\", options.doNotAutofitConstrainedTables));\n        }\n        if (options.autofitToFirstFixedWidthCell) {\n            this.root.push(new OnOffElement(\"w:autofitToFirstFixedWidthCell\", options.autofitToFirstFixedWidthCell));\n        }\n        if (options.underlineTabInNumberingList) {\n            this.root.push(new OnOffElement(\"w:underlineTabInNumList\", options.underlineTabInNumberingList));\n        }\n        if (options.displayHangulFixedWidth) {\n            this.root.push(new OnOffElement(\"w:displayHangulFixedWidth\", options.displayHangulFixedWidth));\n        }\n        if (options.splitPgBreakAndParaMark) {\n            this.root.push(new OnOffElement(\"w:splitPgBreakAndParaMark\", options.splitPgBreakAndParaMark));\n        }\n        if (options.doNotVerticallyAlignCellWithSp) {\n            this.root.push(new OnOffElement(\"w:doNotVertAlignCellWithSp\", options.doNotVerticallyAlignCellWithSp));\n        }\n        if (options.doNotBreakConstrainedForcedTable) {\n            this.root.push(new OnOffElement(\"w:doNotBreakConstrainedForcedTable\", options.doNotBreakConstrainedForcedTable));\n        }\n        if (options.ignoreVerticalAlignmentInTextboxes) {\n            this.root.push(new OnOffElement(\"w:doNotVertAlignInTxbx\", options.ignoreVerticalAlignmentInTextboxes));\n        }\n        if (options.useAnsiKerningPairs) {\n            this.root.push(new OnOffElement(\"w:useAnsiKerningPairs\", options.useAnsiKerningPairs));\n        }\n        if (options.cachedColumnBalance) {\n            this.root.push(new OnOffElement(\"w:cachedColBalance\", options.cachedColumnBalance));\n        }\n    }\n}\nclass SettingsAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            wpc: \"xmlns:wpc\",\n            mc: \"xmlns:mc\",\n            o: \"xmlns:o\",\n            r: \"xmlns:r\",\n            m: \"xmlns:m\",\n            v: \"xmlns:v\",\n            wp14: \"xmlns:wp14\",\n            wp: \"xmlns:wp\",\n            w10: \"xmlns:w10\",\n            w: \"xmlns:w\",\n            w14: \"xmlns:w14\",\n            w15: \"xmlns:w15\",\n            wpg: \"xmlns:wpg\",\n            wpi: \"xmlns:wpi\",\n            wne: \"xmlns:wne\",\n            wps: \"xmlns:wps\",\n            Ignorable: \"mc:Ignorable\"\n        });\n    }\n}\nclass Settings extends XmlComponent {\n    constructor(options){\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        super(\"w:settings\");\n        this.root.push(new SettingsAttributes({\n            wpc: \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\",\n            mc: \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\n            o: \"urn:schemas-microsoft-com:office:office\",\n            r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\",\n            m: \"http://schemas.openxmlformats.org/officeDocument/2006/math\",\n            v: \"urn:schemas-microsoft-com:vml\",\n            wp14: \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\",\n            wp: \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\",\n            w10: \"urn:schemas-microsoft-com:office:word\",\n            w: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\",\n            w14: \"http://schemas.microsoft.com/office/word/2010/wordml\",\n            w15: \"http://schemas.microsoft.com/office/word/2012/wordml\",\n            wpg: \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\",\n            wpi: \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\",\n            wne: \"http://schemas.microsoft.com/office/word/2006/wordml\",\n            wps: \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\",\n            Ignorable: \"w14 w15 wp14\"\n        }));\n        this.root.push(new OnOffElement(\"w:displayBackgroundShape\", true));\n        if (options.trackRevisions !== void 0) {\n            this.root.push(new OnOffElement(\"w:trackRevisions\", options.trackRevisions));\n        }\n        if (options.evenAndOddHeaders !== void 0) {\n            this.root.push(new OnOffElement(\"w:evenAndOddHeaders\", options.evenAndOddHeaders));\n        }\n        if (options.updateFields !== void 0) {\n            this.root.push(new OnOffElement(\"w:updateFields\", options.updateFields));\n        }\n        if (options.defaultTabStop !== void 0) {\n            this.root.push(new NumberValueElement(\"w:defaultTabStop\", options.defaultTabStop));\n        }\n        if (((_a = options.hyphenation) == null ? void 0 : _a.autoHyphenation) !== void 0) {\n            this.root.push(new OnOffElement(\"w:autoHyphenation\", options.hyphenation.autoHyphenation));\n        }\n        if (((_b = options.hyphenation) == null ? void 0 : _b.hyphenationZone) !== void 0) {\n            this.root.push(new NumberValueElement(\"w:hyphenationZone\", options.hyphenation.hyphenationZone));\n        }\n        if (((_c = options.hyphenation) == null ? void 0 : _c.consecutiveHyphenLimit) !== void 0) {\n            this.root.push(new NumberValueElement(\"w:consecutiveHyphenLimit\", options.hyphenation.consecutiveHyphenLimit));\n        }\n        if (((_d = options.hyphenation) == null ? void 0 : _d.doNotHyphenateCaps) !== void 0) {\n            this.root.push(new OnOffElement(\"w:doNotHyphenateCaps\", options.hyphenation.doNotHyphenateCaps));\n        }\n        this.root.push(new Compatibility(__spreadProps(__spreadValues({}, (_e = options.compatibility) != null ? _e : {}), {\n            version: (_h = (_g = (_f = options.compatibility) == null ? void 0 : _f.version) != null ? _g : options.compatibilityModeVersion) != null ? _h : 15\n        })));\n    }\n}\nclass ComponentAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w:val\"\n        });\n    }\n}\nclass Name extends XmlComponent {\n    constructor(value){\n        super(\"w:name\");\n        this.root.push(new ComponentAttributes({\n            val: value\n        }));\n    }\n}\nclass UiPriority extends XmlComponent {\n    constructor(value){\n        super(\"w:uiPriority\");\n        this.root.push(new ComponentAttributes({\n            val: decimalNumber(value)\n        }));\n    }\n}\nclass StyleAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            type: \"w:type\",\n            styleId: \"w:styleId\",\n            default: \"w:default\",\n            customStyle: \"w:customStyle\"\n        });\n    }\n}\nclass Style2 extends XmlComponent {\n    constructor(attributes, options){\n        super(\"w:style\");\n        this.root.push(new StyleAttributes(attributes));\n        if (options.name) {\n            this.root.push(new Name(options.name));\n        }\n        if (options.basedOn) {\n            this.root.push(new StringValueElement(\"w:basedOn\", options.basedOn));\n        }\n        if (options.next) {\n            this.root.push(new StringValueElement(\"w:next\", options.next));\n        }\n        if (options.link) {\n            this.root.push(new StringValueElement(\"w:link\", options.link));\n        }\n        if (options.uiPriority !== void 0) {\n            this.root.push(new UiPriority(options.uiPriority));\n        }\n        if (options.semiHidden !== void 0) {\n            this.root.push(new OnOffElement(\"w:semiHidden\", options.semiHidden));\n        }\n        if (options.unhideWhenUsed !== void 0) {\n            this.root.push(new OnOffElement(\"w:unhideWhenUsed\", options.unhideWhenUsed));\n        }\n        if (options.quickFormat !== void 0) {\n            this.root.push(new OnOffElement(\"w:qFormat\", options.quickFormat));\n        }\n    }\n}\nclass StyleForParagraph extends Style2 {\n    constructor(options){\n        super({\n            type: \"paragraph\",\n            styleId: options.id\n        }, options);\n        __publicField(this, \"paragraphProperties\");\n        __publicField(this, \"runProperties\");\n        this.paragraphProperties = new ParagraphProperties(options.paragraph);\n        this.runProperties = new RunProperties(options.run);\n        this.root.push(this.paragraphProperties);\n        this.root.push(this.runProperties);\n    }\n}\nclass StyleForCharacter extends Style2 {\n    constructor(options){\n        super({\n            type: \"character\",\n            styleId: options.id\n        }, __spreadValues({\n            uiPriority: 99,\n            unhideWhenUsed: true\n        }, options));\n        __publicField(this, \"runProperties\");\n        this.runProperties = new RunProperties(options.run);\n        this.root.push(this.runProperties);\n    }\n}\nclass HeadingStyle extends StyleForParagraph {\n    constructor(options){\n        super(__spreadValues({\n            basedOn: \"Normal\",\n            next: \"Normal\",\n            quickFormat: true\n        }, options));\n    }\n}\nclass TitleStyle extends HeadingStyle {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Title\",\n            name: \"Title\"\n        }, options));\n    }\n}\nclass Heading1Style extends HeadingStyle {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Heading1\",\n            name: \"Heading 1\"\n        }, options));\n    }\n}\nclass Heading2Style extends HeadingStyle {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Heading2\",\n            name: \"Heading 2\"\n        }, options));\n    }\n}\nclass Heading3Style extends HeadingStyle {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Heading3\",\n            name: \"Heading 3\"\n        }, options));\n    }\n}\nclass Heading4Style extends HeadingStyle {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Heading4\",\n            name: \"Heading 4\"\n        }, options));\n    }\n}\nclass Heading5Style extends HeadingStyle {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Heading5\",\n            name: \"Heading 5\"\n        }, options));\n    }\n}\nclass Heading6Style extends HeadingStyle {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Heading6\",\n            name: \"Heading 6\"\n        }, options));\n    }\n}\nclass StrongStyle extends HeadingStyle {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Strong\",\n            name: \"Strong\"\n        }, options));\n    }\n}\nclass ListParagraph extends StyleForParagraph {\n    constructor(options){\n        super(__spreadValues({\n            id: \"ListParagraph\",\n            name: \"List Paragraph\",\n            basedOn: \"Normal\",\n            quickFormat: true\n        }, options));\n    }\n}\nclass FootnoteText extends StyleForParagraph {\n    constructor(options){\n        super(__spreadValues({\n            id: \"FootnoteText\",\n            name: \"footnote text\",\n            link: \"FootnoteTextChar\",\n            basedOn: \"Normal\",\n            uiPriority: 99,\n            semiHidden: true,\n            unhideWhenUsed: true,\n            paragraph: {\n                spacing: {\n                    after: 0,\n                    line: 240,\n                    lineRule: LineRuleType.AUTO\n                }\n            },\n            run: {\n                size: 20\n            }\n        }, options));\n    }\n}\nclass FootnoteReferenceStyle extends StyleForCharacter {\n    constructor(options){\n        super(__spreadValues({\n            id: \"FootnoteReference\",\n            name: \"footnote reference\",\n            basedOn: \"DefaultParagraphFont\",\n            semiHidden: true,\n            run: {\n                superScript: true\n            }\n        }, options));\n    }\n}\nclass FootnoteTextChar extends StyleForCharacter {\n    constructor(options){\n        super(__spreadValues({\n            id: \"FootnoteTextChar\",\n            name: \"Footnote Text Char\",\n            basedOn: \"DefaultParagraphFont\",\n            link: \"FootnoteText\",\n            semiHidden: true,\n            run: {\n                size: 20\n            }\n        }, options));\n    }\n}\nclass HyperlinkStyle extends StyleForCharacter {\n    constructor(options){\n        super(__spreadValues({\n            id: \"Hyperlink\",\n            name: \"Hyperlink\",\n            basedOn: \"DefaultParagraphFont\",\n            run: {\n                color: \"0563C1\",\n                underline: {\n                    type: UnderlineType.SINGLE\n                }\n            }\n        }, options));\n    }\n}\nclass Styles extends XmlComponent {\n    constructor(options){\n        super(\"w:styles\");\n        if (options.initialStyles) {\n            this.root.push(options.initialStyles);\n        }\n        if (options.importedStyles) {\n            for (const style of options.importedStyles){\n                this.root.push(style);\n            }\n        }\n        if (options.paragraphStyles) {\n            for (const style of options.paragraphStyles){\n                this.root.push(new StyleForParagraph(style));\n            }\n        }\n        if (options.characterStyles) {\n            for (const style of options.characterStyles){\n                this.root.push(new StyleForCharacter(style));\n            }\n        }\n    }\n}\nclass ParagraphPropertiesDefaults extends XmlComponent {\n    constructor(options){\n        super(\"w:pPrDefault\");\n        this.root.push(new ParagraphProperties(options));\n    }\n}\nclass RunPropertiesDefaults extends XmlComponent {\n    constructor(options){\n        super(\"w:rPrDefault\");\n        this.root.push(new RunProperties(options));\n    }\n}\nclass DocumentDefaults extends XmlComponent {\n    constructor(options){\n        super(\"w:docDefaults\");\n        __publicField(this, \"runPropertiesDefaults\");\n        __publicField(this, \"paragraphPropertiesDefaults\");\n        this.runPropertiesDefaults = new RunPropertiesDefaults(options.run);\n        this.paragraphPropertiesDefaults = new ParagraphPropertiesDefaults(options.paragraph);\n        this.root.push(this.runPropertiesDefaults);\n        this.root.push(this.paragraphPropertiesDefaults);\n    }\n}\nclass ExternalStylesFactory {\n    /**\n   * Creates new Style based on the given styles.\n   * Parses the styles and convert them to XmlComponent.\n   * Example content from styles.xml:\n   * <?xml version=\"1.0\">\n   * <w:styles xmlns:mc=\"some schema\" ...>\n   *\n   *   <w:style w:type=\"paragraph\" w:styleId=\"Heading1\">\n   *           <w:name w:val=\"heading 1\"/>\n   *           .....\n   *   </w:style>\n   *\n   *   <w:style w:type=\"paragraph\" w:styleId=\"Heading2\">\n   *           <w:name w:val=\"heading 2\"/>\n   *           .....\n   *   </w:style>\n   *\n   *   <w:docDefaults>Or any other element will be parsed to</w:docDefaults>\n   *\n   * </w:styles>\n   *\n   * @param externalStyles context from styles.xml\n   */ newInstance(xmlData) {\n        const xmlObj = libExports.xml2js(xmlData, {\n            compact: false\n        });\n        let stylesXmlElement;\n        for (const xmlElm of xmlObj.elements || []){\n            if (xmlElm.name === \"w:styles\") {\n                stylesXmlElement = xmlElm;\n            }\n        }\n        if (stylesXmlElement === void 0) {\n            throw new Error(\"can not find styles element\");\n        }\n        const stylesElements = stylesXmlElement.elements || [];\n        const importedStyle = new Styles({\n            initialStyles: new ImportedRootElementAttributes(stylesXmlElement.attributes),\n            importedStyles: stylesElements.map((childElm)=>convertToXmlComponent(childElm))\n        });\n        return importedStyle;\n    }\n}\nclass DefaultStylesFactory {\n    newInstance(options = {}) {\n        var _a;\n        const documentAttributes = new DocumentAttributes([\n            \"mc\",\n            \"r\",\n            \"w\",\n            \"w14\",\n            \"w15\"\n        ], \"w14 w15\");\n        return {\n            initialStyles: documentAttributes,\n            importedStyles: [\n                new DocumentDefaults((_a = options.document) != null ? _a : {}),\n                new TitleStyle(__spreadValues({\n                    run: {\n                        size: 56\n                    }\n                }, options.title)),\n                new Heading1Style(__spreadValues({\n                    run: {\n                        color: \"2E74B5\",\n                        size: 32\n                    }\n                }, options.heading1)),\n                new Heading2Style(__spreadValues({\n                    run: {\n                        color: \"2E74B5\",\n                        size: 26\n                    }\n                }, options.heading2)),\n                new Heading3Style(__spreadValues({\n                    run: {\n                        color: \"1F4D78\",\n                        size: 24\n                    }\n                }, options.heading3)),\n                new Heading4Style(__spreadValues({\n                    run: {\n                        color: \"2E74B5\",\n                        italics: true\n                    }\n                }, options.heading4)),\n                new Heading5Style(__spreadValues({\n                    run: {\n                        color: \"2E74B5\"\n                    }\n                }, options.heading5)),\n                new Heading6Style(__spreadValues({\n                    run: {\n                        color: \"1F4D78\"\n                    }\n                }, options.heading6)),\n                new StrongStyle(__spreadValues({\n                    run: {\n                        bold: true\n                    }\n                }, options.strong)),\n                new ListParagraph(options.listParagraph || {}),\n                new HyperlinkStyle(options.hyperlink || {}),\n                new FootnoteReferenceStyle(options.footnoteReference || {}),\n                new FootnoteText(options.footnoteText || {}),\n                new FootnoteTextChar(options.footnoteTextChar || {})\n            ]\n        };\n    }\n}\nclass File {\n    constructor(options){\n        // eslint-disable-next-line functional/prefer-readonly-type\n        __publicField(this, \"currentRelationshipId\", 1);\n        __publicField(this, \"documentWrapper\");\n        // eslint-disable-next-line functional/prefer-readonly-type\n        __publicField(this, \"headers\", []);\n        // eslint-disable-next-line functional/prefer-readonly-type\n        __publicField(this, \"footers\", []);\n        __publicField(this, \"coreProperties\");\n        __publicField(this, \"numbering\");\n        __publicField(this, \"media\");\n        __publicField(this, \"fileRelationships\");\n        __publicField(this, \"footnotesWrapper\");\n        __publicField(this, \"settings\");\n        __publicField(this, \"contentTypes\");\n        __publicField(this, \"customProperties\");\n        __publicField(this, \"appProperties\");\n        __publicField(this, \"styles\");\n        __publicField(this, \"comments\");\n        __publicField(this, \"fontWrapper\");\n        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n        this.coreProperties = new CoreProperties(__spreadProps(__spreadValues({}, options), {\n            creator: (_a = options.creator) != null ? _a : \"Un-named\",\n            revision: (_b = options.revision) != null ? _b : 1,\n            lastModifiedBy: (_c = options.lastModifiedBy) != null ? _c : \"Un-named\"\n        }));\n        this.numbering = new Numbering(options.numbering ? options.numbering : {\n            config: []\n        });\n        this.comments = new Comments((_d = options.comments) != null ? _d : {\n            children: []\n        });\n        this.fileRelationships = new Relationships();\n        this.customProperties = new CustomProperties((_e = options.customProperties) != null ? _e : []);\n        this.appProperties = new AppProperties();\n        this.footnotesWrapper = new FootnotesWrapper();\n        this.contentTypes = new ContentTypes();\n        this.documentWrapper = new DocumentWrapper({\n            background: options.background\n        });\n        this.settings = new Settings({\n            compatibilityModeVersion: options.compatabilityModeVersion,\n            compatibility: options.compatibility,\n            evenAndOddHeaders: options.evenAndOddHeaderAndFooters ? true : false,\n            trackRevisions: (_f = options.features) == null ? void 0 : _f.trackRevisions,\n            updateFields: (_g = options.features) == null ? void 0 : _g.updateFields,\n            defaultTabStop: options.defaultTabStop,\n            hyphenation: {\n                autoHyphenation: (_h = options.hyphenation) == null ? void 0 : _h.autoHyphenation,\n                hyphenationZone: (_i = options.hyphenation) == null ? void 0 : _i.hyphenationZone,\n                consecutiveHyphenLimit: (_j = options.hyphenation) == null ? void 0 : _j.consecutiveHyphenLimit,\n                doNotHyphenateCaps: (_k = options.hyphenation) == null ? void 0 : _k.doNotHyphenateCaps\n            }\n        });\n        this.media = new Media();\n        if (options.externalStyles !== void 0) {\n            const stylesFactory = new ExternalStylesFactory();\n            this.styles = stylesFactory.newInstance(options.externalStyles);\n        } else if (options.styles) {\n            const stylesFactory = new DefaultStylesFactory();\n            const defaultStyles = stylesFactory.newInstance(options.styles.default);\n            this.styles = new Styles(__spreadValues(__spreadValues({}, defaultStyles), options.styles));\n        } else {\n            const stylesFactory = new DefaultStylesFactory();\n            this.styles = new Styles(stylesFactory.newInstance());\n        }\n        this.addDefaultRelationships();\n        for (const section of options.sections){\n            this.addSection(section);\n        }\n        if (options.footnotes) {\n            for(const key in options.footnotes){\n                this.footnotesWrapper.View.createFootNote(parseFloat(key), options.footnotes[key].children);\n            }\n        }\n        this.fontWrapper = new FontWrapper((_l = options.fonts) != null ? _l : []);\n    }\n    addSection({ headers = {}, footers = {}, children, properties }) {\n        this.documentWrapper.View.Body.addSection(__spreadProps(__spreadValues({}, properties), {\n            headerWrapperGroup: {\n                default: headers.default ? this.createHeader(headers.default) : void 0,\n                first: headers.first ? this.createHeader(headers.first) : void 0,\n                even: headers.even ? this.createHeader(headers.even) : void 0\n            },\n            footerWrapperGroup: {\n                default: footers.default ? this.createFooter(footers.default) : void 0,\n                first: footers.first ? this.createFooter(footers.first) : void 0,\n                even: footers.even ? this.createFooter(footers.even) : void 0\n            }\n        }));\n        for (const child of children){\n            this.documentWrapper.View.add(child);\n        }\n    }\n    createHeader(header) {\n        const wrapper = new HeaderWrapper(this.media, this.currentRelationshipId++);\n        for (const child of header.options.children){\n            wrapper.add(child);\n        }\n        this.addHeaderToDocument(wrapper);\n        return wrapper;\n    }\n    createFooter(footer) {\n        const wrapper = new FooterWrapper(this.media, this.currentRelationshipId++);\n        for (const child of footer.options.children){\n            wrapper.add(child);\n        }\n        this.addFooterToDocument(wrapper);\n        return wrapper;\n    }\n    addHeaderToDocument(header, type2 = HeaderFooterReferenceType.DEFAULT) {\n        this.headers.push({\n            header,\n            type: type2\n        });\n        this.documentWrapper.Relationships.createRelationship(header.View.ReferenceId, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header\", `header${this.headers.length}.xml`);\n        this.contentTypes.addHeader(this.headers.length);\n    }\n    addFooterToDocument(footer, type2 = HeaderFooterReferenceType.DEFAULT) {\n        this.footers.push({\n            footer,\n            type: type2\n        });\n        this.documentWrapper.Relationships.createRelationship(footer.View.ReferenceId, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer\", `footer${this.footers.length}.xml`);\n        this.contentTypes.addFooter(this.footers.length);\n    }\n    addDefaultRelationships() {\n        this.fileRelationships.createRelationship(1, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\", \"word/document.xml\");\n        this.fileRelationships.createRelationship(2, \"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\", \"docProps/core.xml\");\n        this.fileRelationships.createRelationship(3, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\", \"docProps/app.xml\");\n        this.fileRelationships.createRelationship(4, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties\", \"docProps/custom.xml\");\n        this.documentWrapper.Relationships.createRelationship(// eslint-disable-next-line functional/immutable-data\n        this.currentRelationshipId++, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\", \"styles.xml\");\n        this.documentWrapper.Relationships.createRelationship(// eslint-disable-next-line functional/immutable-data\n        this.currentRelationshipId++, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\", \"numbering.xml\");\n        this.documentWrapper.Relationships.createRelationship(// eslint-disable-next-line functional/immutable-data\n        this.currentRelationshipId++, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes\", \"footnotes.xml\");\n        this.documentWrapper.Relationships.createRelationship(// eslint-disable-next-line functional/immutable-data\n        this.currentRelationshipId++, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\", \"settings.xml\");\n        this.documentWrapper.Relationships.createRelationship(// eslint-disable-next-line functional/immutable-data\n        this.currentRelationshipId++, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments\", \"comments.xml\");\n    }\n    get Document() {\n        return this.documentWrapper;\n    }\n    get Styles() {\n        return this.styles;\n    }\n    get CoreProperties() {\n        return this.coreProperties;\n    }\n    get Numbering() {\n        return this.numbering;\n    }\n    get Media() {\n        return this.media;\n    }\n    get FileRelationships() {\n        return this.fileRelationships;\n    }\n    get Headers() {\n        return this.headers.map((item)=>item.header);\n    }\n    get Footers() {\n        return this.footers.map((item)=>item.footer);\n    }\n    get ContentTypes() {\n        return this.contentTypes;\n    }\n    get CustomProperties() {\n        return this.customProperties;\n    }\n    get AppProperties() {\n        return this.appProperties;\n    }\n    get FootNotes() {\n        return this.footnotesWrapper;\n    }\n    get Settings() {\n        return this.settings;\n    }\n    get Comments() {\n        return this.comments;\n    }\n    get FontTable() {\n        return this.fontWrapper;\n    }\n}\nclass FieldInstruction extends XmlComponent {\n    constructor(properties = {}){\n        super(\"w:instrText\");\n        __publicField(this, \"properties\");\n        this.properties = properties;\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        let instruction = \"TOC\";\n        if (this.properties.captionLabel) {\n            instruction = `${instruction} \\\\a \"${this.properties.captionLabel}\"`;\n        }\n        if (this.properties.entriesFromBookmark) {\n            instruction = `${instruction} \\\\b \"${this.properties.entriesFromBookmark}\"`;\n        }\n        if (this.properties.captionLabelIncludingNumbers) {\n            instruction = `${instruction} \\\\c \"${this.properties.captionLabelIncludingNumbers}\"`;\n        }\n        if (this.properties.sequenceAndPageNumbersSeparator) {\n            instruction = `${instruction} \\\\d \"${this.properties.sequenceAndPageNumbersSeparator}\"`;\n        }\n        if (this.properties.tcFieldIdentifier) {\n            instruction = `${instruction} \\\\f \"${this.properties.tcFieldIdentifier}\"`;\n        }\n        if (this.properties.hyperlink) {\n            instruction = `${instruction} \\\\h`;\n        }\n        if (this.properties.tcFieldLevelRange) {\n            instruction = `${instruction} \\\\l \"${this.properties.tcFieldLevelRange}\"`;\n        }\n        if (this.properties.pageNumbersEntryLevelsRange) {\n            instruction = `${instruction} \\\\n \"${this.properties.pageNumbersEntryLevelsRange}\"`;\n        }\n        if (this.properties.headingStyleRange) {\n            instruction = `${instruction} \\\\o \"${this.properties.headingStyleRange}\"`;\n        }\n        if (this.properties.entryAndPageNumberSeparator) {\n            instruction = `${instruction} \\\\p \"${this.properties.entryAndPageNumberSeparator}\"`;\n        }\n        if (this.properties.seqFieldIdentifierForPrefix) {\n            instruction = `${instruction} \\\\s \"${this.properties.seqFieldIdentifierForPrefix}\"`;\n        }\n        if (this.properties.stylesWithLevels && this.properties.stylesWithLevels.length) {\n            const styles = this.properties.stylesWithLevels.map((sl)=>`${sl.styleName},${sl.level}`).join(\",\");\n            instruction = `${instruction} \\\\t \"${styles}\"`;\n        }\n        if (this.properties.useAppliedParagraphOutlineLevel) {\n            instruction = `${instruction} \\\\u`;\n        }\n        if (this.properties.preserveTabInEntries) {\n            instruction = `${instruction} \\\\w`;\n        }\n        if (this.properties.preserveNewLineInEntries) {\n            instruction = `${instruction} \\\\x`;\n        }\n        if (this.properties.hideTabAndPageNumbersInWebView) {\n            instruction = `${instruction} \\\\z`;\n        }\n        this.root.push(instruction);\n    }\n}\nclass StructuredDocumentTagContent extends XmlComponent {\n    constructor(){\n        super(\"w:sdtContent\");\n    }\n}\nclass StructuredDocumentTagProperties extends XmlComponent {\n    constructor(alias){\n        super(\"w:sdtPr\");\n        if (alias) {\n            this.root.push(new StringValueElement(\"w:alias\", alias));\n        }\n    }\n}\nclass TableOfContents extends FileChild {\n    constructor(alias = \"Table of Contents\", properties){\n        super(\"w:sdt\");\n        this.root.push(new StructuredDocumentTagProperties(alias));\n        const content = new StructuredDocumentTagContent();\n        const beginParagraph = new Paragraph({\n            children: [\n                new Run({\n                    children: [\n                        new Begin(true),\n                        new FieldInstruction(properties),\n                        new Separate()\n                    ]\n                })\n            ]\n        });\n        content.addChildElement(beginParagraph);\n        const endParagraph = new Paragraph({\n            children: [\n                new Run({\n                    children: [\n                        new End()\n                    ]\n                })\n            ]\n        });\n        content.addChildElement(endParagraph);\n        this.root.push(content);\n    }\n}\nclass StyleLevel {\n    constructor(styleName, level){\n        __publicField(this, \"styleName\");\n        __publicField(this, \"level\");\n        this.styleName = styleName;\n        this.level = level;\n    }\n}\nclass Header2 {\n    constructor(options = {\n        children: []\n    }){\n        __publicField(this, \"options\");\n        this.options = options;\n    }\n}\nclass Footer2 {\n    constructor(options = {\n        children: []\n    }){\n        __publicField(this, \"options\");\n        this.options = options;\n    }\n}\nclass FootNoteReferenceRunAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            id: \"w:id\"\n        });\n    }\n}\nclass FootnoteReference extends XmlComponent {\n    constructor(id){\n        super(\"w:footnoteReference\");\n        this.root.push(new FootNoteReferenceRunAttributes({\n            id\n        }));\n    }\n}\nclass FootnoteReferenceRun extends Run {\n    constructor(id){\n        super({\n            style: \"FootnoteReference\"\n        });\n        this.root.push(new FootnoteReference(id));\n    }\n}\nclass InsertedTextRun extends XmlComponent {\n    constructor(options){\n        super(\"w:ins\");\n        this.root.push(new ChangeAttributes({\n            id: options.id,\n            author: options.author,\n            date: options.date\n        }));\n        this.addChildElement(new TextRun(options));\n    }\n}\nclass DeletedPage extends XmlComponent {\n    constructor(){\n        super(\"w:delInstrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(\"PAGE\");\n    }\n}\nclass DeletedNumberOfPages extends XmlComponent {\n    constructor(){\n        super(\"w:delInstrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(\"NUMPAGES\");\n    }\n}\nclass DeletedNumberOfPagesSection extends XmlComponent {\n    constructor(){\n        super(\"w:delInstrText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(\"SECTIONPAGES\");\n    }\n}\nclass DeletedText extends XmlComponent {\n    constructor(text){\n        super(\"w:delText\");\n        this.root.push(new TextAttributes({\n            space: SpaceType.PRESERVE\n        }));\n        this.root.push(text);\n    }\n}\nclass DeletedTextRun extends XmlComponent {\n    constructor(options){\n        super(\"w:del\");\n        __publicField(this, \"deletedTextRunWrapper\");\n        this.root.push(new ChangeAttributes({\n            id: options.id,\n            author: options.author,\n            date: options.date\n        }));\n        this.deletedTextRunWrapper = new DeletedTextRunWrapper(options);\n        this.addChildElement(this.deletedTextRunWrapper);\n    }\n}\nclass DeletedTextRunWrapper extends XmlComponent {\n    constructor(options){\n        super(\"w:r\");\n        this.root.push(new RunProperties(options));\n        if (options.children) {\n            for (const child of options.children){\n                if (typeof child === \"string\") {\n                    switch(child){\n                        case PageNumber.CURRENT:\n                            this.root.push(new Begin());\n                            this.root.push(new DeletedPage());\n                            this.root.push(new Separate());\n                            this.root.push(new End());\n                            break;\n                        case PageNumber.TOTAL_PAGES:\n                            this.root.push(new Begin());\n                            this.root.push(new DeletedNumberOfPages());\n                            this.root.push(new Separate());\n                            this.root.push(new End());\n                            break;\n                        case PageNumber.TOTAL_PAGES_IN_SECTION:\n                            this.root.push(new Begin());\n                            this.root.push(new DeletedNumberOfPagesSection());\n                            this.root.push(new Separate());\n                            this.root.push(new End());\n                            break;\n                        default:\n                            this.root.push(new DeletedText(child));\n                            break;\n                    }\n                    continue;\n                }\n                this.root.push(child);\n            }\n        } else if (options.text) {\n            this.root.push(new DeletedText(options.text));\n        }\n        if (options.break) {\n            for(let i = 0; i < options.break; i++){\n                this.root.splice(1, 0, new Break$1());\n            }\n        }\n    }\n}\nclass CheckboxSymbolAttributes extends XmlAttributeComponent {\n    constructor(){\n        super(...arguments);\n        __publicField(this, \"xmlKeys\", {\n            val: \"w14:val\",\n            symbolfont: \"w14:font\"\n        });\n    }\n}\nclass CheckBoxSymbolElement extends XmlComponent {\n    constructor(name, val, font){\n        super(name);\n        if (font) {\n            this.root.push(new CheckboxSymbolAttributes({\n                val: shortHexNumber(val),\n                symbolfont: font\n            }));\n        } else {\n            this.root.push(new CheckboxSymbolAttributes({\n                val\n            }));\n        }\n    }\n}\nclass CheckBoxUtil extends XmlComponent {\n    constructor(options){\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        super(\"w14:checkbox\");\n        __publicField(this, \"DEFAULT_UNCHECKED_SYMBOL\", \"2610\");\n        __publicField(this, \"DEFAULT_CHECKED_SYMBOL\", \"2612\");\n        __publicField(this, \"DEFAULT_FONT\", \"MS Gothic\");\n        const value = (options == null ? void 0 : options.checked) ? \"1\" : \"0\";\n        let symbol;\n        let font;\n        this.root.push(new CheckBoxSymbolElement(\"w14:checked\", value));\n        symbol = ((_a = options == null ? void 0 : options.checkedState) == null ? void 0 : _a.value) ? (_b = options == null ? void 0 : options.checkedState) == null ? void 0 : _b.value : this.DEFAULT_CHECKED_SYMBOL;\n        font = ((_c = options == null ? void 0 : options.checkedState) == null ? void 0 : _c.font) ? (_d = options == null ? void 0 : options.checkedState) == null ? void 0 : _d.font : this.DEFAULT_FONT;\n        this.root.push(new CheckBoxSymbolElement(\"w14:checkedState\", symbol, font));\n        symbol = ((_e = options == null ? void 0 : options.uncheckedState) == null ? void 0 : _e.value) ? (_f = options == null ? void 0 : options.uncheckedState) == null ? void 0 : _f.value : this.DEFAULT_UNCHECKED_SYMBOL;\n        font = ((_g = options == null ? void 0 : options.uncheckedState) == null ? void 0 : _g.font) ? (_h = options == null ? void 0 : options.uncheckedState) == null ? void 0 : _h.font : this.DEFAULT_FONT;\n        this.root.push(new CheckBoxSymbolElement(\"w14:uncheckedState\", symbol, font));\n    }\n}\nclass CheckBox extends XmlComponent {\n    constructor(options){\n        var _a, _b, _c, _d;\n        super(\"w:sdt\");\n        // default values per Microsoft\n        __publicField(this, \"DEFAULT_UNCHECKED_SYMBOL\", \"2610\");\n        __publicField(this, \"DEFAULT_CHECKED_SYMBOL\", \"2612\");\n        __publicField(this, \"DEFAULT_FONT\", \"MS Gothic\");\n        const properties = new StructuredDocumentTagProperties(options == null ? void 0 : options.alias);\n        properties.addChildElement(new CheckBoxUtil(options));\n        this.root.push(properties);\n        const content = new StructuredDocumentTagContent();\n        const checkedFont = (_a = options == null ? void 0 : options.checkedState) == null ? void 0 : _a.font;\n        const checkedText = (_b = options == null ? void 0 : options.checkedState) == null ? void 0 : _b.value;\n        const uncheckedFont = (_c = options == null ? void 0 : options.uncheckedState) == null ? void 0 : _c.font;\n        const uncheckedText = (_d = options == null ? void 0 : options.uncheckedState) == null ? void 0 : _d.value;\n        let symbolFont;\n        let char;\n        if (options == null ? void 0 : options.checked) {\n            symbolFont = checkedFont ? checkedFont : this.DEFAULT_FONT;\n            char = checkedText ? checkedText : this.DEFAULT_CHECKED_SYMBOL;\n        } else {\n            symbolFont = uncheckedFont ? uncheckedFont : this.DEFAULT_FONT;\n            char = uncheckedText ? uncheckedText : this.DEFAULT_UNCHECKED_SYMBOL;\n        }\n        const initialRenderedChar = new SymbolRun({\n            char,\n            symbolfont: symbolFont\n        });\n        content.addChildElement(initialRenderedChar);\n        this.root.push(content);\n    }\n}\nconst createPictElement = ({ shape })=>new BuilderElement({\n        name: \"w:pict\",\n        children: [\n            shape\n        ]\n    });\nconst createTextboxContent = ({ children = [] })=>new BuilderElement({\n        name: \"w:txbxContent\",\n        children\n    });\nconst createVmlTextbox = ({ style, children, inset })=>new BuilderElement({\n        name: \"v:textbox\",\n        attributes: {\n            style: {\n                key: \"style\",\n                value: style\n            },\n            insetMode: {\n                key: \"insetmode\",\n                value: inset ? \"custom\" : \"auto\"\n            },\n            inset: {\n                key: \"inset\",\n                value: inset ? `${inset.left}, ${inset.top}, ${inset.right}, ${inset.bottom}` : void 0\n            }\n        },\n        children: [\n            createTextboxContent({\n                children\n            })\n        ]\n    });\nconst SHAPE_TYPE = \"#_x0000_t202\";\nconst styleToKeyMap = {\n    flip: \"flip\",\n    height: \"height\",\n    left: \"left\",\n    marginBottom: \"margin-bottom\",\n    marginLeft: \"margin-left\",\n    marginRight: \"margin-right\",\n    marginTop: \"margin-top\",\n    positionHorizontal: \"mso-position-horizontal\",\n    positionHorizontalRelative: \"mso-position-horizontal-relative\",\n    positionVertical: \"mso-position-vertical\",\n    positionVerticalRelative: \"mso-position-vertical-relative\",\n    wrapDistanceBottom: \"mso-wrap-distance-bottom\",\n    wrapDistanceLeft: \"mso-wrap-distance-left\",\n    wrapDistanceRight: \"mso-wrap-distance-right\",\n    wrapDistanceTop: \"mso-wrap-distance-top\",\n    wrapEdited: \"mso-wrap-edited\",\n    wrapStyle: \"mso-wrap-style\",\n    position: \"position\",\n    rotation: \"rotation\",\n    top: \"top\",\n    visibility: \"visibility\",\n    width: \"width\",\n    zIndex: \"z-index\"\n};\nconst formatShapeStyle = (style)=>style ? Object.entries(style).map(([key, value])=>`${styleToKeyMap[key]}:${value}`).join(\";\") : void 0;\nconst createShape = ({ id, children, type: type2 = SHAPE_TYPE, style })=>new BuilderElement({\n        name: \"v:shape\",\n        attributes: {\n            id: {\n                key: \"id\",\n                value: id\n            },\n            type: {\n                key: \"type\",\n                value: type2\n            },\n            style: {\n                key: \"style\",\n                value: formatShapeStyle(style)\n            }\n        },\n        children: [\n            createVmlTextbox({\n                style: \"mso-fit-shape-to-text:t;\",\n                children\n            })\n        ]\n    });\nclass Textbox extends FileChild {\n    constructor(_a){\n        var _b = _a, { style, children } = _b, rest = __objRest(_b, [\n            \"style\",\n            \"children\"\n        ]);\n        super(\"w:p\");\n        this.root.push(new ParagraphProperties(rest));\n        this.root.push(createPictElement({\n            shape: createShape({\n                children,\n                id: uniqueId(),\n                style\n            })\n        }));\n    }\n}\nvar streamBrowserifyExports = requireStreamBrowserify();\nfunction commonjsRequire(path) {\n    throw new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar jszip_min = {\n    exports: {}\n};\nvar hasRequiredJszip_min;\nfunction requireJszip_min() {\n    if (hasRequiredJszip_min) return jszip_min.exports;\n    hasRequiredJszip_min = 1;\n    (function(module, exports) {\n        !function(e) {\n            module.exports = e();\n        }(function() {\n            return (function s(a, o, h) {\n                function u(r, e2) {\n                    if (!o[r]) {\n                        if (!a[r]) {\n                            var t = \"function\" == typeof commonjsRequire && commonjsRequire;\n                            if (!e2 && t) return t(r, true);\n                            if (l) return l(r, true);\n                            var n = new Error(\"Cannot find module '\" + r + \"'\");\n                            throw n.code = \"MODULE_NOT_FOUND\", n;\n                        }\n                        var i = o[r] = {\n                            exports: {}\n                        };\n                        a[r][0].call(i.exports, function(e3) {\n                            var t2 = a[r][1][e3];\n                            return u(t2 || e3);\n                        }, i, i.exports, s, a, o, h);\n                    }\n                    return o[r].exports;\n                }\n                for(var l = \"function\" == typeof commonjsRequire && commonjsRequire, e = 0; e < h.length; e++)u(h[e]);\n                return u;\n            })({\n                1: [\n                    function(e, t, r) {\n                        var d = e(\"./utils\"), c = e(\"./support\"), p = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n                        r.encode = function(e2) {\n                            for(var t2, r2, n, i, s, a, o, h = [], u = 0, l = e2.length, f = l, c2 = \"string\" !== d.getTypeOf(e2); u < e2.length;)f = l - u, n = c2 ? (t2 = e2[u++], r2 = u < l ? e2[u++] : 0, u < l ? e2[u++] : 0) : (t2 = e2.charCodeAt(u++), r2 = u < l ? e2.charCodeAt(u++) : 0, u < l ? e2.charCodeAt(u++) : 0), i = t2 >> 2, s = (3 & t2) << 4 | r2 >> 4, a = 1 < f ? (15 & r2) << 2 | n >> 6 : 64, o = 2 < f ? 63 & n : 64, h.push(p.charAt(i) + p.charAt(s) + p.charAt(a) + p.charAt(o));\n                            return h.join(\"\");\n                        }, r.decode = function(e2) {\n                            var t2, r2, n, i, s, a, o = 0, h = 0, u = \"data:\";\n                            if (e2.substr(0, u.length) === u) throw new Error(\"Invalid base64 input, it looks like a data url.\");\n                            var l, f = 3 * (e2 = e2.replace(/[^A-Za-z0-9+/=]/g, \"\")).length / 4;\n                            if (e2.charAt(e2.length - 1) === p.charAt(64) && f--, e2.charAt(e2.length - 2) === p.charAt(64) && f--, f % 1 != 0) throw new Error(\"Invalid base64 input, bad content length.\");\n                            for(l = c.uint8array ? new Uint8Array(0 | f) : new Array(0 | f); o < e2.length;)t2 = p.indexOf(e2.charAt(o++)) << 2 | (i = p.indexOf(e2.charAt(o++))) >> 4, r2 = (15 & i) << 4 | (s = p.indexOf(e2.charAt(o++))) >> 2, n = (3 & s) << 6 | (a = p.indexOf(e2.charAt(o++))), l[h++] = t2, 64 !== s && (l[h++] = r2), 64 !== a && (l[h++] = n);\n                            return l;\n                        };\n                    },\n                    {\n                        \"./support\": 30,\n                        \"./utils\": 32\n                    }\n                ],\n                2: [\n                    function(e, t, r) {\n                        var n = e(\"./external\"), i = e(\"./stream/DataWorker\"), s = e(\"./stream/Crc32Probe\"), a = e(\"./stream/DataLengthProbe\");\n                        function o(e2, t2, r2, n2, i2) {\n                            this.compressedSize = e2, this.uncompressedSize = t2, this.crc32 = r2, this.compression = n2, this.compressedContent = i2;\n                        }\n                        o.prototype = {\n                            getContentWorker: function() {\n                                var e2 = new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")), t2 = this;\n                                return e2.on(\"end\", function() {\n                                    if (this.streamInfo.data_length !== t2.uncompressedSize) throw new Error(\"Bug : uncompressed data size mismatch\");\n                                }), e2;\n                            },\n                            getCompressedWorker: function() {\n                                return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\", this.compressedSize).withStreamInfo(\"uncompressedSize\", this.uncompressedSize).withStreamInfo(\"crc32\", this.crc32).withStreamInfo(\"compression\", this.compression);\n                            }\n                        }, o.createWorkerFrom = function(e2, t2, r2) {\n                            return e2.pipe(new s()).pipe(new a(\"uncompressedSize\")).pipe(t2.compressWorker(r2)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\", t2);\n                        }, t.exports = o;\n                    },\n                    {\n                        \"./external\": 6,\n                        \"./stream/Crc32Probe\": 25,\n                        \"./stream/DataLengthProbe\": 26,\n                        \"./stream/DataWorker\": 27\n                    }\n                ],\n                3: [\n                    function(e, t, r) {\n                        var n = e(\"./stream/GenericWorker\");\n                        r.STORE = {\n                            magic: \"\\x00\\x00\",\n                            compressWorker: function() {\n                                return new n(\"STORE compression\");\n                            },\n                            uncompressWorker: function() {\n                                return new n(\"STORE decompression\");\n                            }\n                        }, r.DEFLATE = e(\"./flate\");\n                    },\n                    {\n                        \"./flate\": 7,\n                        \"./stream/GenericWorker\": 28\n                    }\n                ],\n                4: [\n                    function(e, t, r) {\n                        var n = e(\"./utils\");\n                        var o = function() {\n                            for(var e2, t2 = [], r2 = 0; r2 < 256; r2++){\n                                e2 = r2;\n                                for(var n2 = 0; n2 < 8; n2++)e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;\n                                t2[r2] = e2;\n                            }\n                            return t2;\n                        }();\n                        t.exports = function(e2, t2) {\n                            return void 0 !== e2 && e2.length ? \"string\" !== n.getTypeOf(e2) ? function(e3, t3, r2, n2) {\n                                var i = o, s = n2 + r2;\n                                e3 ^= -1;\n                                for(var a = n2; a < s; a++)e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3[a])];\n                                return -1 ^ e3;\n                            }(0 | t2, e2, e2.length, 0) : function(e3, t3, r2, n2) {\n                                var i = o, s = n2 + r2;\n                                e3 ^= -1;\n                                for(var a = n2; a < s; a++)e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3.charCodeAt(a))];\n                                return -1 ^ e3;\n                            }(0 | t2, e2, e2.length, 0) : 0;\n                        };\n                    },\n                    {\n                        \"./utils\": 32\n                    }\n                ],\n                5: [\n                    function(e, t, r) {\n                        r.base64 = false, r.binary = false, r.dir = false, r.createFolders = true, r.date = null, r.compression = null, r.compressionOptions = null, r.comment = null, r.unixPermissions = null, r.dosPermissions = null;\n                    },\n                    {}\n                ],\n                6: [\n                    function(e, t, r) {\n                        var n = null;\n                        n = \"undefined\" != typeof Promise ? Promise : e(\"lie\"), t.exports = {\n                            Promise: n\n                        };\n                    },\n                    {\n                        lie: 37\n                    }\n                ],\n                7: [\n                    function(e, t, r) {\n                        var n = \"undefined\" != typeof Uint8Array && \"undefined\" != typeof Uint16Array && \"undefined\" != typeof Uint32Array, i = e(\"pako\"), s = e(\"./utils\"), a = e(\"./stream/GenericWorker\"), o = n ? \"uint8array\" : \"array\";\n                        function h(e2, t2) {\n                            a.call(this, \"FlateWorker/\" + e2), this._pako = null, this._pakoAction = e2, this._pakoOptions = t2, this.meta = {};\n                        }\n                        r.magic = \"\\b\\x00\", s.inherits(h, a), h.prototype.processChunk = function(e2) {\n                            this.meta = e2.meta, null === this._pako && this._createPako(), this._pako.push(s.transformTo(o, e2.data), false);\n                        }, h.prototype.flush = function() {\n                            a.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);\n                        }, h.prototype.cleanUp = function() {\n                            a.prototype.cleanUp.call(this), this._pako = null;\n                        }, h.prototype._createPako = function() {\n                            this._pako = new i[this._pakoAction]({\n                                raw: true,\n                                level: this._pakoOptions.level || -1\n                            });\n                            var t2 = this;\n                            this._pako.onData = function(e2) {\n                                t2.push({\n                                    data: e2,\n                                    meta: t2.meta\n                                });\n                            };\n                        }, r.compressWorker = function(e2) {\n                            return new h(\"Deflate\", e2);\n                        }, r.uncompressWorker = function() {\n                            return new h(\"Inflate\", {});\n                        };\n                    },\n                    {\n                        \"./stream/GenericWorker\": 28,\n                        \"./utils\": 32,\n                        pako: 38\n                    }\n                ],\n                8: [\n                    function(e, t, r) {\n                        function A(e2, t2) {\n                            var r2, n2 = \"\";\n                            for(r2 = 0; r2 < t2; r2++)n2 += String.fromCharCode(255 & e2), e2 >>>= 8;\n                            return n2;\n                        }\n                        function n(e2, t2, r2, n2, i2, s2) {\n                            var a, o, h = e2.file, u = e2.compression, l = s2 !== O.utf8encode, f = I.transformTo(\"string\", s2(h.name)), c = I.transformTo(\"string\", O.utf8encode(h.name)), d = h.comment, p = I.transformTo(\"string\", s2(d)), m = I.transformTo(\"string\", O.utf8encode(d)), _ = c.length !== h.name.length, g = m.length !== d.length, b = \"\", v = \"\", y = \"\", w = h.dir, k = h.date, x = {\n                                crc32: 0,\n                                compressedSize: 0,\n                                uncompressedSize: 0\n                            };\n                            t2 && !r2 || (x.crc32 = e2.crc32, x.compressedSize = e2.compressedSize, x.uncompressedSize = e2.uncompressedSize);\n                            var S = 0;\n                            t2 && (S |= 8), l || !_ && !g || (S |= 2048);\n                            var z = 0, C = 0;\n                            w && (z |= 16), \"UNIX\" === i2 ? (C = 798, z |= function(e3, t3) {\n                                var r3 = e3;\n                                return e3 || (r3 = t3 ? 16893 : 33204), (65535 & r3) << 16;\n                            }(h.unixPermissions, w)) : (C = 20, z |= function(e3) {\n                                return 63 & (e3 || 0);\n                            }(h.dosPermissions)), a = k.getUTCHours(), a <<= 6, a |= k.getUTCMinutes(), a <<= 5, a |= k.getUTCSeconds() / 2, o = k.getUTCFullYear() - 1980, o <<= 4, o |= k.getUTCMonth() + 1, o <<= 5, o |= k.getUTCDate(), _ && (v = A(1, 1) + A(B(f), 4) + c, b += \"up\" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p), 4) + m, b += \"uc\" + A(y.length, 2) + y);\n                            var E = \"\";\n                            return E += \"\\n\\x00\", E += A(S, 2), E += u.magic, E += A(a, 2), E += A(o, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f.length, 2), E += A(b.length, 2), {\n                                fileRecord: R.LOCAL_FILE_HEADER + E + f + b,\n                                dirRecord: R.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p.length, 2) + \"\\x00\\x00\\x00\\x00\" + A(z, 4) + A(n2, 4) + f + b + p\n                            };\n                        }\n                        var I = e(\"../utils\"), i = e(\"../stream/GenericWorker\"), O = e(\"../utf8\"), B = e(\"../crc32\"), R = e(\"../signature\");\n                        function s(e2, t2, r2, n2) {\n                            i.call(this, \"ZipFileWorker\"), this.bytesWritten = 0, this.zipComment = t2, this.zipPlatform = r2, this.encodeFileName = n2, this.streamFiles = e2, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];\n                        }\n                        I.inherits(s, i), s.prototype.push = function(e2) {\n                            var t2 = e2.meta.percent || 0, r2 = this.entriesCount, n2 = this._sources.length;\n                            this.accumulate ? this.contentBuffer.push(e2) : (this.bytesWritten += e2.data.length, i.prototype.push.call(this, {\n                                data: e2.data,\n                                meta: {\n                                    currentFile: this.currentFile,\n                                    percent: r2 ? (t2 + 100 * (r2 - n2 - 1)) / r2 : 100\n                                }\n                            }));\n                        }, s.prototype.openedSource = function(e2) {\n                            this.currentSourceOffset = this.bytesWritten, this.currentFile = e2.file.name;\n                            var t2 = this.streamFiles && !e2.file.dir;\n                            if (t2) {\n                                var r2 = n(e2, t2, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n                                this.push({\n                                    data: r2.fileRecord,\n                                    meta: {\n                                        percent: 0\n                                    }\n                                });\n                            } else this.accumulate = true;\n                        }, s.prototype.closedSource = function(e2) {\n                            this.accumulate = false;\n                            var t2 = this.streamFiles && !e2.file.dir, r2 = n(e2, t2, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n                            if (this.dirRecords.push(r2.dirRecord), t2) this.push({\n                                data: function(e3) {\n                                    return R.DATA_DESCRIPTOR + A(e3.crc32, 4) + A(e3.compressedSize, 4) + A(e3.uncompressedSize, 4);\n                                }(e2),\n                                meta: {\n                                    percent: 100\n                                }\n                            });\n                            else for(this.push({\n                                data: r2.fileRecord,\n                                meta: {\n                                    percent: 0\n                                }\n                            }); this.contentBuffer.length;)this.push(this.contentBuffer.shift());\n                            this.currentFile = null;\n                        }, s.prototype.flush = function() {\n                            for(var e2 = this.bytesWritten, t2 = 0; t2 < this.dirRecords.length; t2++)this.push({\n                                data: this.dirRecords[t2],\n                                meta: {\n                                    percent: 100\n                                }\n                            });\n                            var r2 = this.bytesWritten - e2, n2 = function(e3, t3, r3, n3, i2) {\n                                var s2 = I.transformTo(\"string\", i2(n3));\n                                return R.CENTRAL_DIRECTORY_END + \"\\x00\\x00\\x00\\x00\" + A(e3, 2) + A(e3, 2) + A(t3, 4) + A(r3, 4) + A(s2.length, 2) + s2;\n                            }(this.dirRecords.length, r2, e2, this.zipComment, this.encodeFileName);\n                            this.push({\n                                data: n2,\n                                meta: {\n                                    percent: 100\n                                }\n                            });\n                        }, s.prototype.prepareNextSource = function() {\n                            this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();\n                        }, s.prototype.registerPrevious = function(e2) {\n                            this._sources.push(e2);\n                            var t2 = this;\n                            return e2.on(\"data\", function(e3) {\n                                t2.processChunk(e3);\n                            }), e2.on(\"end\", function() {\n                                t2.closedSource(t2.previous.streamInfo), t2._sources.length ? t2.prepareNextSource() : t2.end();\n                            }), e2.on(\"error\", function(e3) {\n                                t2.error(e3);\n                            }), this;\n                        }, s.prototype.resume = function() {\n                            return !!i.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));\n                        }, s.prototype.error = function(e2) {\n                            var t2 = this._sources;\n                            if (!i.prototype.error.call(this, e2)) return false;\n                            for(var r2 = 0; r2 < t2.length; r2++)try {\n                                t2[r2].error(e2);\n                            } catch (e3) {}\n                            return true;\n                        }, s.prototype.lock = function() {\n                            i.prototype.lock.call(this);\n                            for(var e2 = this._sources, t2 = 0; t2 < e2.length; t2++)e2[t2].lock();\n                        }, t.exports = s;\n                    },\n                    {\n                        \"../crc32\": 4,\n                        \"../signature\": 23,\n                        \"../stream/GenericWorker\": 28,\n                        \"../utf8\": 31,\n                        \"../utils\": 32\n                    }\n                ],\n                9: [\n                    function(e, t, r) {\n                        var u = e(\"../compressions\"), n = e(\"./ZipFileWorker\");\n                        r.generateWorker = function(e2, a, t2) {\n                            var o = new n(a.streamFiles, t2, a.platform, a.encodeFileName), h = 0;\n                            try {\n                                e2.forEach(function(e3, t3) {\n                                    h++;\n                                    var r2 = function(e4, t4) {\n                                        var r3 = e4 || t4, n3 = u[r3];\n                                        if (!n3) throw new Error(r3 + \" is not a valid compression method !\");\n                                        return n3;\n                                    }(t3.options.compression, a.compression), n2 = t3.options.compressionOptions || a.compressionOptions || {}, i = t3.dir, s = t3.date;\n                                    t3._compressWorker(r2, n2).withStreamInfo(\"file\", {\n                                        name: e3,\n                                        dir: i,\n                                        date: s,\n                                        comment: t3.comment || \"\",\n                                        unixPermissions: t3.unixPermissions,\n                                        dosPermissions: t3.dosPermissions\n                                    }).pipe(o);\n                                }), o.entriesCount = h;\n                            } catch (e3) {\n                                o.error(e3);\n                            }\n                            return o;\n                        };\n                    },\n                    {\n                        \"../compressions\": 3,\n                        \"./ZipFileWorker\": 8\n                    }\n                ],\n                10: [\n                    function(e, t, r) {\n                        function n() {\n                            if (!(this instanceof n)) return new n();\n                            if (arguments.length) throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");\n                            this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = \"\", this.clone = function() {\n                                var e2 = new n();\n                                for(var t2 in this)\"function\" != typeof this[t2] && (e2[t2] = this[t2]);\n                                return e2;\n                            };\n                        }\n                        (n.prototype = e(\"./object\")).loadAsync = e(\"./load\"), n.support = e(\"./support\"), n.defaults = e(\"./defaults\"), n.version = \"3.10.1\", n.loadAsync = function(e2, t2) {\n                            return new n().loadAsync(e2, t2);\n                        }, n.external = e(\"./external\"), t.exports = n;\n                    },\n                    {\n                        \"./defaults\": 5,\n                        \"./external\": 6,\n                        \"./load\": 11,\n                        \"./object\": 15,\n                        \"./support\": 30\n                    }\n                ],\n                11: [\n                    function(e, t, r) {\n                        var u = e(\"./utils\"), i = e(\"./external\"), n = e(\"./utf8\"), s = e(\"./zipEntries\"), a = e(\"./stream/Crc32Probe\"), l = e(\"./nodejsUtils\");\n                        function f(n2) {\n                            return new i.Promise(function(e2, t2) {\n                                var r2 = n2.decompressed.getContentWorker().pipe(new a());\n                                r2.on(\"error\", function(e3) {\n                                    t2(e3);\n                                }).on(\"end\", function() {\n                                    r2.streamInfo.crc32 !== n2.decompressed.crc32 ? t2(new Error(\"Corrupted zip : CRC32 mismatch\")) : e2();\n                                }).resume();\n                            });\n                        }\n                        t.exports = function(e2, o) {\n                            var h = this;\n                            return o = u.extend(o || {}, {\n                                base64: false,\n                                checkCRC32: false,\n                                optimizedBinaryString: false,\n                                createFolders: false,\n                                decodeFileName: n.utf8decode\n                            }), l.isNode && l.isStream(e2) ? i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")) : u.prepareContent(\"the loaded zip file\", e2, true, o.optimizedBinaryString, o.base64).then(function(e3) {\n                                var t2 = new s(o);\n                                return t2.load(e3), t2;\n                            }).then(function(e3) {\n                                var t2 = [\n                                    i.Promise.resolve(e3)\n                                ], r2 = e3.files;\n                                if (o.checkCRC32) for(var n2 = 0; n2 < r2.length; n2++)t2.push(f(r2[n2]));\n                                return i.Promise.all(t2);\n                            }).then(function(e3) {\n                                for(var t2 = e3.shift(), r2 = t2.files, n2 = 0; n2 < r2.length; n2++){\n                                    var i2 = r2[n2], s2 = i2.fileNameStr, a2 = u.resolve(i2.fileNameStr);\n                                    h.file(a2, i2.decompressed, {\n                                        binary: true,\n                                        optimizedBinaryString: true,\n                                        date: i2.date,\n                                        dir: i2.dir,\n                                        comment: i2.fileCommentStr.length ? i2.fileCommentStr : null,\n                                        unixPermissions: i2.unixPermissions,\n                                        dosPermissions: i2.dosPermissions,\n                                        createFolders: o.createFolders\n                                    }), i2.dir || (h.file(a2).unsafeOriginalName = s2);\n                                }\n                                return t2.zipComment.length && (h.comment = t2.zipComment), h;\n                            });\n                        };\n                    },\n                    {\n                        \"./external\": 6,\n                        \"./nodejsUtils\": 14,\n                        \"./stream/Crc32Probe\": 25,\n                        \"./utf8\": 31,\n                        \"./utils\": 32,\n                        \"./zipEntries\": 33\n                    }\n                ],\n                12: [\n                    function(e, t, r) {\n                        var n = e(\"../utils\"), i = e(\"../stream/GenericWorker\");\n                        function s(e2, t2) {\n                            i.call(this, \"Nodejs stream input adapter for \" + e2), this._upstreamEnded = false, this._bindStream(t2);\n                        }\n                        n.inherits(s, i), s.prototype._bindStream = function(e2) {\n                            var t2 = this;\n                            (this._stream = e2).pause(), e2.on(\"data\", function(e3) {\n                                t2.push({\n                                    data: e3,\n                                    meta: {\n                                        percent: 0\n                                    }\n                                });\n                            }).on(\"error\", function(e3) {\n                                t2.isPaused ? this.generatedError = e3 : t2.error(e3);\n                            }).on(\"end\", function() {\n                                t2.isPaused ? t2._upstreamEnded = true : t2.end();\n                            });\n                        }, s.prototype.pause = function() {\n                            return !!i.prototype.pause.call(this) && (this._stream.pause(), true);\n                        }, s.prototype.resume = function() {\n                            return !!i.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);\n                        }, t.exports = s;\n                    },\n                    {\n                        \"../stream/GenericWorker\": 28,\n                        \"../utils\": 32\n                    }\n                ],\n                13: [\n                    function(e, t, r) {\n                        var i = e(\"readable-stream\").Readable;\n                        function n(e2, t2, r2) {\n                            i.call(this, t2), this._helper = e2;\n                            var n2 = this;\n                            e2.on(\"data\", function(e3, t3) {\n                                n2.push(e3) || n2._helper.pause(), r2 && r2(t3);\n                            }).on(\"error\", function(e3) {\n                                n2.emit(\"error\", e3);\n                            }).on(\"end\", function() {\n                                n2.push(null);\n                            });\n                        }\n                        e(\"../utils\").inherits(n, i), n.prototype._read = function() {\n                            this._helper.resume();\n                        }, t.exports = n;\n                    },\n                    {\n                        \"../utils\": 32,\n                        \"readable-stream\": 16\n                    }\n                ],\n                14: [\n                    function(e, t, r) {\n                        t.exports = {\n                            isNode: \"undefined\" != typeof Buffer,\n                            newBufferFrom: function(e2, t2) {\n                                if (Buffer.from && Buffer.from !== Uint8Array.from) return Buffer.from(e2, t2);\n                                if (\"number\" == typeof e2) throw new Error('The \"data\" argument must not be a number');\n                                return new Buffer(e2, t2);\n                            },\n                            allocBuffer: function(e2) {\n                                if (Buffer.alloc) return Buffer.alloc(e2);\n                                var t2 = new Buffer(e2);\n                                return t2.fill(0), t2;\n                            },\n                            isBuffer: function(e2) {\n                                return Buffer.isBuffer(e2);\n                            },\n                            isStream: function(e2) {\n                                return e2 && \"function\" == typeof e2.on && \"function\" == typeof e2.pause && \"function\" == typeof e2.resume;\n                            }\n                        };\n                    },\n                    {}\n                ],\n                15: [\n                    function(e, t, r) {\n                        function s(e2, t2, r2) {\n                            var n2, i2 = u.getTypeOf(t2), s2 = u.extend(r2 || {}, f);\n                            s2.date = s2.date || /* @__PURE__ */ new Date(), null !== s2.compression && (s2.compression = s2.compression.toUpperCase()), \"string\" == typeof s2.unixPermissions && (s2.unixPermissions = parseInt(s2.unixPermissions, 8)), s2.unixPermissions && 16384 & s2.unixPermissions && (s2.dir = true), s2.dosPermissions && 16 & s2.dosPermissions && (s2.dir = true), s2.dir && (e2 = g(e2)), s2.createFolders && (n2 = _(e2)) && b.call(this, n2, true);\n                            var a2 = \"string\" === i2 && false === s2.binary && false === s2.base64;\n                            r2 && void 0 !== r2.binary || (s2.binary = !a2), (t2 instanceof c && 0 === t2.uncompressedSize || s2.dir || !t2 || 0 === t2.length) && (s2.base64 = false, s2.binary = true, t2 = \"\", s2.compression = \"STORE\", i2 = \"string\");\n                            var o2 = null;\n                            o2 = t2 instanceof c || t2 instanceof l ? t2 : p.isNode && p.isStream(t2) ? new m(e2, t2) : u.prepareContent(e2, t2, s2.binary, s2.optimizedBinaryString, s2.base64);\n                            var h2 = new d(e2, o2, s2);\n                            this.files[e2] = h2;\n                        }\n                        var i = e(\"./utf8\"), u = e(\"./utils\"), l = e(\"./stream/GenericWorker\"), a = e(\"./stream/StreamHelper\"), f = e(\"./defaults\"), c = e(\"./compressedObject\"), d = e(\"./zipObject\"), o = e(\"./generate\"), p = e(\"./nodejsUtils\"), m = e(\"./nodejs/NodejsStreamInputAdapter\"), _ = function(e2) {\n                            \"/\" === e2.slice(-1) && (e2 = e2.substring(0, e2.length - 1));\n                            var t2 = e2.lastIndexOf(\"/\");\n                            return 0 < t2 ? e2.substring(0, t2) : \"\";\n                        }, g = function(e2) {\n                            return \"/\" !== e2.slice(-1) && (e2 += \"/\"), e2;\n                        }, b = function(e2, t2) {\n                            return t2 = void 0 !== t2 ? t2 : f.createFolders, e2 = g(e2), this.files[e2] || s.call(this, e2, null, {\n                                dir: true,\n                                createFolders: t2\n                            }), this.files[e2];\n                        };\n                        function h(e2) {\n                            return \"[object RegExp]\" === Object.prototype.toString.call(e2);\n                        }\n                        var n = {\n                            load: function() {\n                                throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n                            },\n                            forEach: function(e2) {\n                                var t2, r2, n2;\n                                for(t2 in this.files)n2 = this.files[t2], (r2 = t2.slice(this.root.length, t2.length)) && t2.slice(0, this.root.length) === this.root && e2(r2, n2);\n                            },\n                            filter: function(r2) {\n                                var n2 = [];\n                                return this.forEach(function(e2, t2) {\n                                    r2(e2, t2) && n2.push(t2);\n                                }), n2;\n                            },\n                            file: function(e2, t2, r2) {\n                                if (1 !== arguments.length) return e2 = this.root + e2, s.call(this, e2, t2, r2), this;\n                                if (h(e2)) {\n                                    var n2 = e2;\n                                    return this.filter(function(e3, t3) {\n                                        return !t3.dir && n2.test(e3);\n                                    });\n                                }\n                                var i2 = this.files[this.root + e2];\n                                return i2 && !i2.dir ? i2 : null;\n                            },\n                            folder: function(r2) {\n                                if (!r2) return this;\n                                if (h(r2)) return this.filter(function(e3, t3) {\n                                    return t3.dir && r2.test(e3);\n                                });\n                                var e2 = this.root + r2, t2 = b.call(this, e2), n2 = this.clone();\n                                return n2.root = t2.name, n2;\n                            },\n                            remove: function(r2) {\n                                r2 = this.root + r2;\n                                var e2 = this.files[r2];\n                                if (e2 || (\"/\" !== r2.slice(-1) && (r2 += \"/\"), e2 = this.files[r2]), e2 && !e2.dir) delete this.files[r2];\n                                else for(var t2 = this.filter(function(e3, t3) {\n                                    return t3.name.slice(0, r2.length) === r2;\n                                }), n2 = 0; n2 < t2.length; n2++)delete this.files[t2[n2].name];\n                                return this;\n                            },\n                            generate: function() {\n                                throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n                            },\n                            generateInternalStream: function(e2) {\n                                var t2, r2 = {};\n                                try {\n                                    if ((r2 = u.extend(e2 || {}, {\n                                        streamFiles: false,\n                                        compression: \"STORE\",\n                                        compressionOptions: null,\n                                        type: \"\",\n                                        platform: \"DOS\",\n                                        comment: null,\n                                        mimeType: \"application/zip\",\n                                        encodeFileName: i.utf8encode\n                                    })).type = r2.type.toLowerCase(), r2.compression = r2.compression.toUpperCase(), \"binarystring\" === r2.type && (r2.type = \"string\"), !r2.type) throw new Error(\"No output type specified.\");\n                                    u.checkSupport(r2.type), \"darwin\" !== r2.platform && \"freebsd\" !== r2.platform && \"linux\" !== r2.platform && \"sunos\" !== r2.platform || (r2.platform = \"UNIX\"), \"win32\" === r2.platform && (r2.platform = \"DOS\");\n                                    var n2 = r2.comment || this.comment || \"\";\n                                    t2 = o.generateWorker(this, r2, n2);\n                                } catch (e3) {\n                                    (t2 = new l(\"error\")).error(e3);\n                                }\n                                return new a(t2, r2.type || \"string\", r2.mimeType);\n                            },\n                            generateAsync: function(e2, t2) {\n                                return this.generateInternalStream(e2).accumulate(t2);\n                            },\n                            generateNodeStream: function(e2, t2) {\n                                return (e2 = e2 || {}).type || (e2.type = \"nodebuffer\"), this.generateInternalStream(e2).toNodejsStream(t2);\n                            }\n                        };\n                        t.exports = n;\n                    },\n                    {\n                        \"./compressedObject\": 2,\n                        \"./defaults\": 5,\n                        \"./generate\": 9,\n                        \"./nodejs/NodejsStreamInputAdapter\": 12,\n                        \"./nodejsUtils\": 14,\n                        \"./stream/GenericWorker\": 28,\n                        \"./stream/StreamHelper\": 29,\n                        \"./utf8\": 31,\n                        \"./utils\": 32,\n                        \"./zipObject\": 35\n                    }\n                ],\n                16: [\n                    function(e, t, r) {\n                        t.exports = e(\"stream\");\n                    },\n                    {\n                        stream: void 0\n                    }\n                ],\n                17: [\n                    function(e, t, r) {\n                        var n = e(\"./DataReader\");\n                        function i(e2) {\n                            n.call(this, e2);\n                            for(var t2 = 0; t2 < this.data.length; t2++)e2[t2] = 255 & e2[t2];\n                        }\n                        e(\"../utils\").inherits(i, n), i.prototype.byteAt = function(e2) {\n                            return this.data[this.zero + e2];\n                        }, i.prototype.lastIndexOfSignature = function(e2) {\n                            for(var t2 = e2.charCodeAt(0), r2 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s = this.length - 4; 0 <= s; --s)if (this.data[s] === t2 && this.data[s + 1] === r2 && this.data[s + 2] === n2 && this.data[s + 3] === i2) return s - this.zero;\n                            return -1;\n                        }, i.prototype.readAndCheckSignature = function(e2) {\n                            var t2 = e2.charCodeAt(0), r2 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s = this.readData(4);\n                            return t2 === s[0] && r2 === s[1] && n2 === s[2] && i2 === s[3];\n                        }, i.prototype.readData = function(e2) {\n                            if (this.checkOffset(e2), 0 === e2) return [];\n                            var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n                            return this.index += e2, t2;\n                        }, t.exports = i;\n                    },\n                    {\n                        \"../utils\": 32,\n                        \"./DataReader\": 18\n                    }\n                ],\n                18: [\n                    function(e, t, r) {\n                        var n = e(\"../utils\");\n                        function i(e2) {\n                            this.data = e2, this.length = e2.length, this.index = 0, this.zero = 0;\n                        }\n                        i.prototype = {\n                            checkOffset: function(e2) {\n                                this.checkIndex(this.index + e2);\n                            },\n                            checkIndex: function(e2) {\n                                if (this.length < this.zero + e2 || e2 < 0) throw new Error(\"End of data reached (data length = \" + this.length + \", asked index = \" + e2 + \"). Corrupted zip ?\");\n                            },\n                            setIndex: function(e2) {\n                                this.checkIndex(e2), this.index = e2;\n                            },\n                            skip: function(e2) {\n                                this.setIndex(this.index + e2);\n                            },\n                            byteAt: function() {},\n                            readInt: function(e2) {\n                                var t2, r2 = 0;\n                                for(this.checkOffset(e2), t2 = this.index + e2 - 1; t2 >= this.index; t2--)r2 = (r2 << 8) + this.byteAt(t2);\n                                return this.index += e2, r2;\n                            },\n                            readString: function(e2) {\n                                return n.transformTo(\"string\", this.readData(e2));\n                            },\n                            readData: function() {},\n                            lastIndexOfSignature: function() {},\n                            readAndCheckSignature: function() {},\n                            readDate: function() {\n                                var e2 = this.readInt(4);\n                                return new Date(Date.UTC(1980 + (e2 >> 25 & 127), (e2 >> 21 & 15) - 1, e2 >> 16 & 31, e2 >> 11 & 31, e2 >> 5 & 63, (31 & e2) << 1));\n                            }\n                        }, t.exports = i;\n                    },\n                    {\n                        \"../utils\": 32\n                    }\n                ],\n                19: [\n                    function(e, t, r) {\n                        var n = e(\"./Uint8ArrayReader\");\n                        function i(e2) {\n                            n.call(this, e2);\n                        }\n                        e(\"../utils\").inherits(i, n), i.prototype.readData = function(e2) {\n                            this.checkOffset(e2);\n                            var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n                            return this.index += e2, t2;\n                        }, t.exports = i;\n                    },\n                    {\n                        \"../utils\": 32,\n                        \"./Uint8ArrayReader\": 21\n                    }\n                ],\n                20: [\n                    function(e, t, r) {\n                        var n = e(\"./DataReader\");\n                        function i(e2) {\n                            n.call(this, e2);\n                        }\n                        e(\"../utils\").inherits(i, n), i.prototype.byteAt = function(e2) {\n                            return this.data.charCodeAt(this.zero + e2);\n                        }, i.prototype.lastIndexOfSignature = function(e2) {\n                            return this.data.lastIndexOf(e2) - this.zero;\n                        }, i.prototype.readAndCheckSignature = function(e2) {\n                            return e2 === this.readData(4);\n                        }, i.prototype.readData = function(e2) {\n                            this.checkOffset(e2);\n                            var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);\n                            return this.index += e2, t2;\n                        }, t.exports = i;\n                    },\n                    {\n                        \"../utils\": 32,\n                        \"./DataReader\": 18\n                    }\n                ],\n                21: [\n                    function(e, t, r) {\n                        var n = e(\"./ArrayReader\");\n                        function i(e2) {\n                            n.call(this, e2);\n                        }\n                        e(\"../utils\").inherits(i, n), i.prototype.readData = function(e2) {\n                            if (this.checkOffset(e2), 0 === e2) return new Uint8Array(0);\n                            var t2 = this.data.subarray(this.zero + this.index, this.zero + this.index + e2);\n                            return this.index += e2, t2;\n                        }, t.exports = i;\n                    },\n                    {\n                        \"../utils\": 32,\n                        \"./ArrayReader\": 17\n                    }\n                ],\n                22: [\n                    function(e, t, r) {\n                        var n = e(\"../utils\"), i = e(\"../support\"), s = e(\"./ArrayReader\"), a = e(\"./StringReader\"), o = e(\"./NodeBufferReader\"), h = e(\"./Uint8ArrayReader\");\n                        t.exports = function(e2) {\n                            var t2 = n.getTypeOf(e2);\n                            return n.checkSupport(t2), \"string\" !== t2 || i.uint8array ? \"nodebuffer\" === t2 ? new o(e2) : i.uint8array ? new h(n.transformTo(\"uint8array\", e2)) : new s(n.transformTo(\"array\", e2)) : new a(e2);\n                        };\n                    },\n                    {\n                        \"../support\": 30,\n                        \"../utils\": 32,\n                        \"./ArrayReader\": 17,\n                        \"./NodeBufferReader\": 19,\n                        \"./StringReader\": 20,\n                        \"./Uint8ArrayReader\": 21\n                    }\n                ],\n                23: [\n                    function(e, t, r) {\n                        r.LOCAL_FILE_HEADER = \"PK\\x03\\x04\", r.CENTRAL_FILE_HEADER = \"PK\\x01\\x02\", r.CENTRAL_DIRECTORY_END = \"PK\\x05\\x06\", r.ZIP64_CENTRAL_DIRECTORY_LOCATOR = \"PK\\x06\\x07\", r.ZIP64_CENTRAL_DIRECTORY_END = \"PK\\x06\\x06\", r.DATA_DESCRIPTOR = \"PK\\x07\\b\";\n                    },\n                    {}\n                ],\n                24: [\n                    function(e, t, r) {\n                        var n = e(\"./GenericWorker\"), i = e(\"../utils\");\n                        function s(e2) {\n                            n.call(this, \"ConvertWorker to \" + e2), this.destType = e2;\n                        }\n                        i.inherits(s, n), s.prototype.processChunk = function(e2) {\n                            this.push({\n                                data: i.transformTo(this.destType, e2.data),\n                                meta: e2.meta\n                            });\n                        }, t.exports = s;\n                    },\n                    {\n                        \"../utils\": 32,\n                        \"./GenericWorker\": 28\n                    }\n                ],\n                25: [\n                    function(e, t, r) {\n                        var n = e(\"./GenericWorker\"), i = e(\"../crc32\");\n                        function s() {\n                            n.call(this, \"Crc32Probe\"), this.withStreamInfo(\"crc32\", 0);\n                        }\n                        e(\"../utils\").inherits(s, n), s.prototype.processChunk = function(e2) {\n                            this.streamInfo.crc32 = i(e2.data, this.streamInfo.crc32 || 0), this.push(e2);\n                        }, t.exports = s;\n                    },\n                    {\n                        \"../crc32\": 4,\n                        \"../utils\": 32,\n                        \"./GenericWorker\": 28\n                    }\n                ],\n                26: [\n                    function(e, t, r) {\n                        var n = e(\"../utils\"), i = e(\"./GenericWorker\");\n                        function s(e2) {\n                            i.call(this, \"DataLengthProbe for \" + e2), this.propName = e2, this.withStreamInfo(e2, 0);\n                        }\n                        n.inherits(s, i), s.prototype.processChunk = function(e2) {\n                            if (e2) {\n                                var t2 = this.streamInfo[this.propName] || 0;\n                                this.streamInfo[this.propName] = t2 + e2.data.length;\n                            }\n                            i.prototype.processChunk.call(this, e2);\n                        }, t.exports = s;\n                    },\n                    {\n                        \"../utils\": 32,\n                        \"./GenericWorker\": 28\n                    }\n                ],\n                27: [\n                    function(e, t, r) {\n                        var n = e(\"../utils\"), i = e(\"./GenericWorker\");\n                        function s(e2) {\n                            i.call(this, \"DataWorker\");\n                            var t2 = this;\n                            this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = \"\", this._tickScheduled = false, e2.then(function(e3) {\n                                t2.dataIsReady = true, t2.data = e3, t2.max = e3 && e3.length || 0, t2.type = n.getTypeOf(e3), t2.isPaused || t2._tickAndRepeat();\n                            }, function(e3) {\n                                t2.error(e3);\n                            });\n                        }\n                        n.inherits(s, i), s.prototype.cleanUp = function() {\n                            i.prototype.cleanUp.call(this), this.data = null;\n                        }, s.prototype.resume = function() {\n                            return !!i.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, n.delay(this._tickAndRepeat, [], this)), true);\n                        }, s.prototype._tickAndRepeat = function() {\n                            this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));\n                        }, s.prototype._tick = function() {\n                            if (this.isPaused || this.isFinished) return false;\n                            var e2 = null, t2 = Math.min(this.max, this.index + 16384);\n                            if (this.index >= this.max) return this.end();\n                            switch(this.type){\n                                case \"string\":\n                                    e2 = this.data.substring(this.index, t2);\n                                    break;\n                                case \"uint8array\":\n                                    e2 = this.data.subarray(this.index, t2);\n                                    break;\n                                case \"array\":\n                                case \"nodebuffer\":\n                                    e2 = this.data.slice(this.index, t2);\n                            }\n                            return this.index = t2, this.push({\n                                data: e2,\n                                meta: {\n                                    percent: this.max ? this.index / this.max * 100 : 0\n                                }\n                            });\n                        }, t.exports = s;\n                    },\n                    {\n                        \"../utils\": 32,\n                        \"./GenericWorker\": 28\n                    }\n                ],\n                28: [\n                    function(e, t, r) {\n                        function n(e2) {\n                            this.name = e2 || \"default\", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = {\n                                data: [],\n                                end: [],\n                                error: []\n                            }, this.previous = null;\n                        }\n                        n.prototype = {\n                            push: function(e2) {\n                                this.emit(\"data\", e2);\n                            },\n                            end: function() {\n                                if (this.isFinished) return false;\n                                this.flush();\n                                try {\n                                    this.emit(\"end\"), this.cleanUp(), this.isFinished = true;\n                                } catch (e2) {\n                                    this.emit(\"error\", e2);\n                                }\n                                return true;\n                            },\n                            error: function(e2) {\n                                return !this.isFinished && (this.isPaused ? this.generatedError = e2 : (this.isFinished = true, this.emit(\"error\", e2), this.previous && this.previous.error(e2), this.cleanUp()), true);\n                            },\n                            on: function(e2, t2) {\n                                return this._listeners[e2].push(t2), this;\n                            },\n                            cleanUp: function() {\n                                this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];\n                            },\n                            emit: function(e2, t2) {\n                                if (this._listeners[e2]) for(var r2 = 0; r2 < this._listeners[e2].length; r2++)this._listeners[e2][r2].call(this, t2);\n                            },\n                            pipe: function(e2) {\n                                return e2.registerPrevious(this);\n                            },\n                            registerPrevious: function(e2) {\n                                if (this.isLocked) throw new Error(\"The stream '\" + this + \"' has already been used.\");\n                                this.streamInfo = e2.streamInfo, this.mergeStreamInfo(), this.previous = e2;\n                                var t2 = this;\n                                return e2.on(\"data\", function(e3) {\n                                    t2.processChunk(e3);\n                                }), e2.on(\"end\", function() {\n                                    t2.end();\n                                }), e2.on(\"error\", function(e3) {\n                                    t2.error(e3);\n                                }), this;\n                            },\n                            pause: function() {\n                                return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);\n                            },\n                            resume: function() {\n                                if (!this.isPaused || this.isFinished) return false;\n                                var e2 = this.isPaused = false;\n                                return this.generatedError && (this.error(this.generatedError), e2 = true), this.previous && this.previous.resume(), !e2;\n                            },\n                            flush: function() {},\n                            processChunk: function(e2) {\n                                this.push(e2);\n                            },\n                            withStreamInfo: function(e2, t2) {\n                                return this.extraStreamInfo[e2] = t2, this.mergeStreamInfo(), this;\n                            },\n                            mergeStreamInfo: function() {\n                                for(var e2 in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e2) && (this.streamInfo[e2] = this.extraStreamInfo[e2]);\n                            },\n                            lock: function() {\n                                if (this.isLocked) throw new Error(\"The stream '\" + this + \"' has already been used.\");\n                                this.isLocked = true, this.previous && this.previous.lock();\n                            },\n                            toString: function() {\n                                var e2 = \"Worker \" + this.name;\n                                return this.previous ? this.previous + \" -> \" + e2 : e2;\n                            }\n                        }, t.exports = n;\n                    },\n                    {}\n                ],\n                29: [\n                    function(e, t, r) {\n                        var h = e(\"../utils\"), i = e(\"./ConvertWorker\"), s = e(\"./GenericWorker\"), u = e(\"../base64\"), n = e(\"../support\"), a = e(\"../external\"), o = null;\n                        if (n.nodestream) try {\n                            o = e(\"../nodejs/NodejsStreamOutputAdapter\");\n                        } catch (e2) {}\n                        function l(e2, o2) {\n                            return new a.Promise(function(t2, r2) {\n                                var n2 = [], i2 = e2._internalType, s2 = e2._outputType, a2 = e2._mimeType;\n                                e2.on(\"data\", function(e3, t3) {\n                                    n2.push(e3), o2 && o2(t3);\n                                }).on(\"error\", function(e3) {\n                                    n2 = [], r2(e3);\n                                }).on(\"end\", function() {\n                                    try {\n                                        var e3 = function(e4, t3, r3) {\n                                            switch(e4){\n                                                case \"blob\":\n                                                    return h.newBlob(h.transformTo(\"arraybuffer\", t3), r3);\n                                                case \"base64\":\n                                                    return u.encode(t3);\n                                                default:\n                                                    return h.transformTo(e4, t3);\n                                            }\n                                        }(s2, function(e4, t3) {\n                                            var r3, n3 = 0, i3 = null, s3 = 0;\n                                            for(r3 = 0; r3 < t3.length; r3++)s3 += t3[r3].length;\n                                            switch(e4){\n                                                case \"string\":\n                                                    return t3.join(\"\");\n                                                case \"array\":\n                                                    return Array.prototype.concat.apply([], t3);\n                                                case \"uint8array\":\n                                                    for(i3 = new Uint8Array(s3), r3 = 0; r3 < t3.length; r3++)i3.set(t3[r3], n3), n3 += t3[r3].length;\n                                                    return i3;\n                                                case \"nodebuffer\":\n                                                    return Buffer.concat(t3);\n                                                default:\n                                                    throw new Error(\"concat : unsupported type '\" + e4 + \"'\");\n                                            }\n                                        }(i2, n2), a2);\n                                        t2(e3);\n                                    } catch (e4) {\n                                        r2(e4);\n                                    }\n                                    n2 = [];\n                                }).resume();\n                            });\n                        }\n                        function f(e2, t2, r2) {\n                            var n2 = t2;\n                            switch(t2){\n                                case \"blob\":\n                                case \"arraybuffer\":\n                                    n2 = \"uint8array\";\n                                    break;\n                                case \"base64\":\n                                    n2 = \"string\";\n                            }\n                            try {\n                                this._internalType = n2, this._outputType = t2, this._mimeType = r2, h.checkSupport(n2), this._worker = e2.pipe(new i(n2)), e2.lock();\n                            } catch (e3) {\n                                this._worker = new s(\"error\"), this._worker.error(e3);\n                            }\n                        }\n                        f.prototype = {\n                            accumulate: function(e2) {\n                                return l(this, e2);\n                            },\n                            on: function(e2, t2) {\n                                var r2 = this;\n                                return \"data\" === e2 ? this._worker.on(e2, function(e3) {\n                                    t2.call(r2, e3.data, e3.meta);\n                                }) : this._worker.on(e2, function() {\n                                    h.delay(t2, arguments, r2);\n                                }), this;\n                            },\n                            resume: function() {\n                                return h.delay(this._worker.resume, [], this._worker), this;\n                            },\n                            pause: function() {\n                                return this._worker.pause(), this;\n                            },\n                            toNodejsStream: function(e2) {\n                                if (h.checkSupport(\"nodestream\"), \"nodebuffer\" !== this._outputType) throw new Error(this._outputType + \" is not supported by this method\");\n                                return new o(this, {\n                                    objectMode: \"nodebuffer\" !== this._outputType\n                                }, e2);\n                            }\n                        }, t.exports = f;\n                    },\n                    {\n                        \"../base64\": 1,\n                        \"../external\": 6,\n                        \"../nodejs/NodejsStreamOutputAdapter\": 13,\n                        \"../support\": 30,\n                        \"../utils\": 32,\n                        \"./ConvertWorker\": 24,\n                        \"./GenericWorker\": 28\n                    }\n                ],\n                30: [\n                    function(e, t, r) {\n                        if (r.base64 = true, r.array = true, r.string = true, r.arraybuffer = \"undefined\" != typeof ArrayBuffer && \"undefined\" != typeof Uint8Array, r.nodebuffer = \"undefined\" != typeof Buffer, r.uint8array = \"undefined\" != typeof Uint8Array, \"undefined\" == typeof ArrayBuffer) r.blob = false;\n                        else {\n                            var n = new ArrayBuffer(0);\n                            try {\n                                r.blob = 0 === new Blob([\n                                    n\n                                ], {\n                                    type: \"application/zip\"\n                                }).size;\n                            } catch (e2) {\n                                try {\n                                    var i = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();\n                                    i.append(n), r.blob = 0 === i.getBlob(\"application/zip\").size;\n                                } catch (e3) {\n                                    r.blob = false;\n                                }\n                            }\n                        }\n                        try {\n                            r.nodestream = !!e(\"readable-stream\").Readable;\n                        } catch (e2) {\n                            r.nodestream = false;\n                        }\n                    },\n                    {\n                        \"readable-stream\": 16\n                    }\n                ],\n                31: [\n                    function(e, t, s) {\n                        for(var o = e(\"./utils\"), h = e(\"./support\"), r = e(\"./nodejsUtils\"), n = e(\"./stream/GenericWorker\"), u = new Array(256), i = 0; i < 256; i++)u[i] = 252 <= i ? 6 : 248 <= i ? 5 : 240 <= i ? 4 : 224 <= i ? 3 : 192 <= i ? 2 : 1;\n                        u[254] = u[254] = 1;\n                        function a() {\n                            n.call(this, \"utf-8 decode\"), this.leftOver = null;\n                        }\n                        function l() {\n                            n.call(this, \"utf-8 encode\");\n                        }\n                        s.utf8encode = function(e2) {\n                            return h.nodebuffer ? r.newBufferFrom(e2, \"utf-8\") : function(e3) {\n                                var t2, r2, n2, i2, s2, a2 = e3.length, o2 = 0;\n                                for(i2 = 0; i2 < a2; i2++)55296 == (64512 & (r2 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), o2 += r2 < 128 ? 1 : r2 < 2048 ? 2 : r2 < 65536 ? 3 : 4;\n                                for(t2 = h.uint8array ? new Uint8Array(o2) : new Array(o2), i2 = s2 = 0; s2 < o2; i2++)55296 == (64512 & (r2 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), r2 < 128 ? t2[s2++] = r2 : (r2 < 2048 ? t2[s2++] = 192 | r2 >>> 6 : (r2 < 65536 ? t2[s2++] = 224 | r2 >>> 12 : (t2[s2++] = 240 | r2 >>> 18, t2[s2++] = 128 | r2 >>> 12 & 63), t2[s2++] = 128 | r2 >>> 6 & 63), t2[s2++] = 128 | 63 & r2);\n                                return t2;\n                            }(e2);\n                        }, s.utf8decode = function(e2) {\n                            return h.nodebuffer ? o.transformTo(\"nodebuffer\", e2).toString(\"utf-8\") : function(e3) {\n                                var t2, r2, n2, i2, s2 = e3.length, a2 = new Array(2 * s2);\n                                for(t2 = r2 = 0; t2 < s2;)if ((n2 = e3[t2++]) < 128) a2[r2++] = n2;\n                                else if (4 < (i2 = u[n2])) a2[r2++] = 65533, t2 += i2 - 1;\n                                else {\n                                    for(n2 &= 2 === i2 ? 31 : 3 === i2 ? 15 : 7; 1 < i2 && t2 < s2;)n2 = n2 << 6 | 63 & e3[t2++], i2--;\n                                    1 < i2 ? a2[r2++] = 65533 : n2 < 65536 ? a2[r2++] = n2 : (n2 -= 65536, a2[r2++] = 55296 | n2 >> 10 & 1023, a2[r2++] = 56320 | 1023 & n2);\n                                }\n                                return a2.length !== r2 && (a2.subarray ? a2 = a2.subarray(0, r2) : a2.length = r2), o.applyFromCharCode(a2);\n                            }(e2 = o.transformTo(h.uint8array ? \"uint8array\" : \"array\", e2));\n                        }, o.inherits(a, n), a.prototype.processChunk = function(e2) {\n                            var t2 = o.transformTo(h.uint8array ? \"uint8array\" : \"array\", e2.data);\n                            if (this.leftOver && this.leftOver.length) {\n                                if (h.uint8array) {\n                                    var r2 = t2;\n                                    (t2 = new Uint8Array(r2.length + this.leftOver.length)).set(this.leftOver, 0), t2.set(r2, this.leftOver.length);\n                                } else t2 = this.leftOver.concat(t2);\n                                this.leftOver = null;\n                            }\n                            var n2 = function(e3, t3) {\n                                var r3;\n                                for((t3 = t3 || e3.length) > e3.length && (t3 = e3.length), r3 = t3 - 1; 0 <= r3 && 128 == (192 & e3[r3]);)r3--;\n                                return r3 < 0 ? t3 : 0 === r3 ? t3 : r3 + u[e3[r3]] > t3 ? r3 : t3;\n                            }(t2), i2 = t2;\n                            n2 !== t2.length && (h.uint8array ? (i2 = t2.subarray(0, n2), this.leftOver = t2.subarray(n2, t2.length)) : (i2 = t2.slice(0, n2), this.leftOver = t2.slice(n2, t2.length))), this.push({\n                                data: s.utf8decode(i2),\n                                meta: e2.meta\n                            });\n                        }, a.prototype.flush = function() {\n                            this.leftOver && this.leftOver.length && (this.push({\n                                data: s.utf8decode(this.leftOver),\n                                meta: {}\n                            }), this.leftOver = null);\n                        }, s.Utf8DecodeWorker = a, o.inherits(l, n), l.prototype.processChunk = function(e2) {\n                            this.push({\n                                data: s.utf8encode(e2.data),\n                                meta: e2.meta\n                            });\n                        }, s.Utf8EncodeWorker = l;\n                    },\n                    {\n                        \"./nodejsUtils\": 14,\n                        \"./stream/GenericWorker\": 28,\n                        \"./support\": 30,\n                        \"./utils\": 32\n                    }\n                ],\n                32: [\n                    function(e, t, a) {\n                        var o = e(\"./support\"), h = e(\"./base64\"), r = e(\"./nodejsUtils\"), u = e(\"./external\");\n                        function n(e2) {\n                            return e2;\n                        }\n                        function l(e2, t2) {\n                            for(var r2 = 0; r2 < e2.length; ++r2)t2[r2] = 255 & e2.charCodeAt(r2);\n                            return t2;\n                        }\n                        e(\"setimmediate\"), a.newBlob = function(t2, r2) {\n                            a.checkSupport(\"blob\");\n                            try {\n                                return new Blob([\n                                    t2\n                                ], {\n                                    type: r2\n                                });\n                            } catch (e2) {\n                                try {\n                                    var n2 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();\n                                    return n2.append(t2), n2.getBlob(r2);\n                                } catch (e3) {\n                                    throw new Error(\"Bug : can't construct the Blob.\");\n                                }\n                            }\n                        };\n                        var i = {\n                            stringifyByChunk: function(e2, t2, r2) {\n                                var n2 = [], i2 = 0, s2 = e2.length;\n                                if (s2 <= r2) return String.fromCharCode.apply(null, e2);\n                                for(; i2 < s2;)\"array\" === t2 || \"nodebuffer\" === t2 ? n2.push(String.fromCharCode.apply(null, e2.slice(i2, Math.min(i2 + r2, s2)))) : n2.push(String.fromCharCode.apply(null, e2.subarray(i2, Math.min(i2 + r2, s2)))), i2 += r2;\n                                return n2.join(\"\");\n                            },\n                            stringifyByChar: function(e2) {\n                                for(var t2 = \"\", r2 = 0; r2 < e2.length; r2++)t2 += String.fromCharCode(e2[r2]);\n                                return t2;\n                            },\n                            applyCanBeUsed: {\n                                uint8array: function() {\n                                    try {\n                                        return o.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;\n                                    } catch (e2) {\n                                        return false;\n                                    }\n                                }(),\n                                nodebuffer: function() {\n                                    try {\n                                        return o.nodebuffer && 1 === String.fromCharCode.apply(null, r.allocBuffer(1)).length;\n                                    } catch (e2) {\n                                        return false;\n                                    }\n                                }()\n                            }\n                        };\n                        function s(e2) {\n                            var t2 = 65536, r2 = a.getTypeOf(e2), n2 = true;\n                            if (\"uint8array\" === r2 ? n2 = i.applyCanBeUsed.uint8array : \"nodebuffer\" === r2 && (n2 = i.applyCanBeUsed.nodebuffer), n2) for(; 1 < t2;)try {\n                                return i.stringifyByChunk(e2, r2, t2);\n                            } catch (e3) {\n                                t2 = Math.floor(t2 / 2);\n                            }\n                            return i.stringifyByChar(e2);\n                        }\n                        function f(e2, t2) {\n                            for(var r2 = 0; r2 < e2.length; r2++)t2[r2] = e2[r2];\n                            return t2;\n                        }\n                        a.applyFromCharCode = s;\n                        var c = {};\n                        c.string = {\n                            string: n,\n                            array: function(e2) {\n                                return l(e2, new Array(e2.length));\n                            },\n                            arraybuffer: function(e2) {\n                                return c.string.uint8array(e2).buffer;\n                            },\n                            uint8array: function(e2) {\n                                return l(e2, new Uint8Array(e2.length));\n                            },\n                            nodebuffer: function(e2) {\n                                return l(e2, r.allocBuffer(e2.length));\n                            }\n                        }, c.array = {\n                            string: s,\n                            array: n,\n                            arraybuffer: function(e2) {\n                                return new Uint8Array(e2).buffer;\n                            },\n                            uint8array: function(e2) {\n                                return new Uint8Array(e2);\n                            },\n                            nodebuffer: function(e2) {\n                                return r.newBufferFrom(e2);\n                            }\n                        }, c.arraybuffer = {\n                            string: function(e2) {\n                                return s(new Uint8Array(e2));\n                            },\n                            array: function(e2) {\n                                return f(new Uint8Array(e2), new Array(e2.byteLength));\n                            },\n                            arraybuffer: n,\n                            uint8array: function(e2) {\n                                return new Uint8Array(e2);\n                            },\n                            nodebuffer: function(e2) {\n                                return r.newBufferFrom(new Uint8Array(e2));\n                            }\n                        }, c.uint8array = {\n                            string: s,\n                            array: function(e2) {\n                                return f(e2, new Array(e2.length));\n                            },\n                            arraybuffer: function(e2) {\n                                return e2.buffer;\n                            },\n                            uint8array: n,\n                            nodebuffer: function(e2) {\n                                return r.newBufferFrom(e2);\n                            }\n                        }, c.nodebuffer = {\n                            string: s,\n                            array: function(e2) {\n                                return f(e2, new Array(e2.length));\n                            },\n                            arraybuffer: function(e2) {\n                                return c.nodebuffer.uint8array(e2).buffer;\n                            },\n                            uint8array: function(e2) {\n                                return f(e2, new Uint8Array(e2.length));\n                            },\n                            nodebuffer: n\n                        }, a.transformTo = function(e2, t2) {\n                            if (t2 = t2 || \"\", !e2) return t2;\n                            a.checkSupport(e2);\n                            var r2 = a.getTypeOf(t2);\n                            return c[r2][e2](t2);\n                        }, a.resolve = function(e2) {\n                            for(var t2 = e2.split(\"/\"), r2 = [], n2 = 0; n2 < t2.length; n2++){\n                                var i2 = t2[n2];\n                                \".\" === i2 || \"\" === i2 && 0 !== n2 && n2 !== t2.length - 1 || (\"..\" === i2 ? r2.pop() : r2.push(i2));\n                            }\n                            return r2.join(\"/\");\n                        }, a.getTypeOf = function(e2) {\n                            return \"string\" == typeof e2 ? \"string\" : \"[object Array]\" === Object.prototype.toString.call(e2) ? \"array\" : o.nodebuffer && r.isBuffer(e2) ? \"nodebuffer\" : o.uint8array && e2 instanceof Uint8Array ? \"uint8array\" : o.arraybuffer && e2 instanceof ArrayBuffer ? \"arraybuffer\" : void 0;\n                        }, a.checkSupport = function(e2) {\n                            if (!o[e2.toLowerCase()]) throw new Error(e2 + \" is not supported by this platform\");\n                        }, a.MAX_VALUE_16BITS = 65535, a.MAX_VALUE_32BITS = -1, a.pretty = function(e2) {\n                            var t2, r2, n2 = \"\";\n                            for(r2 = 0; r2 < (e2 || \"\").length; r2++)n2 += \"\\\\x\" + ((t2 = e2.charCodeAt(r2)) < 16 ? \"0\" : \"\") + t2.toString(16).toUpperCase();\n                            return n2;\n                        }, a.delay = function(e2, t2, r2) {\n                            setImmediate(function() {\n                                e2.apply(r2 || null, t2 || []);\n                            });\n                        }, a.inherits = function(e2, t2) {\n                            function r2() {}\n                            r2.prototype = t2.prototype, e2.prototype = new r2();\n                        }, a.extend = function() {\n                            var e2, t2, r2 = {};\n                            for(e2 = 0; e2 < arguments.length; e2++)for(t2 in arguments[e2])Object.prototype.hasOwnProperty.call(arguments[e2], t2) && void 0 === r2[t2] && (r2[t2] = arguments[e2][t2]);\n                            return r2;\n                        }, a.prepareContent = function(r2, e2, n2, i2, s2) {\n                            return u.Promise.resolve(e2).then(function(n3) {\n                                return o.blob && (n3 instanceof Blob || -1 !== [\n                                    \"[object File]\",\n                                    \"[object Blob]\"\n                                ].indexOf(Object.prototype.toString.call(n3))) && \"undefined\" != typeof FileReader ? new u.Promise(function(t2, r3) {\n                                    var e3 = new FileReader();\n                                    e3.onload = function(e4) {\n                                        t2(e4.target.result);\n                                    }, e3.onerror = function(e4) {\n                                        r3(e4.target.error);\n                                    }, e3.readAsArrayBuffer(n3);\n                                }) : n3;\n                            }).then(function(e3) {\n                                var t2 = a.getTypeOf(e3);\n                                return t2 ? (\"arraybuffer\" === t2 ? e3 = a.transformTo(\"uint8array\", e3) : \"string\" === t2 && (s2 ? e3 = h.decode(e3) : n2 && true !== i2 && (e3 = function(e4) {\n                                    return l(e4, o.uint8array ? new Uint8Array(e4.length) : new Array(e4.length));\n                                }(e3))), e3) : u.Promise.reject(new Error(\"Can't read the data of '\" + r2 + \"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"));\n                            });\n                        };\n                    },\n                    {\n                        \"./base64\": 1,\n                        \"./external\": 6,\n                        \"./nodejsUtils\": 14,\n                        \"./support\": 30,\n                        setimmediate: 54\n                    }\n                ],\n                33: [\n                    function(e, t, r) {\n                        var n = e(\"./reader/readerFor\"), i = e(\"./utils\"), s = e(\"./signature\"), a = e(\"./zipEntry\"), o = e(\"./support\");\n                        function h(e2) {\n                            this.files = [], this.loadOptions = e2;\n                        }\n                        h.prototype = {\n                            checkSignature: function(e2) {\n                                if (!this.reader.readAndCheckSignature(e2)) {\n                                    this.reader.index -= 4;\n                                    var t2 = this.reader.readString(4);\n                                    throw new Error(\"Corrupted zip or bug: unexpected signature (\" + i.pretty(t2) + \", expected \" + i.pretty(e2) + \")\");\n                                }\n                            },\n                            isSignature: function(e2, t2) {\n                                var r2 = this.reader.index;\n                                this.reader.setIndex(e2);\n                                var n2 = this.reader.readString(4) === t2;\n                                return this.reader.setIndex(r2), n2;\n                            },\n                            readBlockEndOfCentral: function() {\n                                this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);\n                                var e2 = this.reader.readData(this.zipCommentLength), t2 = o.uint8array ? \"uint8array\" : \"array\", r2 = i.transformTo(t2, e2);\n                                this.zipComment = this.loadOptions.decodeFileName(r2);\n                            },\n                            readBlockZip64EndOfCentral: function() {\n                                this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};\n                                for(var e2, t2, r2, n2 = this.zip64EndOfCentralSize - 44; 0 < n2;)e2 = this.reader.readInt(2), t2 = this.reader.readInt(4), r2 = this.reader.readData(t2), this.zip64ExtensibleData[e2] = {\n                                    id: e2,\n                                    length: t2,\n                                    value: r2\n                                };\n                            },\n                            readBlockZip64EndOfCentralLocator: function() {\n                                if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount) throw new Error(\"Multi-volumes zip are not supported\");\n                            },\n                            readLocalFiles: function() {\n                                var e2, t2;\n                                for(e2 = 0; e2 < this.files.length; e2++)t2 = this.files[e2], this.reader.setIndex(t2.localHeaderOffset), this.checkSignature(s.LOCAL_FILE_HEADER), t2.readLocalPart(this.reader), t2.handleUTF8(), t2.processAttributes();\n                            },\n                            readCentralDir: function() {\n                                var e2;\n                                for(this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e2 = new a({\n                                    zip64: this.zip64\n                                }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e2);\n                                if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length) throw new Error(\"Corrupted zip or bug: expected \" + this.centralDirRecords + \" records in central dir, got \" + this.files.length);\n                            },\n                            readEndOfCentral: function() {\n                                var e2 = this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);\n                                if (e2 < 0) throw !this.isSignature(0, s.LOCAL_FILE_HEADER) ? new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\") : new Error(\"Corrupted zip: can't find end of central directory\");\n                                this.reader.setIndex(e2);\n                                var t2 = e2;\n                                if (this.checkSignature(s.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i.MAX_VALUE_16BITS || this.centralDirRecords === i.MAX_VALUE_16BITS || this.centralDirSize === i.MAX_VALUE_32BITS || this.centralDirOffset === i.MAX_VALUE_32BITS) {\n                                    if (this.zip64 = true, (e2 = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0) throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");\n                                    if (this.reader.setIndex(e2), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0)) throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");\n                                    this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();\n                                }\n                                var r2 = this.centralDirOffset + this.centralDirSize;\n                                this.zip64 && (r2 += 20, r2 += 12 + this.zip64EndOfCentralSize);\n                                var n2 = t2 - r2;\n                                if (0 < n2) this.isSignature(t2, s.CENTRAL_FILE_HEADER) || (this.reader.zero = n2);\n                                else if (n2 < 0) throw new Error(\"Corrupted zip: missing \" + Math.abs(n2) + \" bytes.\");\n                            },\n                            prepareReader: function(e2) {\n                                this.reader = n(e2);\n                            },\n                            load: function(e2) {\n                                this.prepareReader(e2), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();\n                            }\n                        }, t.exports = h;\n                    },\n                    {\n                        \"./reader/readerFor\": 22,\n                        \"./signature\": 23,\n                        \"./support\": 30,\n                        \"./utils\": 32,\n                        \"./zipEntry\": 34\n                    }\n                ],\n                34: [\n                    function(e, t, r) {\n                        var n = e(\"./reader/readerFor\"), s = e(\"./utils\"), i = e(\"./compressedObject\"), a = e(\"./crc32\"), o = e(\"./utf8\"), h = e(\"./compressions\"), u = e(\"./support\");\n                        function l(e2, t2) {\n                            this.options = e2, this.loadOptions = t2;\n                        }\n                        l.prototype = {\n                            isEncrypted: function() {\n                                return 1 == (1 & this.bitFlag);\n                            },\n                            useUTF8: function() {\n                                return 2048 == (2048 & this.bitFlag);\n                            },\n                            readLocalPart: function(e2) {\n                                var t2, r2;\n                                if (e2.skip(22), this.fileNameLength = e2.readInt(2), r2 = e2.readInt(2), this.fileName = e2.readData(this.fileNameLength), e2.skip(r2), -1 === this.compressedSize || -1 === this.uncompressedSize) throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");\n                                if (null === (t2 = function(e3) {\n                                    for(var t3 in h)if (Object.prototype.hasOwnProperty.call(h, t3) && h[t3].magic === e3) return h[t3];\n                                    return null;\n                                }(this.compressionMethod))) throw new Error(\"Corrupted zip : compression \" + s.pretty(this.compressionMethod) + \" unknown (inner file : \" + s.transformTo(\"string\", this.fileName) + \")\");\n                                this.decompressed = new i(this.compressedSize, this.uncompressedSize, this.crc32, t2, e2.readData(this.compressedSize));\n                            },\n                            readCentralPart: function(e2) {\n                                this.versionMadeBy = e2.readInt(2), e2.skip(2), this.bitFlag = e2.readInt(2), this.compressionMethod = e2.readString(2), this.date = e2.readDate(), this.crc32 = e2.readInt(4), this.compressedSize = e2.readInt(4), this.uncompressedSize = e2.readInt(4);\n                                var t2 = e2.readInt(2);\n                                if (this.extraFieldsLength = e2.readInt(2), this.fileCommentLength = e2.readInt(2), this.diskNumberStart = e2.readInt(2), this.internalFileAttributes = e2.readInt(2), this.externalFileAttributes = e2.readInt(4), this.localHeaderOffset = e2.readInt(4), this.isEncrypted()) throw new Error(\"Encrypted zip are not supported\");\n                                e2.skip(t2), this.readExtraFields(e2), this.parseZIP64ExtraField(e2), this.fileComment = e2.readData(this.fileCommentLength);\n                            },\n                            processAttributes: function() {\n                                this.unixPermissions = null, this.dosPermissions = null;\n                                var e2 = this.versionMadeBy >> 8;\n                                this.dir = !!(16 & this.externalFileAttributes), 0 == e2 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e2 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || \"/\" !== this.fileNameStr.slice(-1) || (this.dir = true);\n                            },\n                            parseZIP64ExtraField: function() {\n                                if (this.extraFields[1]) {\n                                    var e2 = n(this.extraFields[1].value);\n                                    this.uncompressedSize === s.MAX_VALUE_32BITS && (this.uncompressedSize = e2.readInt(8)), this.compressedSize === s.MAX_VALUE_32BITS && (this.compressedSize = e2.readInt(8)), this.localHeaderOffset === s.MAX_VALUE_32BITS && (this.localHeaderOffset = e2.readInt(8)), this.diskNumberStart === s.MAX_VALUE_32BITS && (this.diskNumberStart = e2.readInt(4));\n                                }\n                            },\n                            readExtraFields: function(e2) {\n                                var t2, r2, n2, i2 = e2.index + this.extraFieldsLength;\n                                for(this.extraFields || (this.extraFields = {}); e2.index + 4 < i2;)t2 = e2.readInt(2), r2 = e2.readInt(2), n2 = e2.readData(r2), this.extraFields[t2] = {\n                                    id: t2,\n                                    length: r2,\n                                    value: n2\n                                };\n                                e2.setIndex(i2);\n                            },\n                            handleUTF8: function() {\n                                var e2 = u.uint8array ? \"uint8array\" : \"array\";\n                                if (this.useUTF8()) this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);\n                                else {\n                                    var t2 = this.findExtraFieldUnicodePath();\n                                    if (null !== t2) this.fileNameStr = t2;\n                                    else {\n                                        var r2 = s.transformTo(e2, this.fileName);\n                                        this.fileNameStr = this.loadOptions.decodeFileName(r2);\n                                    }\n                                    var n2 = this.findExtraFieldUnicodeComment();\n                                    if (null !== n2) this.fileCommentStr = n2;\n                                    else {\n                                        var i2 = s.transformTo(e2, this.fileComment);\n                                        this.fileCommentStr = this.loadOptions.decodeFileName(i2);\n                                    }\n                                }\n                            },\n                            findExtraFieldUnicodePath: function() {\n                                var e2 = this.extraFields[28789];\n                                if (e2) {\n                                    var t2 = n(e2.value);\n                                    return 1 !== t2.readInt(1) ? null : a(this.fileName) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));\n                                }\n                                return null;\n                            },\n                            findExtraFieldUnicodeComment: function() {\n                                var e2 = this.extraFields[25461];\n                                if (e2) {\n                                    var t2 = n(e2.value);\n                                    return 1 !== t2.readInt(1) ? null : a(this.fileComment) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));\n                                }\n                                return null;\n                            }\n                        }, t.exports = l;\n                    },\n                    {\n                        \"./compressedObject\": 2,\n                        \"./compressions\": 3,\n                        \"./crc32\": 4,\n                        \"./reader/readerFor\": 22,\n                        \"./support\": 30,\n                        \"./utf8\": 31,\n                        \"./utils\": 32\n                    }\n                ],\n                35: [\n                    function(e, t, r) {\n                        function n(e2, t2, r2) {\n                            this.name = e2, this.dir = r2.dir, this.date = r2.date, this.comment = r2.comment, this.unixPermissions = r2.unixPermissions, this.dosPermissions = r2.dosPermissions, this._data = t2, this._dataBinary = r2.binary, this.options = {\n                                compression: r2.compression,\n                                compressionOptions: r2.compressionOptions\n                            };\n                        }\n                        var s = e(\"./stream/StreamHelper\"), i = e(\"./stream/DataWorker\"), a = e(\"./utf8\"), o = e(\"./compressedObject\"), h = e(\"./stream/GenericWorker\");\n                        n.prototype = {\n                            internalStream: function(e2) {\n                                var t2 = null, r2 = \"string\";\n                                try {\n                                    if (!e2) throw new Error(\"No output type specified.\");\n                                    var n2 = \"string\" === (r2 = e2.toLowerCase()) || \"text\" === r2;\n                                    \"binarystring\" !== r2 && \"text\" !== r2 || (r2 = \"string\"), t2 = this._decompressWorker();\n                                    var i2 = !this._dataBinary;\n                                    i2 && !n2 && (t2 = t2.pipe(new a.Utf8EncodeWorker())), !i2 && n2 && (t2 = t2.pipe(new a.Utf8DecodeWorker()));\n                                } catch (e3) {\n                                    (t2 = new h(\"error\")).error(e3);\n                                }\n                                return new s(t2, r2, \"\");\n                            },\n                            async: function(e2, t2) {\n                                return this.internalStream(e2).accumulate(t2);\n                            },\n                            nodeStream: function(e2, t2) {\n                                return this.internalStream(e2 || \"nodebuffer\").toNodejsStream(t2);\n                            },\n                            _compressWorker: function(e2, t2) {\n                                if (this._data instanceof o && this._data.compression.magic === e2.magic) return this._data.getCompressedWorker();\n                                var r2 = this._decompressWorker();\n                                return this._dataBinary || (r2 = r2.pipe(new a.Utf8EncodeWorker())), o.createWorkerFrom(r2, e2, t2);\n                            },\n                            _decompressWorker: function() {\n                                return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof h ? this._data : new i(this._data);\n                            }\n                        };\n                        for(var u = [\n                            \"asText\",\n                            \"asBinary\",\n                            \"asNodeBuffer\",\n                            \"asUint8Array\",\n                            \"asArrayBuffer\"\n                        ], l = function() {\n                            throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n                        }, f = 0; f < u.length; f++)n.prototype[u[f]] = l;\n                        t.exports = n;\n                    },\n                    {\n                        \"./compressedObject\": 2,\n                        \"./stream/DataWorker\": 27,\n                        \"./stream/GenericWorker\": 28,\n                        \"./stream/StreamHelper\": 29,\n                        \"./utf8\": 31\n                    }\n                ],\n                36: [\n                    function(e, l, t) {\n                        (function(t2) {\n                            var r, n, e2 = t2.MutationObserver || t2.WebKitMutationObserver;\n                            if (e2) {\n                                var i = 0, s = new e2(u), a = t2.document.createTextNode(\"\");\n                                s.observe(a, {\n                                    characterData: true\n                                }), r = function() {\n                                    a.data = i = ++i % 2;\n                                };\n                            } else if (t2.setImmediate || void 0 === t2.MessageChannel) r = \"document\" in t2 && \"onreadystatechange\" in t2.document.createElement(\"script\") ? function() {\n                                var e3 = t2.document.createElement(\"script\");\n                                e3.onreadystatechange = function() {\n                                    u(), e3.onreadystatechange = null, e3.parentNode.removeChild(e3), e3 = null;\n                                }, t2.document.documentElement.appendChild(e3);\n                            } : function() {\n                                setTimeout(u, 0);\n                            };\n                            else {\n                                var o = new t2.MessageChannel();\n                                o.port1.onmessage = u, r = function() {\n                                    o.port2.postMessage(0);\n                                };\n                            }\n                            var h = [];\n                            function u() {\n                                var e3, t3;\n                                n = true;\n                                for(var r2 = h.length; r2;){\n                                    for(t3 = h, h = [], e3 = -1; ++e3 < r2;)t3[e3]();\n                                    r2 = h.length;\n                                }\n                                n = false;\n                            }\n                            l.exports = function(e3) {\n                                1 !== h.push(e3) || n || r();\n                            };\n                        }).call(this, \"undefined\" != typeof commonjsGlobal ? commonjsGlobal : \"undefined\" != typeof self ? self :  false ? 0 : {});\n                    },\n                    {}\n                ],\n                37: [\n                    function(e, t, r) {\n                        var i = e(\"immediate\");\n                        function u() {}\n                        var l = {}, s = [\n                            \"REJECTED\"\n                        ], a = [\n                            \"FULFILLED\"\n                        ], n = [\n                            \"PENDING\"\n                        ];\n                        function o(e2) {\n                            if (\"function\" != typeof e2) throw new TypeError(\"resolver must be a function\");\n                            this.state = n, this.queue = [], this.outcome = void 0, e2 !== u && d(this, e2);\n                        }\n                        function h(e2, t2, r2) {\n                            this.promise = e2, \"function\" == typeof t2 && (this.onFulfilled = t2, this.callFulfilled = this.otherCallFulfilled), \"function\" == typeof r2 && (this.onRejected = r2, this.callRejected = this.otherCallRejected);\n                        }\n                        function f(t2, r2, n2) {\n                            i(function() {\n                                var e2;\n                                try {\n                                    e2 = r2(n2);\n                                } catch (e3) {\n                                    return l.reject(t2, e3);\n                                }\n                                e2 === t2 ? l.reject(t2, new TypeError(\"Cannot resolve promise with itself\")) : l.resolve(t2, e2);\n                            });\n                        }\n                        function c(e2) {\n                            var t2 = e2 && e2.then;\n                            if (e2 && (\"object\" == typeof e2 || \"function\" == typeof e2) && \"function\" == typeof t2) return function() {\n                                t2.apply(e2, arguments);\n                            };\n                        }\n                        function d(t2, e2) {\n                            var r2 = false;\n                            function n2(e3) {\n                                r2 || (r2 = true, l.reject(t2, e3));\n                            }\n                            function i2(e3) {\n                                r2 || (r2 = true, l.resolve(t2, e3));\n                            }\n                            var s2 = p(function() {\n                                e2(i2, n2);\n                            });\n                            \"error\" === s2.status && n2(s2.value);\n                        }\n                        function p(e2, t2) {\n                            var r2 = {};\n                            try {\n                                r2.value = e2(t2), r2.status = \"success\";\n                            } catch (e3) {\n                                r2.status = \"error\", r2.value = e3;\n                            }\n                            return r2;\n                        }\n                        (t.exports = o).prototype.finally = function(t2) {\n                            if (\"function\" != typeof t2) return this;\n                            var r2 = this.constructor;\n                            return this.then(function(e2) {\n                                return r2.resolve(t2()).then(function() {\n                                    return e2;\n                                });\n                            }, function(e2) {\n                                return r2.resolve(t2()).then(function() {\n                                    throw e2;\n                                });\n                            });\n                        }, o.prototype.catch = function(e2) {\n                            return this.then(null, e2);\n                        }, o.prototype.then = function(e2, t2) {\n                            if (\"function\" != typeof e2 && this.state === a || \"function\" != typeof t2 && this.state === s) return this;\n                            var r2 = new this.constructor(u);\n                            this.state !== n ? f(r2, this.state === a ? e2 : t2, this.outcome) : this.queue.push(new h(r2, e2, t2));\n                            return r2;\n                        }, h.prototype.callFulfilled = function(e2) {\n                            l.resolve(this.promise, e2);\n                        }, h.prototype.otherCallFulfilled = function(e2) {\n                            f(this.promise, this.onFulfilled, e2);\n                        }, h.prototype.callRejected = function(e2) {\n                            l.reject(this.promise, e2);\n                        }, h.prototype.otherCallRejected = function(e2) {\n                            f(this.promise, this.onRejected, e2);\n                        }, l.resolve = function(e2, t2) {\n                            var r2 = p(c, t2);\n                            if (\"error\" === r2.status) return l.reject(e2, r2.value);\n                            var n2 = r2.value;\n                            if (n2) d(e2, n2);\n                            else {\n                                e2.state = a, e2.outcome = t2;\n                                for(var i2 = -1, s2 = e2.queue.length; ++i2 < s2;)e2.queue[i2].callFulfilled(t2);\n                            }\n                            return e2;\n                        }, l.reject = function(e2, t2) {\n                            e2.state = s, e2.outcome = t2;\n                            for(var r2 = -1, n2 = e2.queue.length; ++r2 < n2;)e2.queue[r2].callRejected(t2);\n                            return e2;\n                        }, o.resolve = function(e2) {\n                            if (e2 instanceof this) return e2;\n                            return l.resolve(new this(u), e2);\n                        }, o.reject = function(e2) {\n                            var t2 = new this(u);\n                            return l.reject(t2, e2);\n                        }, o.all = function(e2) {\n                            var r2 = this;\n                            if (\"[object Array]\" !== Object.prototype.toString.call(e2)) return this.reject(new TypeError(\"must be an array\"));\n                            var n2 = e2.length, i2 = false;\n                            if (!n2) return this.resolve([]);\n                            var s2 = new Array(n2), a2 = 0, t2 = -1, o2 = new this(u);\n                            for(; ++t2 < n2;)h2(e2[t2], t2);\n                            return o2;\n                            function h2(e3, t3) {\n                                r2.resolve(e3).then(function(e4) {\n                                    s2[t3] = e4, ++a2 !== n2 || i2 || (i2 = true, l.resolve(o2, s2));\n                                }, function(e4) {\n                                    i2 || (i2 = true, l.reject(o2, e4));\n                                });\n                            }\n                        }, o.race = function(e2) {\n                            var t2 = this;\n                            if (\"[object Array]\" !== Object.prototype.toString.call(e2)) return this.reject(new TypeError(\"must be an array\"));\n                            var r2 = e2.length, n2 = false;\n                            if (!r2) return this.resolve([]);\n                            var i2 = -1, s2 = new this(u);\n                            for(; ++i2 < r2;)a2 = e2[i2], t2.resolve(a2).then(function(e3) {\n                                n2 || (n2 = true, l.resolve(s2, e3));\n                            }, function(e3) {\n                                n2 || (n2 = true, l.reject(s2, e3));\n                            });\n                            var a2;\n                            return s2;\n                        };\n                    },\n                    {\n                        immediate: 36\n                    }\n                ],\n                38: [\n                    function(e, t, r) {\n                        var n = {};\n                        (0, e(\"./lib/utils/common\").assign)(n, e(\"./lib/deflate\"), e(\"./lib/inflate\"), e(\"./lib/zlib/constants\")), t.exports = n;\n                    },\n                    {\n                        \"./lib/deflate\": 39,\n                        \"./lib/inflate\": 40,\n                        \"./lib/utils/common\": 41,\n                        \"./lib/zlib/constants\": 44\n                    }\n                ],\n                39: [\n                    function(e, t, r) {\n                        var a = e(\"./zlib/deflate\"), o = e(\"./utils/common\"), h = e(\"./utils/strings\"), i = e(\"./zlib/messages\"), s = e(\"./zlib/zstream\"), u = Object.prototype.toString, l = 0, f = -1, c = 0, d = 8;\n                        function p(e2) {\n                            if (!(this instanceof p)) return new p(e2);\n                            this.options = o.assign({\n                                level: f,\n                                method: d,\n                                chunkSize: 16384,\n                                windowBits: 15,\n                                memLevel: 8,\n                                strategy: c,\n                                to: \"\"\n                            }, e2 || {});\n                            var t2 = this.options;\n                            t2.raw && 0 < t2.windowBits ? t2.windowBits = -t2.windowBits : t2.gzip && 0 < t2.windowBits && t2.windowBits < 16 && (t2.windowBits += 16), this.err = 0, this.msg = \"\", this.ended = false, this.chunks = [], this.strm = new s(), this.strm.avail_out = 0;\n                            var r2 = a.deflateInit2(this.strm, t2.level, t2.method, t2.windowBits, t2.memLevel, t2.strategy);\n                            if (r2 !== l) throw new Error(i[r2]);\n                            if (t2.header && a.deflateSetHeader(this.strm, t2.header), t2.dictionary) {\n                                var n2;\n                                if (n2 = \"string\" == typeof t2.dictionary ? h.string2buf(t2.dictionary) : \"[object ArrayBuffer]\" === u.call(t2.dictionary) ? new Uint8Array(t2.dictionary) : t2.dictionary, (r2 = a.deflateSetDictionary(this.strm, n2)) !== l) throw new Error(i[r2]);\n                                this._dict_set = true;\n                            }\n                        }\n                        function n(e2, t2) {\n                            var r2 = new p(t2);\n                            if (r2.push(e2, true), r2.err) throw r2.msg || i[r2.err];\n                            return r2.result;\n                        }\n                        p.prototype.push = function(e2, t2) {\n                            var r2, n2, i2 = this.strm, s2 = this.options.chunkSize;\n                            if (this.ended) return false;\n                            n2 = t2 === ~~t2 ? t2 : true === t2 ? 4 : 0, \"string\" == typeof e2 ? i2.input = h.string2buf(e2) : \"[object ArrayBuffer]\" === u.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length;\n                            do {\n                                if (0 === i2.avail_out && (i2.output = new o.Buf8(s2), i2.next_out = 0, i2.avail_out = s2), 1 !== (r2 = a.deflate(i2, n2)) && r2 !== l) return this.onEnd(r2), !(this.ended = true);\n                                0 !== i2.avail_out && (0 !== i2.avail_in || 4 !== n2 && 2 !== n2) || (\"string\" === this.options.to ? this.onData(h.buf2binstring(o.shrinkBuf(i2.output, i2.next_out))) : this.onData(o.shrinkBuf(i2.output, i2.next_out)));\n                            }while ((0 < i2.avail_in || 0 === i2.avail_out) && 1 !== r2);\n                            return 4 === n2 ? (r2 = a.deflateEnd(this.strm), this.onEnd(r2), this.ended = true, r2 === l) : 2 !== n2 || (this.onEnd(l), !(i2.avail_out = 0));\n                        }, p.prototype.onData = function(e2) {\n                            this.chunks.push(e2);\n                        }, p.prototype.onEnd = function(e2) {\n                            e2 === l && (\"string\" === this.options.to ? this.result = this.chunks.join(\"\") : this.result = o.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;\n                        }, r.Deflate = p, r.deflate = n, r.deflateRaw = function(e2, t2) {\n                            return (t2 = t2 || {}).raw = true, n(e2, t2);\n                        }, r.gzip = function(e2, t2) {\n                            return (t2 = t2 || {}).gzip = true, n(e2, t2);\n                        };\n                    },\n                    {\n                        \"./utils/common\": 41,\n                        \"./utils/strings\": 42,\n                        \"./zlib/deflate\": 46,\n                        \"./zlib/messages\": 51,\n                        \"./zlib/zstream\": 53\n                    }\n                ],\n                40: [\n                    function(e, t, r) {\n                        var c = e(\"./zlib/inflate\"), d = e(\"./utils/common\"), p = e(\"./utils/strings\"), m = e(\"./zlib/constants\"), n = e(\"./zlib/messages\"), i = e(\"./zlib/zstream\"), s = e(\"./zlib/gzheader\"), _ = Object.prototype.toString;\n                        function a(e2) {\n                            if (!(this instanceof a)) return new a(e2);\n                            this.options = d.assign({\n                                chunkSize: 16384,\n                                windowBits: 0,\n                                to: \"\"\n                            }, e2 || {});\n                            var t2 = this.options;\n                            t2.raw && 0 <= t2.windowBits && t2.windowBits < 16 && (t2.windowBits = -t2.windowBits, 0 === t2.windowBits && (t2.windowBits = -15)), !(0 <= t2.windowBits && t2.windowBits < 16) || e2 && e2.windowBits || (t2.windowBits += 32), 15 < t2.windowBits && t2.windowBits < 48 && 0 == (15 & t2.windowBits) && (t2.windowBits |= 15), this.err = 0, this.msg = \"\", this.ended = false, this.chunks = [], this.strm = new i(), this.strm.avail_out = 0;\n                            var r2 = c.inflateInit2(this.strm, t2.windowBits);\n                            if (r2 !== m.Z_OK) throw new Error(n[r2]);\n                            this.header = new s(), c.inflateGetHeader(this.strm, this.header);\n                        }\n                        function o(e2, t2) {\n                            var r2 = new a(t2);\n                            if (r2.push(e2, true), r2.err) throw r2.msg || n[r2.err];\n                            return r2.result;\n                        }\n                        a.prototype.push = function(e2, t2) {\n                            var r2, n2, i2, s2, a2, o2, h = this.strm, u = this.options.chunkSize, l = this.options.dictionary, f = false;\n                            if (this.ended) return false;\n                            n2 = t2 === ~~t2 ? t2 : true === t2 ? m.Z_FINISH : m.Z_NO_FLUSH, \"string\" == typeof e2 ? h.input = p.binstring2buf(e2) : \"[object ArrayBuffer]\" === _.call(e2) ? h.input = new Uint8Array(e2) : h.input = e2, h.next_in = 0, h.avail_in = h.input.length;\n                            do {\n                                if (0 === h.avail_out && (h.output = new d.Buf8(u), h.next_out = 0, h.avail_out = u), (r2 = c.inflate(h, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l && (o2 = \"string\" == typeof l ? p.string2buf(l) : \"[object ArrayBuffer]\" === _.call(l) ? new Uint8Array(l) : l, r2 = c.inflateSetDictionary(this.strm, o2)), r2 === m.Z_BUF_ERROR && true === f && (r2 = m.Z_OK, f = false), r2 !== m.Z_STREAM_END && r2 !== m.Z_OK) return this.onEnd(r2), !(this.ended = true);\n                                h.next_out && (0 !== h.avail_out && r2 !== m.Z_STREAM_END && (0 !== h.avail_in || n2 !== m.Z_FINISH && n2 !== m.Z_SYNC_FLUSH) || (\"string\" === this.options.to ? (i2 = p.utf8border(h.output, h.next_out), s2 = h.next_out - i2, a2 = p.buf2string(h.output, i2), h.next_out = s2, h.avail_out = u - s2, s2 && d.arraySet(h.output, h.output, i2, s2, 0), this.onData(a2)) : this.onData(d.shrinkBuf(h.output, h.next_out)))), 0 === h.avail_in && 0 === h.avail_out && (f = true);\n                            }while ((0 < h.avail_in || 0 === h.avail_out) && r2 !== m.Z_STREAM_END);\n                            return r2 === m.Z_STREAM_END && (n2 = m.Z_FINISH), n2 === m.Z_FINISH ? (r2 = c.inflateEnd(this.strm), this.onEnd(r2), this.ended = true, r2 === m.Z_OK) : n2 !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), !(h.avail_out = 0));\n                        }, a.prototype.onData = function(e2) {\n                            this.chunks.push(e2);\n                        }, a.prototype.onEnd = function(e2) {\n                            e2 === m.Z_OK && (\"string\" === this.options.to ? this.result = this.chunks.join(\"\") : this.result = d.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;\n                        }, r.Inflate = a, r.inflate = o, r.inflateRaw = function(e2, t2) {\n                            return (t2 = t2 || {}).raw = true, o(e2, t2);\n                        }, r.ungzip = o;\n                    },\n                    {\n                        \"./utils/common\": 41,\n                        \"./utils/strings\": 42,\n                        \"./zlib/constants\": 44,\n                        \"./zlib/gzheader\": 47,\n                        \"./zlib/inflate\": 49,\n                        \"./zlib/messages\": 51,\n                        \"./zlib/zstream\": 53\n                    }\n                ],\n                41: [\n                    function(e, t, r) {\n                        var n = \"undefined\" != typeof Uint8Array && \"undefined\" != typeof Uint16Array && \"undefined\" != typeof Int32Array;\n                        r.assign = function(e2) {\n                            for(var t2 = Array.prototype.slice.call(arguments, 1); t2.length;){\n                                var r2 = t2.shift();\n                                if (r2) {\n                                    if (\"object\" != typeof r2) throw new TypeError(r2 + \"must be non-object\");\n                                    for(var n2 in r2)r2.hasOwnProperty(n2) && (e2[n2] = r2[n2]);\n                                }\n                            }\n                            return e2;\n                        }, r.shrinkBuf = function(e2, t2) {\n                            return e2.length === t2 ? e2 : e2.subarray ? e2.subarray(0, t2) : (e2.length = t2, e2);\n                        };\n                        var i = {\n                            arraySet: function(e2, t2, r2, n2, i2) {\n                                if (t2.subarray && e2.subarray) e2.set(t2.subarray(r2, r2 + n2), i2);\n                                else for(var s2 = 0; s2 < n2; s2++)e2[i2 + s2] = t2[r2 + s2];\n                            },\n                            flattenChunks: function(e2) {\n                                var t2, r2, n2, i2, s2, a;\n                                for(t2 = n2 = 0, r2 = e2.length; t2 < r2; t2++)n2 += e2[t2].length;\n                                for(a = new Uint8Array(n2), t2 = i2 = 0, r2 = e2.length; t2 < r2; t2++)s2 = e2[t2], a.set(s2, i2), i2 += s2.length;\n                                return a;\n                            }\n                        }, s = {\n                            arraySet: function(e2, t2, r2, n2, i2) {\n                                for(var s2 = 0; s2 < n2; s2++)e2[i2 + s2] = t2[r2 + s2];\n                            },\n                            flattenChunks: function(e2) {\n                                return [].concat.apply([], e2);\n                            }\n                        };\n                        r.setTyped = function(e2) {\n                            e2 ? (r.Buf8 = Uint8Array, r.Buf16 = Uint16Array, r.Buf32 = Int32Array, r.assign(r, i)) : (r.Buf8 = Array, r.Buf16 = Array, r.Buf32 = Array, r.assign(r, s));\n                        }, r.setTyped(n);\n                    },\n                    {}\n                ],\n                42: [\n                    function(e, t, r) {\n                        var h = e(\"./common\"), i = true, s = true;\n                        try {\n                            String.fromCharCode.apply(null, [\n                                0\n                            ]);\n                        } catch (e2) {\n                            i = false;\n                        }\n                        try {\n                            String.fromCharCode.apply(null, new Uint8Array(1));\n                        } catch (e2) {\n                            s = false;\n                        }\n                        for(var u = new h.Buf8(256), n = 0; n < 256; n++)u[n] = 252 <= n ? 6 : 248 <= n ? 5 : 240 <= n ? 4 : 224 <= n ? 3 : 192 <= n ? 2 : 1;\n                        function l(e2, t2) {\n                            if (t2 < 65537 && (e2.subarray && s || !e2.subarray && i)) return String.fromCharCode.apply(null, h.shrinkBuf(e2, t2));\n                            for(var r2 = \"\", n2 = 0; n2 < t2; n2++)r2 += String.fromCharCode(e2[n2]);\n                            return r2;\n                        }\n                        u[254] = u[254] = 1, r.string2buf = function(e2) {\n                            var t2, r2, n2, i2, s2, a = e2.length, o = 0;\n                            for(i2 = 0; i2 < a; i2++)55296 == (64512 & (r2 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), o += r2 < 128 ? 1 : r2 < 2048 ? 2 : r2 < 65536 ? 3 : 4;\n                            for(t2 = new h.Buf8(o), i2 = s2 = 0; s2 < o; i2++)55296 == (64512 & (r2 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), r2 < 128 ? t2[s2++] = r2 : (r2 < 2048 ? t2[s2++] = 192 | r2 >>> 6 : (r2 < 65536 ? t2[s2++] = 224 | r2 >>> 12 : (t2[s2++] = 240 | r2 >>> 18, t2[s2++] = 128 | r2 >>> 12 & 63), t2[s2++] = 128 | r2 >>> 6 & 63), t2[s2++] = 128 | 63 & r2);\n                            return t2;\n                        }, r.buf2binstring = function(e2) {\n                            return l(e2, e2.length);\n                        }, r.binstring2buf = function(e2) {\n                            for(var t2 = new h.Buf8(e2.length), r2 = 0, n2 = t2.length; r2 < n2; r2++)t2[r2] = e2.charCodeAt(r2);\n                            return t2;\n                        }, r.buf2string = function(e2, t2) {\n                            var r2, n2, i2, s2, a = t2 || e2.length, o = new Array(2 * a);\n                            for(r2 = n2 = 0; r2 < a;)if ((i2 = e2[r2++]) < 128) o[n2++] = i2;\n                            else if (4 < (s2 = u[i2])) o[n2++] = 65533, r2 += s2 - 1;\n                            else {\n                                for(i2 &= 2 === s2 ? 31 : 3 === s2 ? 15 : 7; 1 < s2 && r2 < a;)i2 = i2 << 6 | 63 & e2[r2++], s2--;\n                                1 < s2 ? o[n2++] = 65533 : i2 < 65536 ? o[n2++] = i2 : (i2 -= 65536, o[n2++] = 55296 | i2 >> 10 & 1023, o[n2++] = 56320 | 1023 & i2);\n                            }\n                            return l(o, n2);\n                        }, r.utf8border = function(e2, t2) {\n                            var r2;\n                            for((t2 = t2 || e2.length) > e2.length && (t2 = e2.length), r2 = t2 - 1; 0 <= r2 && 128 == (192 & e2[r2]);)r2--;\n                            return r2 < 0 ? t2 : 0 === r2 ? t2 : r2 + u[e2[r2]] > t2 ? r2 : t2;\n                        };\n                    },\n                    {\n                        \"./common\": 41\n                    }\n                ],\n                43: [\n                    function(e, t, r) {\n                        t.exports = function(e2, t2, r2, n) {\n                            for(var i = 65535 & e2 | 0, s = e2 >>> 16 & 65535 | 0, a = 0; 0 !== r2;){\n                                for(r2 -= a = 2e3 < r2 ? 2e3 : r2; s = s + (i = i + t2[n++] | 0) | 0, --a;);\n                                i %= 65521, s %= 65521;\n                            }\n                            return i | s << 16 | 0;\n                        };\n                    },\n                    {}\n                ],\n                44: [\n                    function(e, t, r) {\n                        t.exports = {\n                            Z_NO_FLUSH: 0,\n                            Z_PARTIAL_FLUSH: 1,\n                            Z_SYNC_FLUSH: 2,\n                            Z_FULL_FLUSH: 3,\n                            Z_FINISH: 4,\n                            Z_BLOCK: 5,\n                            Z_TREES: 6,\n                            Z_OK: 0,\n                            Z_STREAM_END: 1,\n                            Z_NEED_DICT: 2,\n                            Z_ERRNO: -1,\n                            Z_STREAM_ERROR: -2,\n                            Z_DATA_ERROR: -3,\n                            Z_BUF_ERROR: -5,\n                            Z_NO_COMPRESSION: 0,\n                            Z_BEST_SPEED: 1,\n                            Z_BEST_COMPRESSION: 9,\n                            Z_DEFAULT_COMPRESSION: -1,\n                            Z_FILTERED: 1,\n                            Z_HUFFMAN_ONLY: 2,\n                            Z_RLE: 3,\n                            Z_FIXED: 4,\n                            Z_DEFAULT_STRATEGY: 0,\n                            Z_BINARY: 0,\n                            Z_TEXT: 1,\n                            Z_UNKNOWN: 2,\n                            Z_DEFLATED: 8\n                        };\n                    },\n                    {}\n                ],\n                45: [\n                    function(e, t, r) {\n                        var o = function() {\n                            for(var e2, t2 = [], r2 = 0; r2 < 256; r2++){\n                                e2 = r2;\n                                for(var n = 0; n < 8; n++)e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;\n                                t2[r2] = e2;\n                            }\n                            return t2;\n                        }();\n                        t.exports = function(e2, t2, r2, n) {\n                            var i = o, s = n + r2;\n                            e2 ^= -1;\n                            for(var a = n; a < s; a++)e2 = e2 >>> 8 ^ i[255 & (e2 ^ t2[a])];\n                            return -1 ^ e2;\n                        };\n                    },\n                    {}\n                ],\n                46: [\n                    function(e, t, r) {\n                        var h, c = e(\"../utils/common\"), u = e(\"./trees\"), d = e(\"./adler32\"), p = e(\"./crc32\"), n = e(\"./messages\"), l = 0, f = 4, m = 0, _ = -2, g = -1, b = 4, i = 2, v = 8, y = 9, s = 286, a = 30, o = 19, w = 2 * s + 1, k = 15, x = 3, S = 258, z = S + x + 1, C = 42, E = 113, A = 1, I = 2, O = 3, B = 4;\n                        function R(e2, t2) {\n                            return e2.msg = n[t2], t2;\n                        }\n                        function T(e2) {\n                            return (e2 << 1) - (4 < e2 ? 9 : 0);\n                        }\n                        function D(e2) {\n                            for(var t2 = e2.length; 0 <= --t2;)e2[t2] = 0;\n                        }\n                        function F(e2) {\n                            var t2 = e2.state, r2 = t2.pending;\n                            r2 > e2.avail_out && (r2 = e2.avail_out), 0 !== r2 && (c.arraySet(e2.output, t2.pending_buf, t2.pending_out, r2, e2.next_out), e2.next_out += r2, t2.pending_out += r2, e2.total_out += r2, e2.avail_out -= r2, t2.pending -= r2, 0 === t2.pending && (t2.pending_out = 0));\n                        }\n                        function N(e2, t2) {\n                            u._tr_flush_block(e2, 0 <= e2.block_start ? e2.block_start : -1, e2.strstart - e2.block_start, t2), e2.block_start = e2.strstart, F(e2.strm);\n                        }\n                        function U(e2, t2) {\n                            e2.pending_buf[e2.pending++] = t2;\n                        }\n                        function P(e2, t2) {\n                            e2.pending_buf[e2.pending++] = t2 >>> 8 & 255, e2.pending_buf[e2.pending++] = 255 & t2;\n                        }\n                        function L(e2, t2) {\n                            var r2, n2, i2 = e2.max_chain_length, s2 = e2.strstart, a2 = e2.prev_length, o2 = e2.nice_match, h2 = e2.strstart > e2.w_size - z ? e2.strstart - (e2.w_size - z) : 0, u2 = e2.window, l2 = e2.w_mask, f2 = e2.prev, c2 = e2.strstart + S, d2 = u2[s2 + a2 - 1], p2 = u2[s2 + a2];\n                            e2.prev_length >= e2.good_match && (i2 >>= 2), o2 > e2.lookahead && (o2 = e2.lookahead);\n                            do {\n                                if (u2[(r2 = t2) + a2] === p2 && u2[r2 + a2 - 1] === d2 && u2[r2] === u2[s2] && u2[++r2] === u2[s2 + 1]) {\n                                    s2 += 2, r2++;\n                                    do {}while (u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && s2 < c2);\n                                    if (n2 = S - (c2 - s2), s2 = c2 - S, a2 < n2) {\n                                        if (e2.match_start = t2, o2 <= (a2 = n2)) break;\n                                        d2 = u2[s2 + a2 - 1], p2 = u2[s2 + a2];\n                                    }\n                                }\n                            }while ((t2 = f2[t2 & l2]) > h2 && 0 != --i2);\n                            return a2 <= e2.lookahead ? a2 : e2.lookahead;\n                        }\n                        function j(e2) {\n                            var t2, r2, n2, i2, s2, a2, o2, h2, u2, l2, f2 = e2.w_size;\n                            do {\n                                if (i2 = e2.window_size - e2.lookahead - e2.strstart, e2.strstart >= f2 + (f2 - z)) {\n                                    for(c.arraySet(e2.window, e2.window, f2, f2, 0), e2.match_start -= f2, e2.strstart -= f2, e2.block_start -= f2, t2 = r2 = e2.hash_size; n2 = e2.head[--t2], e2.head[t2] = f2 <= n2 ? n2 - f2 : 0, --r2;);\n                                    for(t2 = r2 = f2; n2 = e2.prev[--t2], e2.prev[t2] = f2 <= n2 ? n2 - f2 : 0, --r2;);\n                                    i2 += f2;\n                                }\n                                if (0 === e2.strm.avail_in) break;\n                                if (a2 = e2.strm, o2 = e2.window, h2 = e2.strstart + e2.lookahead, u2 = i2, l2 = void 0, l2 = a2.avail_in, u2 < l2 && (l2 = u2), r2 = 0 === l2 ? 0 : (a2.avail_in -= l2, c.arraySet(o2, a2.input, a2.next_in, l2, h2), 1 === a2.state.wrap ? a2.adler = d(a2.adler, o2, l2, h2) : 2 === a2.state.wrap && (a2.adler = p(a2.adler, o2, l2, h2)), a2.next_in += l2, a2.total_in += l2, l2), e2.lookahead += r2, e2.lookahead + e2.insert >= x) for(s2 = e2.strstart - e2.insert, e2.ins_h = e2.window[s2], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s2 + 1]) & e2.hash_mask; e2.insert && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s2 + x - 1]) & e2.hash_mask, e2.prev[s2 & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = s2, s2++, e2.insert--, !(e2.lookahead + e2.insert < x)););\n                            }while (e2.lookahead < z && 0 !== e2.strm.avail_in);\n                        }\n                        function Z(e2, t2) {\n                            for(var r2, n2;;){\n                                if (e2.lookahead < z) {\n                                    if (j(e2), e2.lookahead < z && t2 === l) return A;\n                                    if (0 === e2.lookahead) break;\n                                }\n                                if (r2 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 !== r2 && e2.strstart - r2 <= e2.w_size - z && (e2.match_length = L(e2, r2)), e2.match_length >= x) if (n2 = u._tr_tally(e2, e2.strstart - e2.match_start, e2.match_length - x), e2.lookahead -= e2.match_length, e2.match_length <= e2.max_lazy_match && e2.lookahead >= x) {\n                                    for(e2.match_length--; e2.strstart++, e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart, 0 != --e2.match_length;);\n                                    e2.strstart++;\n                                } else e2.strstart += e2.match_length, e2.match_length = 0, e2.ins_h = e2.window[e2.strstart], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 1]) & e2.hash_mask;\n                                else n2 = u._tr_tally(e2, 0, e2.window[e2.strstart]), e2.lookahead--, e2.strstart++;\n                                if (n2 && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n                            }\n                            return e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;\n                        }\n                        function W(e2, t2) {\n                            for(var r2, n2, i2;;){\n                                if (e2.lookahead < z) {\n                                    if (j(e2), e2.lookahead < z && t2 === l) return A;\n                                    if (0 === e2.lookahead) break;\n                                }\n                                if (r2 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), e2.prev_length = e2.match_length, e2.prev_match = e2.match_start, e2.match_length = x - 1, 0 !== r2 && e2.prev_length < e2.max_lazy_match && e2.strstart - r2 <= e2.w_size - z && (e2.match_length = L(e2, r2), e2.match_length <= 5 && (1 === e2.strategy || e2.match_length === x && 4096 < e2.strstart - e2.match_start) && (e2.match_length = x - 1)), e2.prev_length >= x && e2.match_length <= e2.prev_length) {\n                                    for(i2 = e2.strstart + e2.lookahead - x, n2 = u._tr_tally(e2, e2.strstart - 1 - e2.prev_match, e2.prev_length - x), e2.lookahead -= e2.prev_length - 1, e2.prev_length -= 2; ++e2.strstart <= i2 && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 != --e2.prev_length;);\n                                    if (e2.match_available = 0, e2.match_length = x - 1, e2.strstart++, n2 && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n                                } else if (e2.match_available) {\n                                    if ((n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1])) && N(e2, false), e2.strstart++, e2.lookahead--, 0 === e2.strm.avail_out) return A;\n                                } else e2.match_available = 1, e2.strstart++, e2.lookahead--;\n                            }\n                            return e2.match_available && (n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1]), e2.match_available = 0), e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;\n                        }\n                        function M(e2, t2, r2, n2, i2) {\n                            this.good_length = e2, this.max_lazy = t2, this.nice_length = r2, this.max_chain = n2, this.func = i2;\n                        }\n                        function H() {\n                            this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c.Buf16(2 * w), this.dyn_dtree = new c.Buf16(2 * (2 * a + 1)), this.bl_tree = new c.Buf16(2 * (2 * o + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c.Buf16(k + 1), this.heap = new c.Buf16(2 * s + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c.Buf16(2 * s + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;\n                        }\n                        function G(e2) {\n                            var t2;\n                            return e2 && e2.state ? (e2.total_in = e2.total_out = 0, e2.data_type = i, (t2 = e2.state).pending = 0, t2.pending_out = 0, t2.wrap < 0 && (t2.wrap = -t2.wrap), t2.status = t2.wrap ? C : E, e2.adler = 2 === t2.wrap ? 0 : 1, t2.last_flush = l, u._tr_init(t2), m) : R(e2, _);\n                        }\n                        function K(e2) {\n                            var t2 = G(e2);\n                            return t2 === m && function(e3) {\n                                e3.window_size = 2 * e3.w_size, D(e3.head), e3.max_lazy_match = h[e3.level].max_lazy, e3.good_match = h[e3.level].good_length, e3.nice_match = h[e3.level].nice_length, e3.max_chain_length = h[e3.level].max_chain, e3.strstart = 0, e3.block_start = 0, e3.lookahead = 0, e3.insert = 0, e3.match_length = e3.prev_length = x - 1, e3.match_available = 0, e3.ins_h = 0;\n                            }(e2.state), t2;\n                        }\n                        function Y(e2, t2, r2, n2, i2, s2) {\n                            if (!e2) return _;\n                            var a2 = 1;\n                            if (t2 === g && (t2 = 6), n2 < 0 ? (a2 = 0, n2 = -n2) : 15 < n2 && (a2 = 2, n2 -= 16), i2 < 1 || y < i2 || r2 !== v || n2 < 8 || 15 < n2 || t2 < 0 || 9 < t2 || s2 < 0 || b < s2) return R(e2, _);\n                            8 === n2 && (n2 = 9);\n                            var o2 = new H();\n                            return (e2.state = o2).strm = e2, o2.wrap = a2, o2.gzhead = null, o2.w_bits = n2, o2.w_size = 1 << o2.w_bits, o2.w_mask = o2.w_size - 1, o2.hash_bits = i2 + 7, o2.hash_size = 1 << o2.hash_bits, o2.hash_mask = o2.hash_size - 1, o2.hash_shift = ~~((o2.hash_bits + x - 1) / x), o2.window = new c.Buf8(2 * o2.w_size), o2.head = new c.Buf16(o2.hash_size), o2.prev = new c.Buf16(o2.w_size), o2.lit_bufsize = 1 << i2 + 6, o2.pending_buf_size = 4 * o2.lit_bufsize, o2.pending_buf = new c.Buf8(o2.pending_buf_size), o2.d_buf = 1 * o2.lit_bufsize, o2.l_buf = 3 * o2.lit_bufsize, o2.level = t2, o2.strategy = s2, o2.method = r2, K(e2);\n                        }\n                        h = [\n                            new M(0, 0, 0, 0, function(e2, t2) {\n                                var r2 = 65535;\n                                for(r2 > e2.pending_buf_size - 5 && (r2 = e2.pending_buf_size - 5);;){\n                                    if (e2.lookahead <= 1) {\n                                        if (j(e2), 0 === e2.lookahead && t2 === l) return A;\n                                        if (0 === e2.lookahead) break;\n                                    }\n                                    e2.strstart += e2.lookahead, e2.lookahead = 0;\n                                    var n2 = e2.block_start + r2;\n                                    if ((0 === e2.strstart || e2.strstart >= n2) && (e2.lookahead = e2.strstart - n2, e2.strstart = n2, N(e2, false), 0 === e2.strm.avail_out)) return A;\n                                    if (e2.strstart - e2.block_start >= e2.w_size - z && (N(e2, false), 0 === e2.strm.avail_out)) return A;\n                                }\n                                return e2.insert = 0, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : (e2.strstart > e2.block_start && (N(e2, false), e2.strm.avail_out), A);\n                            }),\n                            new M(4, 4, 8, 4, Z),\n                            new M(4, 5, 16, 8, Z),\n                            new M(4, 6, 32, 32, Z),\n                            new M(4, 4, 16, 16, W),\n                            new M(8, 16, 32, 32, W),\n                            new M(8, 16, 128, 128, W),\n                            new M(8, 32, 128, 256, W),\n                            new M(32, 128, 258, 1024, W),\n                            new M(32, 258, 258, 4096, W)\n                        ], r.deflateInit = function(e2, t2) {\n                            return Y(e2, t2, v, 15, 8, 0);\n                        }, r.deflateInit2 = Y, r.deflateReset = K, r.deflateResetKeep = G, r.deflateSetHeader = function(e2, t2) {\n                            return e2 && e2.state ? 2 !== e2.state.wrap ? _ : (e2.state.gzhead = t2, m) : _;\n                        }, r.deflate = function(e2, t2) {\n                            var r2, n2, i2, s2;\n                            if (!e2 || !e2.state || 5 < t2 || t2 < 0) return e2 ? R(e2, _) : _;\n                            if (n2 = e2.state, !e2.output || !e2.input && 0 !== e2.avail_in || 666 === n2.status && t2 !== f) return R(e2, 0 === e2.avail_out ? -5 : _);\n                            if (n2.strm = e2, r2 = n2.last_flush, n2.last_flush = t2, n2.status === C) if (2 === n2.wrap) e2.adler = 0, U(n2, 31), U(n2, 139), U(n2, 8), n2.gzhead ? (U(n2, (n2.gzhead.text ? 1 : 0) + (n2.gzhead.hcrc ? 2 : 0) + (n2.gzhead.extra ? 4 : 0) + (n2.gzhead.name ? 8 : 0) + (n2.gzhead.comment ? 16 : 0)), U(n2, 255 & n2.gzhead.time), U(n2, n2.gzhead.time >> 8 & 255), U(n2, n2.gzhead.time >> 16 & 255), U(n2, n2.gzhead.time >> 24 & 255), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 255 & n2.gzhead.os), n2.gzhead.extra && n2.gzhead.extra.length && (U(n2, 255 & n2.gzhead.extra.length), U(n2, n2.gzhead.extra.length >> 8 & 255)), n2.gzhead.hcrc && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending, 0)), n2.gzindex = 0, n2.status = 69) : (U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 3), n2.status = E);\n                            else {\n                                var a2 = v + (n2.w_bits - 8 << 4) << 8;\n                                a2 |= (2 <= n2.strategy || n2.level < 2 ? 0 : n2.level < 6 ? 1 : 6 === n2.level ? 2 : 3) << 6, 0 !== n2.strstart && (a2 |= 32), a2 += 31 - a2 % 31, n2.status = E, P(n2, a2), 0 !== n2.strstart && (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), e2.adler = 1;\n                            }\n                            if (69 === n2.status) if (n2.gzhead.extra) {\n                                for(i2 = n2.pending; n2.gzindex < (65535 & n2.gzhead.extra.length) && (n2.pending !== n2.pending_buf_size || (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending !== n2.pending_buf_size));)U(n2, 255 & n2.gzhead.extra[n2.gzindex]), n2.gzindex++;\n                                n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), n2.gzindex === n2.gzhead.extra.length && (n2.gzindex = 0, n2.status = 73);\n                            } else n2.status = 73;\n                            if (73 === n2.status) if (n2.gzhead.name) {\n                                i2 = n2.pending;\n                                do {\n                                    if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {\n                                        s2 = 1;\n                                        break;\n                                    }\n                                    s2 = n2.gzindex < n2.gzhead.name.length ? 255 & n2.gzhead.name.charCodeAt(n2.gzindex++) : 0, U(n2, s2);\n                                }while (0 !== s2);\n                                n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s2 && (n2.gzindex = 0, n2.status = 91);\n                            } else n2.status = 91;\n                            if (91 === n2.status) if (n2.gzhead.comment) {\n                                i2 = n2.pending;\n                                do {\n                                    if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {\n                                        s2 = 1;\n                                        break;\n                                    }\n                                    s2 = n2.gzindex < n2.gzhead.comment.length ? 255 & n2.gzhead.comment.charCodeAt(n2.gzindex++) : 0, U(n2, s2);\n                                }while (0 !== s2);\n                                n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s2 && (n2.status = 103);\n                            } else n2.status = 103;\n                            if (103 === n2.status && (n2.gzhead.hcrc ? (n2.pending + 2 > n2.pending_buf_size && F(e2), n2.pending + 2 <= n2.pending_buf_size && (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), e2.adler = 0, n2.status = E)) : n2.status = E), 0 !== n2.pending) {\n                                if (F(e2), 0 === e2.avail_out) return n2.last_flush = -1, m;\n                            } else if (0 === e2.avail_in && T(t2) <= T(r2) && t2 !== f) return R(e2, -5);\n                            if (666 === n2.status && 0 !== e2.avail_in) return R(e2, -5);\n                            if (0 !== e2.avail_in || 0 !== n2.lookahead || t2 !== l && 666 !== n2.status) {\n                                var o2 = 2 === n2.strategy ? function(e3, t3) {\n                                    for(var r3;;){\n                                        if (0 === e3.lookahead && (j(e3), 0 === e3.lookahead)) {\n                                            if (t3 === l) return A;\n                                            break;\n                                        }\n                                        if (e3.match_length = 0, r3 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++, r3 && (N(e3, false), 0 === e3.strm.avail_out)) return A;\n                                    }\n                                    return e3.insert = 0, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;\n                                }(n2, t2) : 3 === n2.strategy ? function(e3, t3) {\n                                    for(var r3, n3, i3, s3, a3 = e3.window;;){\n                                        if (e3.lookahead <= S) {\n                                            if (j(e3), e3.lookahead <= S && t3 === l) return A;\n                                            if (0 === e3.lookahead) break;\n                                        }\n                                        if (e3.match_length = 0, e3.lookahead >= x && 0 < e3.strstart && (n3 = a3[i3 = e3.strstart - 1]) === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3]) {\n                                            s3 = e3.strstart + S;\n                                            do {}while (n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && i3 < s3);\n                                            e3.match_length = S - (s3 - i3), e3.match_length > e3.lookahead && (e3.match_length = e3.lookahead);\n                                        }\n                                        if (e3.match_length >= x ? (r3 = u._tr_tally(e3, 1, e3.match_length - x), e3.lookahead -= e3.match_length, e3.strstart += e3.match_length, e3.match_length = 0) : (r3 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++), r3 && (N(e3, false), 0 === e3.strm.avail_out)) return A;\n                                    }\n                                    return e3.insert = 0, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;\n                                }(n2, t2) : h[n2.level].func(n2, t2);\n                                if (o2 !== O && o2 !== B || (n2.status = 666), o2 === A || o2 === O) return 0 === e2.avail_out && (n2.last_flush = -1), m;\n                                if (o2 === I && (1 === t2 ? u._tr_align(n2) : 5 !== t2 && (u._tr_stored_block(n2, 0, 0, false), 3 === t2 && (D(n2.head), 0 === n2.lookahead && (n2.strstart = 0, n2.block_start = 0, n2.insert = 0))), F(e2), 0 === e2.avail_out)) return n2.last_flush = -1, m;\n                            }\n                            return t2 !== f ? m : n2.wrap <= 0 ? 1 : (2 === n2.wrap ? (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), U(n2, e2.adler >> 16 & 255), U(n2, e2.adler >> 24 & 255), U(n2, 255 & e2.total_in), U(n2, e2.total_in >> 8 & 255), U(n2, e2.total_in >> 16 & 255), U(n2, e2.total_in >> 24 & 255)) : (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), F(e2), 0 < n2.wrap && (n2.wrap = -n2.wrap), 0 !== n2.pending ? m : 1);\n                        }, r.deflateEnd = function(e2) {\n                            var t2;\n                            return e2 && e2.state ? (t2 = e2.state.status) !== C && 69 !== t2 && 73 !== t2 && 91 !== t2 && 103 !== t2 && t2 !== E && 666 !== t2 ? R(e2, _) : (e2.state = null, t2 === E ? R(e2, -3) : m) : _;\n                        }, r.deflateSetDictionary = function(e2, t2) {\n                            var r2, n2, i2, s2, a2, o2, h2, u2, l2 = t2.length;\n                            if (!e2 || !e2.state) return _;\n                            if (2 === (s2 = (r2 = e2.state).wrap) || 1 === s2 && r2.status !== C || r2.lookahead) return _;\n                            for(1 === s2 && (e2.adler = d(e2.adler, t2, l2, 0)), r2.wrap = 0, l2 >= r2.w_size && (0 === s2 && (D(r2.head), r2.strstart = 0, r2.block_start = 0, r2.insert = 0), u2 = new c.Buf8(r2.w_size), c.arraySet(u2, t2, l2 - r2.w_size, r2.w_size, 0), t2 = u2, l2 = r2.w_size), a2 = e2.avail_in, o2 = e2.next_in, h2 = e2.input, e2.avail_in = l2, e2.next_in = 0, e2.input = t2, j(r2); r2.lookahead >= x;){\n                                for(n2 = r2.strstart, i2 = r2.lookahead - (x - 1); r2.ins_h = (r2.ins_h << r2.hash_shift ^ r2.window[n2 + x - 1]) & r2.hash_mask, r2.prev[n2 & r2.w_mask] = r2.head[r2.ins_h], r2.head[r2.ins_h] = n2, n2++, --i2;);\n                                r2.strstart = n2, r2.lookahead = x - 1, j(r2);\n                            }\n                            return r2.strstart += r2.lookahead, r2.block_start = r2.strstart, r2.insert = r2.lookahead, r2.lookahead = 0, r2.match_length = r2.prev_length = x - 1, r2.match_available = 0, e2.next_in = o2, e2.input = h2, e2.avail_in = a2, r2.wrap = s2, m;\n                        }, r.deflateInfo = \"pako deflate (from Nodeca project)\";\n                    },\n                    {\n                        \"../utils/common\": 41,\n                        \"./adler32\": 43,\n                        \"./crc32\": 45,\n                        \"./messages\": 51,\n                        \"./trees\": 52\n                    }\n                ],\n                47: [\n                    function(e, t, r) {\n                        t.exports = function() {\n                            this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = \"\", this.comment = \"\", this.hcrc = 0, this.done = false;\n                        };\n                    },\n                    {}\n                ],\n                48: [\n                    function(e, t, r) {\n                        t.exports = function(e2, t2) {\n                            var r2, n, i, s, a, o, h, u, l, f, c, d, p, m, _, g, b, v, y, w, k, x, S, z, C;\n                            r2 = e2.state, n = e2.next_in, z = e2.input, i = n + (e2.avail_in - 5), s = e2.next_out, C = e2.output, a = s - (t2 - e2.avail_out), o = s + (e2.avail_out - 257), h = r2.dmax, u = r2.wsize, l = r2.whave, f = r2.wnext, c = r2.window, d = r2.hold, p = r2.bits, m = r2.lencode, _ = r2.distcode, g = (1 << r2.lenbits) - 1, b = (1 << r2.distbits) - 1;\n                            e: do {\n                                p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = m[d & g];\n                                t: for(;;){\n                                    if (d >>>= y = v >>> 24, p -= y, 0 === (y = v >>> 16 & 255)) C[s++] = 65535 & v;\n                                    else {\n                                        if (!(16 & y)) {\n                                            if (0 == (64 & y)) {\n                                                v = m[(65535 & v) + (d & (1 << y) - 1)];\n                                                continue t;\n                                            }\n                                            if (32 & y) {\n                                                r2.mode = 12;\n                                                break e;\n                                            }\n                                            e2.msg = \"invalid literal/length code\", r2.mode = 30;\n                                            break e;\n                                        }\n                                        w = 65535 & v, (y &= 15) && (p < y && (d += z[n++] << p, p += 8), w += d & (1 << y) - 1, d >>>= y, p -= y), p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = _[d & b];\n                                        r: for(;;){\n                                            if (d >>>= y = v >>> 24, p -= y, !(16 & (y = v >>> 16 & 255))) {\n                                                if (0 == (64 & y)) {\n                                                    v = _[(65535 & v) + (d & (1 << y) - 1)];\n                                                    continue r;\n                                                }\n                                                e2.msg = \"invalid distance code\", r2.mode = 30;\n                                                break e;\n                                            }\n                                            if (k = 65535 & v, p < (y &= 15) && (d += z[n++] << p, (p += 8) < y && (d += z[n++] << p, p += 8)), h < (k += d & (1 << y) - 1)) {\n                                                e2.msg = \"invalid distance too far back\", r2.mode = 30;\n                                                break e;\n                                            }\n                                            if (d >>>= y, p -= y, (y = s - a) < k) {\n                                                if (l < (y = k - y) && r2.sane) {\n                                                    e2.msg = \"invalid distance too far back\", r2.mode = 30;\n                                                    break e;\n                                                }\n                                                if (S = c, (x = 0) === f) {\n                                                    if (x += u - y, y < w) {\n                                                        for(w -= y; C[s++] = c[x++], --y;);\n                                                        x = s - k, S = C;\n                                                    }\n                                                } else if (f < y) {\n                                                    if (x += u + f - y, (y -= f) < w) {\n                                                        for(w -= y; C[s++] = c[x++], --y;);\n                                                        if (x = 0, f < w) {\n                                                            for(w -= y = f; C[s++] = c[x++], --y;);\n                                                            x = s - k, S = C;\n                                                        }\n                                                    }\n                                                } else if (x += f - y, y < w) {\n                                                    for(w -= y; C[s++] = c[x++], --y;);\n                                                    x = s - k, S = C;\n                                                }\n                                                for(; 2 < w;)C[s++] = S[x++], C[s++] = S[x++], C[s++] = S[x++], w -= 3;\n                                                w && (C[s++] = S[x++], 1 < w && (C[s++] = S[x++]));\n                                            } else {\n                                                for(x = s - k; C[s++] = C[x++], C[s++] = C[x++], C[s++] = C[x++], 2 < (w -= 3););\n                                                w && (C[s++] = C[x++], 1 < w && (C[s++] = C[x++]));\n                                            }\n                                            break;\n                                        }\n                                    }\n                                    break;\n                                }\n                            }while (n < i && s < o);\n                            n -= w = p >> 3, d &= (1 << (p -= w << 3)) - 1, e2.next_in = n, e2.next_out = s, e2.avail_in = n < i ? i - n + 5 : 5 - (n - i), e2.avail_out = s < o ? o - s + 257 : 257 - (s - o), r2.hold = d, r2.bits = p;\n                        };\n                    },\n                    {}\n                ],\n                49: [\n                    function(e, t, r) {\n                        var I = e(\"../utils/common\"), O = e(\"./adler32\"), B = e(\"./crc32\"), R = e(\"./inffast\"), T = e(\"./inftrees\"), D = 1, F = 2, N = 0, U = -2, P = 1, n = 852, i = 592;\n                        function L(e2) {\n                            return (e2 >>> 24 & 255) + (e2 >>> 8 & 65280) + ((65280 & e2) << 8) + ((255 & e2) << 24);\n                        }\n                        function s() {\n                            this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;\n                        }\n                        function a(e2) {\n                            var t2;\n                            return e2 && e2.state ? (t2 = e2.state, e2.total_in = e2.total_out = t2.total = 0, e2.msg = \"\", t2.wrap && (e2.adler = 1 & t2.wrap), t2.mode = P, t2.last = 0, t2.havedict = 0, t2.dmax = 32768, t2.head = null, t2.hold = 0, t2.bits = 0, t2.lencode = t2.lendyn = new I.Buf32(n), t2.distcode = t2.distdyn = new I.Buf32(i), t2.sane = 1, t2.back = -1, N) : U;\n                        }\n                        function o(e2) {\n                            var t2;\n                            return e2 && e2.state ? ((t2 = e2.state).wsize = 0, t2.whave = 0, t2.wnext = 0, a(e2)) : U;\n                        }\n                        function h(e2, t2) {\n                            var r2, n2;\n                            return e2 && e2.state ? (n2 = e2.state, t2 < 0 ? (r2 = 0, t2 = -t2) : (r2 = 1 + (t2 >> 4), t2 < 48 && (t2 &= 15)), t2 && (t2 < 8 || 15 < t2) ? U : (null !== n2.window && n2.wbits !== t2 && (n2.window = null), n2.wrap = r2, n2.wbits = t2, o(e2))) : U;\n                        }\n                        function u(e2, t2) {\n                            var r2, n2;\n                            return e2 ? (n2 = new s(), (e2.state = n2).window = null, (r2 = h(e2, t2)) !== N && (e2.state = null), r2) : U;\n                        }\n                        var l, f, c = true;\n                        function j(e2) {\n                            if (c) {\n                                var t2;\n                                for(l = new I.Buf32(512), f = new I.Buf32(32), t2 = 0; t2 < 144;)e2.lens[t2++] = 8;\n                                for(; t2 < 256;)e2.lens[t2++] = 9;\n                                for(; t2 < 280;)e2.lens[t2++] = 7;\n                                for(; t2 < 288;)e2.lens[t2++] = 8;\n                                for(T(D, e2.lens, 0, 288, l, 0, e2.work, {\n                                    bits: 9\n                                }), t2 = 0; t2 < 32;)e2.lens[t2++] = 5;\n                                T(F, e2.lens, 0, 32, f, 0, e2.work, {\n                                    bits: 5\n                                }), c = false;\n                            }\n                            e2.lencode = l, e2.lenbits = 9, e2.distcode = f, e2.distbits = 5;\n                        }\n                        function Z(e2, t2, r2, n2) {\n                            var i2, s2 = e2.state;\n                            return null === s2.window && (s2.wsize = 1 << s2.wbits, s2.wnext = 0, s2.whave = 0, s2.window = new I.Buf8(s2.wsize)), n2 >= s2.wsize ? (I.arraySet(s2.window, t2, r2 - s2.wsize, s2.wsize, 0), s2.wnext = 0, s2.whave = s2.wsize) : (n2 < (i2 = s2.wsize - s2.wnext) && (i2 = n2), I.arraySet(s2.window, t2, r2 - n2, i2, s2.wnext), (n2 -= i2) ? (I.arraySet(s2.window, t2, r2 - n2, n2, 0), s2.wnext = n2, s2.whave = s2.wsize) : (s2.wnext += i2, s2.wnext === s2.wsize && (s2.wnext = 0), s2.whave < s2.wsize && (s2.whave += i2))), 0;\n                        }\n                        r.inflateReset = o, r.inflateReset2 = h, r.inflateResetKeep = a, r.inflateInit = function(e2) {\n                            return u(e2, 15);\n                        }, r.inflateInit2 = u, r.inflate = function(e2, t2) {\n                            var r2, n2, i2, s2, a2, o2, h2, u2, l2, f2, c2, d, p, m, _, g, b, v, y, w, k, x, S, z, C = 0, E = new I.Buf8(4), A = [\n                                16,\n                                17,\n                                18,\n                                0,\n                                8,\n                                7,\n                                9,\n                                6,\n                                10,\n                                5,\n                                11,\n                                4,\n                                12,\n                                3,\n                                13,\n                                2,\n                                14,\n                                1,\n                                15\n                            ];\n                            if (!e2 || !e2.state || !e2.output || !e2.input && 0 !== e2.avail_in) return U;\n                            12 === (r2 = e2.state).mode && (r2.mode = 13), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s2 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r2.hold, l2 = r2.bits, f2 = o2, c2 = h2, x = N;\n                            e: for(;;)switch(r2.mode){\n                                case P:\n                                    if (0 === r2.wrap) {\n                                        r2.mode = 13;\n                                        break;\n                                    }\n                                    for(; l2 < 16;){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    if (2 & r2.wrap && 35615 === u2) {\n                                        E[r2.check = 0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0), l2 = u2 = 0, r2.mode = 2;\n                                        break;\n                                    }\n                                    if (r2.flags = 0, r2.head && (r2.head.done = false), !(1 & r2.wrap) || (((255 & u2) << 8) + (u2 >> 8)) % 31) {\n                                        e2.msg = \"incorrect header check\", r2.mode = 30;\n                                        break;\n                                    }\n                                    if (8 != (15 & u2)) {\n                                        e2.msg = \"unknown compression method\", r2.mode = 30;\n                                        break;\n                                    }\n                                    if (l2 -= 4, k = 8 + (15 & (u2 >>>= 4)), 0 === r2.wbits) r2.wbits = k;\n                                    else if (k > r2.wbits) {\n                                        e2.msg = \"invalid window size\", r2.mode = 30;\n                                        break;\n                                    }\n                                    r2.dmax = 1 << k, e2.adler = r2.check = 1, r2.mode = 512 & u2 ? 10 : 12, l2 = u2 = 0;\n                                    break;\n                                case 2:\n                                    for(; l2 < 16;){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    if (r2.flags = u2, 8 != (255 & r2.flags)) {\n                                        e2.msg = \"unknown compression method\", r2.mode = 30;\n                                        break;\n                                    }\n                                    if (57344 & r2.flags) {\n                                        e2.msg = \"unknown header flags set\", r2.mode = 30;\n                                        break;\n                                    }\n                                    r2.head && (r2.head.text = u2 >> 8 & 1), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0, r2.mode = 3;\n                                case 3:\n                                    for(; l2 < 32;){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    r2.head && (r2.head.time = u2), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, E[2] = u2 >>> 16 & 255, E[3] = u2 >>> 24 & 255, r2.check = B(r2.check, E, 4, 0)), l2 = u2 = 0, r2.mode = 4;\n                                case 4:\n                                    for(; l2 < 16;){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    r2.head && (r2.head.xflags = 255 & u2, r2.head.os = u2 >> 8), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0, r2.mode = 5;\n                                case 5:\n                                    if (1024 & r2.flags) {\n                                        for(; l2 < 16;){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        r2.length = u2, r2.head && (r2.head.extra_len = u2), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0;\n                                    } else r2.head && (r2.head.extra = null);\n                                    r2.mode = 6;\n                                case 6:\n                                    if (1024 & r2.flags && (o2 < (d = r2.length) && (d = o2), d && (r2.head && (k = r2.head.extra_len - r2.length, r2.head.extra || (r2.head.extra = new Array(r2.head.extra_len)), I.arraySet(r2.head.extra, n2, s2, d, k)), 512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, r2.length -= d), r2.length)) break e;\n                                    r2.length = 0, r2.mode = 7;\n                                case 7:\n                                    if (2048 & r2.flags) {\n                                        if (0 === o2) break e;\n                                        for(d = 0; k = n2[s2 + d++], r2.head && k && r2.length < 65536 && (r2.head.name += String.fromCharCode(k)), k && d < o2;);\n                                        if (512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, k) break e;\n                                    } else r2.head && (r2.head.name = null);\n                                    r2.length = 0, r2.mode = 8;\n                                case 8:\n                                    if (4096 & r2.flags) {\n                                        if (0 === o2) break e;\n                                        for(d = 0; k = n2[s2 + d++], r2.head && k && r2.length < 65536 && (r2.head.comment += String.fromCharCode(k)), k && d < o2;);\n                                        if (512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, k) break e;\n                                    } else r2.head && (r2.head.comment = null);\n                                    r2.mode = 9;\n                                case 9:\n                                    if (512 & r2.flags) {\n                                        for(; l2 < 16;){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        if (u2 !== (65535 & r2.check)) {\n                                            e2.msg = \"header crc mismatch\", r2.mode = 30;\n                                            break;\n                                        }\n                                        l2 = u2 = 0;\n                                    }\n                                    r2.head && (r2.head.hcrc = r2.flags >> 9 & 1, r2.head.done = true), e2.adler = r2.check = 0, r2.mode = 12;\n                                    break;\n                                case 10:\n                                    for(; l2 < 32;){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    e2.adler = r2.check = L(u2), l2 = u2 = 0, r2.mode = 11;\n                                case 11:\n                                    if (0 === r2.havedict) return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, 2;\n                                    e2.adler = r2.check = 1, r2.mode = 12;\n                                case 12:\n                                    if (5 === t2 || 6 === t2) break e;\n                                case 13:\n                                    if (r2.last) {\n                                        u2 >>>= 7 & l2, l2 -= 7 & l2, r2.mode = 27;\n                                        break;\n                                    }\n                                    for(; l2 < 3;){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    switch(r2.last = 1 & u2, l2 -= 1, 3 & (u2 >>>= 1)){\n                                        case 0:\n                                            r2.mode = 14;\n                                            break;\n                                        case 1:\n                                            if (j(r2), r2.mode = 20, 6 !== t2) break;\n                                            u2 >>>= 2, l2 -= 2;\n                                            break e;\n                                        case 2:\n                                            r2.mode = 17;\n                                            break;\n                                        case 3:\n                                            e2.msg = \"invalid block type\", r2.mode = 30;\n                                    }\n                                    u2 >>>= 2, l2 -= 2;\n                                    break;\n                                case 14:\n                                    for(u2 >>>= 7 & l2, l2 -= 7 & l2; l2 < 32;){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    if ((65535 & u2) != (u2 >>> 16 ^ 65535)) {\n                                        e2.msg = \"invalid stored block lengths\", r2.mode = 30;\n                                        break;\n                                    }\n                                    if (r2.length = 65535 & u2, l2 = u2 = 0, r2.mode = 15, 6 === t2) break e;\n                                case 15:\n                                    r2.mode = 16;\n                                case 16:\n                                    if (d = r2.length) {\n                                        if (o2 < d && (d = o2), h2 < d && (d = h2), 0 === d) break e;\n                                        I.arraySet(i2, n2, s2, d, a2), o2 -= d, s2 += d, h2 -= d, a2 += d, r2.length -= d;\n                                        break;\n                                    }\n                                    r2.mode = 12;\n                                    break;\n                                case 17:\n                                    for(; l2 < 14;){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    if (r2.nlen = 257 + (31 & u2), u2 >>>= 5, l2 -= 5, r2.ndist = 1 + (31 & u2), u2 >>>= 5, l2 -= 5, r2.ncode = 4 + (15 & u2), u2 >>>= 4, l2 -= 4, 286 < r2.nlen || 30 < r2.ndist) {\n                                        e2.msg = \"too many length or distance symbols\", r2.mode = 30;\n                                        break;\n                                    }\n                                    r2.have = 0, r2.mode = 18;\n                                case 18:\n                                    for(; r2.have < r2.ncode;){\n                                        for(; l2 < 3;){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        r2.lens[A[r2.have++]] = 7 & u2, u2 >>>= 3, l2 -= 3;\n                                    }\n                                    for(; r2.have < 19;)r2.lens[A[r2.have++]] = 0;\n                                    if (r2.lencode = r2.lendyn, r2.lenbits = 7, S = {\n                                        bits: r2.lenbits\n                                    }, x = T(0, r2.lens, 0, 19, r2.lencode, 0, r2.work, S), r2.lenbits = S.bits, x) {\n                                        e2.msg = \"invalid code lengths set\", r2.mode = 30;\n                                        break;\n                                    }\n                                    r2.have = 0, r2.mode = 19;\n                                case 19:\n                                    for(; r2.have < r2.nlen + r2.ndist;){\n                                        for(; g = (C = r2.lencode[u2 & (1 << r2.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2);){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        if (b < 16) u2 >>>= _, l2 -= _, r2.lens[r2.have++] = b;\n                                        else {\n                                            if (16 === b) {\n                                                for(z = _ + 2; l2 < z;){\n                                                    if (0 === o2) break e;\n                                                    o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                                }\n                                                if (u2 >>>= _, l2 -= _, 0 === r2.have) {\n                                                    e2.msg = \"invalid bit length repeat\", r2.mode = 30;\n                                                    break;\n                                                }\n                                                k = r2.lens[r2.have - 1], d = 3 + (3 & u2), u2 >>>= 2, l2 -= 2;\n                                            } else if (17 === b) {\n                                                for(z = _ + 3; l2 < z;){\n                                                    if (0 === o2) break e;\n                                                    o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                                }\n                                                l2 -= _, k = 0, d = 3 + (7 & (u2 >>>= _)), u2 >>>= 3, l2 -= 3;\n                                            } else {\n                                                for(z = _ + 7; l2 < z;){\n                                                    if (0 === o2) break e;\n                                                    o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                                }\n                                                l2 -= _, k = 0, d = 11 + (127 & (u2 >>>= _)), u2 >>>= 7, l2 -= 7;\n                                            }\n                                            if (r2.have + d > r2.nlen + r2.ndist) {\n                                                e2.msg = \"invalid bit length repeat\", r2.mode = 30;\n                                                break;\n                                            }\n                                            for(; d--;)r2.lens[r2.have++] = k;\n                                        }\n                                    }\n                                    if (30 === r2.mode) break;\n                                    if (0 === r2.lens[256]) {\n                                        e2.msg = \"invalid code -- missing end-of-block\", r2.mode = 30;\n                                        break;\n                                    }\n                                    if (r2.lenbits = 9, S = {\n                                        bits: r2.lenbits\n                                    }, x = T(D, r2.lens, 0, r2.nlen, r2.lencode, 0, r2.work, S), r2.lenbits = S.bits, x) {\n                                        e2.msg = \"invalid literal/lengths set\", r2.mode = 30;\n                                        break;\n                                    }\n                                    if (r2.distbits = 6, r2.distcode = r2.distdyn, S = {\n                                        bits: r2.distbits\n                                    }, x = T(F, r2.lens, r2.nlen, r2.ndist, r2.distcode, 0, r2.work, S), r2.distbits = S.bits, x) {\n                                        e2.msg = \"invalid distances set\", r2.mode = 30;\n                                        break;\n                                    }\n                                    if (r2.mode = 20, 6 === t2) break e;\n                                case 20:\n                                    r2.mode = 21;\n                                case 21:\n                                    if (6 <= o2 && 258 <= h2) {\n                                        e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, R(e2, c2), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s2 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r2.hold, l2 = r2.bits, 12 === r2.mode && (r2.back = -1);\n                                        break;\n                                    }\n                                    for(r2.back = 0; g = (C = r2.lencode[u2 & (1 << r2.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2);){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    if (g && 0 == (240 & g)) {\n                                        for(v = _, y = g, w = b; g = (C = r2.lencode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2);){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        u2 >>>= v, l2 -= v, r2.back += v;\n                                    }\n                                    if (u2 >>>= _, l2 -= _, r2.back += _, r2.length = b, 0 === g) {\n                                        r2.mode = 26;\n                                        break;\n                                    }\n                                    if (32 & g) {\n                                        r2.back = -1, r2.mode = 12;\n                                        break;\n                                    }\n                                    if (64 & g) {\n                                        e2.msg = \"invalid literal/length code\", r2.mode = 30;\n                                        break;\n                                    }\n                                    r2.extra = 15 & g, r2.mode = 22;\n                                case 22:\n                                    if (r2.extra) {\n                                        for(z = r2.extra; l2 < z;){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        r2.length += u2 & (1 << r2.extra) - 1, u2 >>>= r2.extra, l2 -= r2.extra, r2.back += r2.extra;\n                                    }\n                                    r2.was = r2.length, r2.mode = 23;\n                                case 23:\n                                    for(; g = (C = r2.distcode[u2 & (1 << r2.distbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2);){\n                                        if (0 === o2) break e;\n                                        o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                    }\n                                    if (0 == (240 & g)) {\n                                        for(v = _, y = g, w = b; g = (C = r2.distcode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2);){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        u2 >>>= v, l2 -= v, r2.back += v;\n                                    }\n                                    if (u2 >>>= _, l2 -= _, r2.back += _, 64 & g) {\n                                        e2.msg = \"invalid distance code\", r2.mode = 30;\n                                        break;\n                                    }\n                                    r2.offset = b, r2.extra = 15 & g, r2.mode = 24;\n                                case 24:\n                                    if (r2.extra) {\n                                        for(z = r2.extra; l2 < z;){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        r2.offset += u2 & (1 << r2.extra) - 1, u2 >>>= r2.extra, l2 -= r2.extra, r2.back += r2.extra;\n                                    }\n                                    if (r2.offset > r2.dmax) {\n                                        e2.msg = \"invalid distance too far back\", r2.mode = 30;\n                                        break;\n                                    }\n                                    r2.mode = 25;\n                                case 25:\n                                    if (0 === h2) break e;\n                                    if (d = c2 - h2, r2.offset > d) {\n                                        if ((d = r2.offset - d) > r2.whave && r2.sane) {\n                                            e2.msg = \"invalid distance too far back\", r2.mode = 30;\n                                            break;\n                                        }\n                                        p = d > r2.wnext ? (d -= r2.wnext, r2.wsize - d) : r2.wnext - d, d > r2.length && (d = r2.length), m = r2.window;\n                                    } else m = i2, p = a2 - r2.offset, d = r2.length;\n                                    for(h2 < d && (d = h2), h2 -= d, r2.length -= d; i2[a2++] = m[p++], --d;);\n                                    0 === r2.length && (r2.mode = 21);\n                                    break;\n                                case 26:\n                                    if (0 === h2) break e;\n                                    i2[a2++] = r2.length, h2--, r2.mode = 21;\n                                    break;\n                                case 27:\n                                    if (r2.wrap) {\n                                        for(; l2 < 32;){\n                                            if (0 === o2) break e;\n                                            o2--, u2 |= n2[s2++] << l2, l2 += 8;\n                                        }\n                                        if (c2 -= h2, e2.total_out += c2, r2.total += c2, c2 && (e2.adler = r2.check = r2.flags ? B(r2.check, i2, c2, a2 - c2) : O(r2.check, i2, c2, a2 - c2)), c2 = h2, (r2.flags ? u2 : L(u2)) !== r2.check) {\n                                            e2.msg = \"incorrect data check\", r2.mode = 30;\n                                            break;\n                                        }\n                                        l2 = u2 = 0;\n                                    }\n                                    r2.mode = 28;\n                                case 28:\n                                    if (r2.wrap && r2.flags) {\n                                        for(; l2 < 32;){\n                                            if (0 === o2) break e;\n                                            o2--, u2 += n2[s2++] << l2, l2 += 8;\n                                        }\n                                        if (u2 !== (4294967295 & r2.total)) {\n                                            e2.msg = \"incorrect length check\", r2.mode = 30;\n                                            break;\n                                        }\n                                        l2 = u2 = 0;\n                                    }\n                                    r2.mode = 29;\n                                case 29:\n                                    x = 1;\n                                    break e;\n                                case 30:\n                                    x = -3;\n                                    break e;\n                                case 31:\n                                    return -4;\n                                case 32:\n                                default:\n                                    return U;\n                            }\n                            return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, (r2.wsize || c2 !== e2.avail_out && r2.mode < 30 && (r2.mode < 27 || 4 !== t2)) && Z(e2, e2.output, e2.next_out, c2 - e2.avail_out) ? (r2.mode = 31, -4) : (f2 -= e2.avail_in, c2 -= e2.avail_out, e2.total_in += f2, e2.total_out += c2, r2.total += c2, r2.wrap && c2 && (e2.adler = r2.check = r2.flags ? B(r2.check, i2, c2, e2.next_out - c2) : O(r2.check, i2, c2, e2.next_out - c2)), e2.data_type = r2.bits + (r2.last ? 64 : 0) + (12 === r2.mode ? 128 : 0) + (20 === r2.mode || 15 === r2.mode ? 256 : 0), (0 == f2 && 0 === c2 || 4 === t2) && x === N && (x = -5), x);\n                        }, r.inflateEnd = function(e2) {\n                            if (!e2 || !e2.state) return U;\n                            var t2 = e2.state;\n                            return t2.window && (t2.window = null), e2.state = null, N;\n                        }, r.inflateGetHeader = function(e2, t2) {\n                            var r2;\n                            return e2 && e2.state ? 0 == (2 & (r2 = e2.state).wrap) ? U : ((r2.head = t2).done = false, N) : U;\n                        }, r.inflateSetDictionary = function(e2, t2) {\n                            var r2, n2 = t2.length;\n                            return e2 && e2.state ? 0 !== (r2 = e2.state).wrap && 11 !== r2.mode ? U : 11 === r2.mode && O(1, t2, n2, 0) !== r2.check ? -3 : Z(e2, t2, n2, n2) ? (r2.mode = 31, -4) : (r2.havedict = 1, N) : U;\n                        }, r.inflateInfo = \"pako inflate (from Nodeca project)\";\n                    },\n                    {\n                        \"../utils/common\": 41,\n                        \"./adler32\": 43,\n                        \"./crc32\": 45,\n                        \"./inffast\": 48,\n                        \"./inftrees\": 50\n                    }\n                ],\n                50: [\n                    function(e, t, r) {\n                        var D = e(\"../utils/common\"), F = [\n                            3,\n                            4,\n                            5,\n                            6,\n                            7,\n                            8,\n                            9,\n                            10,\n                            11,\n                            13,\n                            15,\n                            17,\n                            19,\n                            23,\n                            27,\n                            31,\n                            35,\n                            43,\n                            51,\n                            59,\n                            67,\n                            83,\n                            99,\n                            115,\n                            131,\n                            163,\n                            195,\n                            227,\n                            258,\n                            0,\n                            0\n                        ], N = [\n                            16,\n                            16,\n                            16,\n                            16,\n                            16,\n                            16,\n                            16,\n                            16,\n                            17,\n                            17,\n                            17,\n                            17,\n                            18,\n                            18,\n                            18,\n                            18,\n                            19,\n                            19,\n                            19,\n                            19,\n                            20,\n                            20,\n                            20,\n                            20,\n                            21,\n                            21,\n                            21,\n                            21,\n                            16,\n                            72,\n                            78\n                        ], U = [\n                            1,\n                            2,\n                            3,\n                            4,\n                            5,\n                            7,\n                            9,\n                            13,\n                            17,\n                            25,\n                            33,\n                            49,\n                            65,\n                            97,\n                            129,\n                            193,\n                            257,\n                            385,\n                            513,\n                            769,\n                            1025,\n                            1537,\n                            2049,\n                            3073,\n                            4097,\n                            6145,\n                            8193,\n                            12289,\n                            16385,\n                            24577,\n                            0,\n                            0\n                        ], P = [\n                            16,\n                            16,\n                            16,\n                            16,\n                            17,\n                            17,\n                            18,\n                            18,\n                            19,\n                            19,\n                            20,\n                            20,\n                            21,\n                            21,\n                            22,\n                            22,\n                            23,\n                            23,\n                            24,\n                            24,\n                            25,\n                            25,\n                            26,\n                            26,\n                            27,\n                            27,\n                            28,\n                            28,\n                            29,\n                            29,\n                            64,\n                            64\n                        ];\n                        t.exports = function(e2, t2, r2, n, i, s, a, o) {\n                            var h, u, l, f, c, d, p, m, _, g = o.bits, b = 0, v = 0, y = 0, w = 0, k = 0, x = 0, S = 0, z = 0, C = 0, E = 0, A = null, I = 0, O = new D.Buf16(16), B = new D.Buf16(16), R = null, T = 0;\n                            for(b = 0; b <= 15; b++)O[b] = 0;\n                            for(v = 0; v < n; v++)O[t2[r2 + v]]++;\n                            for(k = g, w = 15; 1 <= w && 0 === O[w]; w--);\n                            if (w < k && (k = w), 0 === w) return i[s++] = 20971520, i[s++] = 20971520, o.bits = 1, 0;\n                            for(y = 1; y < w && 0 === O[y]; y++);\n                            for(k < y && (k = y), b = z = 1; b <= 15; b++)if (z <<= 1, (z -= O[b]) < 0) return -1;\n                            if (0 < z && (0 === e2 || 1 !== w)) return -1;\n                            for(B[1] = 0, b = 1; b < 15; b++)B[b + 1] = B[b] + O[b];\n                            for(v = 0; v < n; v++)0 !== t2[r2 + v] && (a[B[t2[r2 + v]]++] = v);\n                            if (d = 0 === e2 ? (A = R = a, 19) : 1 === e2 ? (A = F, I -= 257, R = N, T -= 257, 256) : (A = U, R = P, -1), b = y, c = s, S = v = E = 0, l = -1, f = (C = 1 << (x = k)) - 1, 1 === e2 && 852 < C || 2 === e2 && 592 < C) return 1;\n                            for(;;){\n                                for(p = b - S, _ = a[v] < d ? (m = 0, a[v]) : a[v] > d ? (m = R[T + a[v]], A[I + a[v]]) : (m = 96, 0), h = 1 << b - S, y = u = 1 << x; i[c + (E >> S) + (u -= h)] = p << 24 | m << 16 | _ | 0, 0 !== u;);\n                                for(h = 1 << b - 1; E & h;)h >>= 1;\n                                if (0 !== h ? (E &= h - 1, E += h) : E = 0, v++, 0 == --O[b]) {\n                                    if (b === w) break;\n                                    b = t2[r2 + a[v]];\n                                }\n                                if (k < b && (E & f) !== l) {\n                                    for(0 === S && (S = k), c += y, z = 1 << (x = b - S); x + S < w && !((z -= O[x + S]) <= 0);)x++, z <<= 1;\n                                    if (C += 1 << x, 1 === e2 && 852 < C || 2 === e2 && 592 < C) return 1;\n                                    i[l = E & f] = k << 24 | x << 16 | c - s | 0;\n                                }\n                            }\n                            return 0 !== E && (i[c + E] = b - S << 24 | 64 << 16 | 0), o.bits = k, 0;\n                        };\n                    },\n                    {\n                        \"../utils/common\": 41\n                    }\n                ],\n                51: [\n                    function(e, t, r) {\n                        t.exports = {\n                            2: \"need dictionary\",\n                            1: \"stream end\",\n                            0: \"\",\n                            \"-1\": \"file error\",\n                            \"-2\": \"stream error\",\n                            \"-3\": \"data error\",\n                            \"-4\": \"insufficient memory\",\n                            \"-5\": \"buffer error\",\n                            \"-6\": \"incompatible version\"\n                        };\n                    },\n                    {}\n                ],\n                52: [\n                    function(e, t, r) {\n                        var i = e(\"../utils/common\"), o = 0, h = 1;\n                        function n(e2) {\n                            for(var t2 = e2.length; 0 <= --t2;)e2[t2] = 0;\n                        }\n                        var s = 0, a = 29, u = 256, l = u + 1 + a, f = 30, c = 19, _ = 2 * l + 1, g = 15, d = 16, p = 7, m = 256, b = 16, v = 17, y = 18, w = [\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            1,\n                            1,\n                            1,\n                            1,\n                            2,\n                            2,\n                            2,\n                            2,\n                            3,\n                            3,\n                            3,\n                            3,\n                            4,\n                            4,\n                            4,\n                            4,\n                            5,\n                            5,\n                            5,\n                            5,\n                            0\n                        ], k = [\n                            0,\n                            0,\n                            0,\n                            0,\n                            1,\n                            1,\n                            2,\n                            2,\n                            3,\n                            3,\n                            4,\n                            4,\n                            5,\n                            5,\n                            6,\n                            6,\n                            7,\n                            7,\n                            8,\n                            8,\n                            9,\n                            9,\n                            10,\n                            10,\n                            11,\n                            11,\n                            12,\n                            12,\n                            13,\n                            13\n                        ], x = [\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            0,\n                            2,\n                            3,\n                            7\n                        ], S = [\n                            16,\n                            17,\n                            18,\n                            0,\n                            8,\n                            7,\n                            9,\n                            6,\n                            10,\n                            5,\n                            11,\n                            4,\n                            12,\n                            3,\n                            13,\n                            2,\n                            14,\n                            1,\n                            15\n                        ], z = new Array(2 * (l + 2));\n                        n(z);\n                        var C = new Array(2 * f);\n                        n(C);\n                        var E = new Array(512);\n                        n(E);\n                        var A = new Array(256);\n                        n(A);\n                        var I = new Array(a);\n                        n(I);\n                        var O, B, R, T = new Array(f);\n                        function D(e2, t2, r2, n2, i2) {\n                            this.static_tree = e2, this.extra_bits = t2, this.extra_base = r2, this.elems = n2, this.max_length = i2, this.has_stree = e2 && e2.length;\n                        }\n                        function F(e2, t2) {\n                            this.dyn_tree = e2, this.max_code = 0, this.stat_desc = t2;\n                        }\n                        function N(e2) {\n                            return e2 < 256 ? E[e2] : E[256 + (e2 >>> 7)];\n                        }\n                        function U(e2, t2) {\n                            e2.pending_buf[e2.pending++] = 255 & t2, e2.pending_buf[e2.pending++] = t2 >>> 8 & 255;\n                        }\n                        function P(e2, t2, r2) {\n                            e2.bi_valid > d - r2 ? (e2.bi_buf |= t2 << e2.bi_valid & 65535, U(e2, e2.bi_buf), e2.bi_buf = t2 >> d - e2.bi_valid, e2.bi_valid += r2 - d) : (e2.bi_buf |= t2 << e2.bi_valid & 65535, e2.bi_valid += r2);\n                        }\n                        function L(e2, t2, r2) {\n                            P(e2, r2[2 * t2], r2[2 * t2 + 1]);\n                        }\n                        function j(e2, t2) {\n                            for(var r2 = 0; r2 |= 1 & e2, e2 >>>= 1, r2 <<= 1, 0 < --t2;);\n                            return r2 >>> 1;\n                        }\n                        function Z(e2, t2, r2) {\n                            var n2, i2, s2 = new Array(g + 1), a2 = 0;\n                            for(n2 = 1; n2 <= g; n2++)s2[n2] = a2 = a2 + r2[n2 - 1] << 1;\n                            for(i2 = 0; i2 <= t2; i2++){\n                                var o2 = e2[2 * i2 + 1];\n                                0 !== o2 && (e2[2 * i2] = j(s2[o2]++, o2));\n                            }\n                        }\n                        function W(e2) {\n                            var t2;\n                            for(t2 = 0; t2 < l; t2++)e2.dyn_ltree[2 * t2] = 0;\n                            for(t2 = 0; t2 < f; t2++)e2.dyn_dtree[2 * t2] = 0;\n                            for(t2 = 0; t2 < c; t2++)e2.bl_tree[2 * t2] = 0;\n                            e2.dyn_ltree[2 * m] = 1, e2.opt_len = e2.static_len = 0, e2.last_lit = e2.matches = 0;\n                        }\n                        function M(e2) {\n                            8 < e2.bi_valid ? U(e2, e2.bi_buf) : 0 < e2.bi_valid && (e2.pending_buf[e2.pending++] = e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0;\n                        }\n                        function H(e2, t2, r2, n2) {\n                            var i2 = 2 * t2, s2 = 2 * r2;\n                            return e2[i2] < e2[s2] || e2[i2] === e2[s2] && n2[t2] <= n2[r2];\n                        }\n                        function G(e2, t2, r2) {\n                            for(var n2 = e2.heap[r2], i2 = r2 << 1; i2 <= e2.heap_len && (i2 < e2.heap_len && H(t2, e2.heap[i2 + 1], e2.heap[i2], e2.depth) && i2++, !H(t2, n2, e2.heap[i2], e2.depth));)e2.heap[r2] = e2.heap[i2], r2 = i2, i2 <<= 1;\n                            e2.heap[r2] = n2;\n                        }\n                        function K(e2, t2, r2) {\n                            var n2, i2, s2, a2, o2 = 0;\n                            if (0 !== e2.last_lit) for(; n2 = e2.pending_buf[e2.d_buf + 2 * o2] << 8 | e2.pending_buf[e2.d_buf + 2 * o2 + 1], i2 = e2.pending_buf[e2.l_buf + o2], o2++, 0 === n2 ? L(e2, i2, t2) : (L(e2, (s2 = A[i2]) + u + 1, t2), 0 !== (a2 = w[s2]) && P(e2, i2 -= I[s2], a2), L(e2, s2 = N(--n2), r2), 0 !== (a2 = k[s2]) && P(e2, n2 -= T[s2], a2)), o2 < e2.last_lit;);\n                            L(e2, m, t2);\n                        }\n                        function Y(e2, t2) {\n                            var r2, n2, i2, s2 = t2.dyn_tree, a2 = t2.stat_desc.static_tree, o2 = t2.stat_desc.has_stree, h2 = t2.stat_desc.elems, u2 = -1;\n                            for(e2.heap_len = 0, e2.heap_max = _, r2 = 0; r2 < h2; r2++)0 !== s2[2 * r2] ? (e2.heap[++e2.heap_len] = u2 = r2, e2.depth[r2] = 0) : s2[2 * r2 + 1] = 0;\n                            for(; e2.heap_len < 2;)s2[2 * (i2 = e2.heap[++e2.heap_len] = u2 < 2 ? ++u2 : 0)] = 1, e2.depth[i2] = 0, e2.opt_len--, o2 && (e2.static_len -= a2[2 * i2 + 1]);\n                            for(t2.max_code = u2, r2 = e2.heap_len >> 1; 1 <= r2; r2--)G(e2, s2, r2);\n                            for(i2 = h2; r2 = e2.heap[1], e2.heap[1] = e2.heap[e2.heap_len--], G(e2, s2, 1), n2 = e2.heap[1], e2.heap[--e2.heap_max] = r2, e2.heap[--e2.heap_max] = n2, s2[2 * i2] = s2[2 * r2] + s2[2 * n2], e2.depth[i2] = (e2.depth[r2] >= e2.depth[n2] ? e2.depth[r2] : e2.depth[n2]) + 1, s2[2 * r2 + 1] = s2[2 * n2 + 1] = i2, e2.heap[1] = i2++, G(e2, s2, 1), 2 <= e2.heap_len;);\n                            e2.heap[--e2.heap_max] = e2.heap[1], function(e3, t3) {\n                                var r3, n3, i3, s3, a3, o3, h3 = t3.dyn_tree, u3 = t3.max_code, l2 = t3.stat_desc.static_tree, f2 = t3.stat_desc.has_stree, c2 = t3.stat_desc.extra_bits, d2 = t3.stat_desc.extra_base, p2 = t3.stat_desc.max_length, m2 = 0;\n                                for(s3 = 0; s3 <= g; s3++)e3.bl_count[s3] = 0;\n                                for(h3[2 * e3.heap[e3.heap_max] + 1] = 0, r3 = e3.heap_max + 1; r3 < _; r3++)p2 < (s3 = h3[2 * h3[2 * (n3 = e3.heap[r3]) + 1] + 1] + 1) && (s3 = p2, m2++), h3[2 * n3 + 1] = s3, u3 < n3 || (e3.bl_count[s3]++, a3 = 0, d2 <= n3 && (a3 = c2[n3 - d2]), o3 = h3[2 * n3], e3.opt_len += o3 * (s3 + a3), f2 && (e3.static_len += o3 * (l2[2 * n3 + 1] + a3)));\n                                if (0 !== m2) {\n                                    do {\n                                        for(s3 = p2 - 1; 0 === e3.bl_count[s3];)s3--;\n                                        e3.bl_count[s3]--, e3.bl_count[s3 + 1] += 2, e3.bl_count[p2]--, m2 -= 2;\n                                    }while (0 < m2);\n                                    for(s3 = p2; 0 !== s3; s3--)for(n3 = e3.bl_count[s3]; 0 !== n3;)u3 < (i3 = e3.heap[--r3]) || (h3[2 * i3 + 1] !== s3 && (e3.opt_len += (s3 - h3[2 * i3 + 1]) * h3[2 * i3], h3[2 * i3 + 1] = s3), n3--);\n                                }\n                            }(e2, t2), Z(s2, u2, e2.bl_count);\n                        }\n                        function X(e2, t2, r2) {\n                            var n2, i2, s2 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;\n                            for(0 === a2 && (h2 = 138, u2 = 3), t2[2 * (r2 + 1) + 1] = 65535, n2 = 0; n2 <= r2; n2++)i2 = a2, a2 = t2[2 * (n2 + 1) + 1], ++o2 < h2 && i2 === a2 || (o2 < u2 ? e2.bl_tree[2 * i2] += o2 : 0 !== i2 ? (i2 !== s2 && e2.bl_tree[2 * i2]++, e2.bl_tree[2 * b]++) : o2 <= 10 ? e2.bl_tree[2 * v]++ : e2.bl_tree[2 * y]++, s2 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4));\n                        }\n                        function V(e2, t2, r2) {\n                            var n2, i2, s2 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;\n                            for(0 === a2 && (h2 = 138, u2 = 3), n2 = 0; n2 <= r2; n2++)if (i2 = a2, a2 = t2[2 * (n2 + 1) + 1], !(++o2 < h2 && i2 === a2)) {\n                                if (o2 < u2) for(; L(e2, i2, e2.bl_tree), 0 != --o2;);\n                                else 0 !== i2 ? (i2 !== s2 && (L(e2, i2, e2.bl_tree), o2--), L(e2, b, e2.bl_tree), P(e2, o2 - 3, 2)) : o2 <= 10 ? (L(e2, v, e2.bl_tree), P(e2, o2 - 3, 3)) : (L(e2, y, e2.bl_tree), P(e2, o2 - 11, 7));\n                                s2 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4);\n                            }\n                        }\n                        n(T);\n                        var q = false;\n                        function J(e2, t2, r2, n2) {\n                            P(e2, (s << 1) + (n2 ? 1 : 0), 3), function(e3, t3, r3, n3) {\n                                M(e3), U(e3, r3), U(e3, ~r3), i.arraySet(e3.pending_buf, e3.window, t3, r3, e3.pending), e3.pending += r3;\n                            }(e2, t2, r2);\n                        }\n                        r._tr_init = function(e2) {\n                            q || (function() {\n                                var e3, t2, r2, n2, i2, s2 = new Array(g + 1);\n                                for(n2 = r2 = 0; n2 < a - 1; n2++)for(I[n2] = r2, e3 = 0; e3 < 1 << w[n2]; e3++)A[r2++] = n2;\n                                for(A[r2 - 1] = n2, n2 = i2 = 0; n2 < 16; n2++)for(T[n2] = i2, e3 = 0; e3 < 1 << k[n2]; e3++)E[i2++] = n2;\n                                for(i2 >>= 7; n2 < f; n2++)for(T[n2] = i2 << 7, e3 = 0; e3 < 1 << k[n2] - 7; e3++)E[256 + i2++] = n2;\n                                for(t2 = 0; t2 <= g; t2++)s2[t2] = 0;\n                                for(e3 = 0; e3 <= 143;)z[2 * e3 + 1] = 8, e3++, s2[8]++;\n                                for(; e3 <= 255;)z[2 * e3 + 1] = 9, e3++, s2[9]++;\n                                for(; e3 <= 279;)z[2 * e3 + 1] = 7, e3++, s2[7]++;\n                                for(; e3 <= 287;)z[2 * e3 + 1] = 8, e3++, s2[8]++;\n                                for(Z(z, l + 1, s2), e3 = 0; e3 < f; e3++)C[2 * e3 + 1] = 5, C[2 * e3] = j(e3, 5);\n                                O = new D(z, w, u + 1, l, g), B = new D(C, k, 0, f, g), R = new D(new Array(0), x, 0, c, p);\n                            }(), q = true), e2.l_desc = new F(e2.dyn_ltree, O), e2.d_desc = new F(e2.dyn_dtree, B), e2.bl_desc = new F(e2.bl_tree, R), e2.bi_buf = 0, e2.bi_valid = 0, W(e2);\n                        }, r._tr_stored_block = J, r._tr_flush_block = function(e2, t2, r2, n2) {\n                            var i2, s2, a2 = 0;\n                            0 < e2.level ? (2 === e2.strm.data_type && (e2.strm.data_type = function(e3) {\n                                var t3, r3 = 4093624447;\n                                for(t3 = 0; t3 <= 31; t3++, r3 >>>= 1)if (1 & r3 && 0 !== e3.dyn_ltree[2 * t3]) return o;\n                                if (0 !== e3.dyn_ltree[18] || 0 !== e3.dyn_ltree[20] || 0 !== e3.dyn_ltree[26]) return h;\n                                for(t3 = 32; t3 < u; t3++)if (0 !== e3.dyn_ltree[2 * t3]) return h;\n                                return o;\n                            }(e2)), Y(e2, e2.l_desc), Y(e2, e2.d_desc), a2 = function(e3) {\n                                var t3;\n                                for(X(e3, e3.dyn_ltree, e3.l_desc.max_code), X(e3, e3.dyn_dtree, e3.d_desc.max_code), Y(e3, e3.bl_desc), t3 = c - 1; 3 <= t3 && 0 === e3.bl_tree[2 * S[t3] + 1]; t3--);\n                                return e3.opt_len += 3 * (t3 + 1) + 5 + 5 + 4, t3;\n                            }(e2), i2 = e2.opt_len + 3 + 7 >>> 3, (s2 = e2.static_len + 3 + 7 >>> 3) <= i2 && (i2 = s2)) : i2 = s2 = r2 + 5, r2 + 4 <= i2 && -1 !== t2 ? J(e2, t2, r2, n2) : 4 === e2.strategy || s2 === i2 ? (P(e2, 2 + (n2 ? 1 : 0), 3), K(e2, z, C)) : (P(e2, 4 + (n2 ? 1 : 0), 3), function(e3, t3, r3, n3) {\n                                var i3;\n                                for(P(e3, t3 - 257, 5), P(e3, r3 - 1, 5), P(e3, n3 - 4, 4), i3 = 0; i3 < n3; i3++)P(e3, e3.bl_tree[2 * S[i3] + 1], 3);\n                                V(e3, e3.dyn_ltree, t3 - 1), V(e3, e3.dyn_dtree, r3 - 1);\n                            }(e2, e2.l_desc.max_code + 1, e2.d_desc.max_code + 1, a2 + 1), K(e2, e2.dyn_ltree, e2.dyn_dtree)), W(e2), n2 && M(e2);\n                        }, r._tr_tally = function(e2, t2, r2) {\n                            return e2.pending_buf[e2.d_buf + 2 * e2.last_lit] = t2 >>> 8 & 255, e2.pending_buf[e2.d_buf + 2 * e2.last_lit + 1] = 255 & t2, e2.pending_buf[e2.l_buf + e2.last_lit] = 255 & r2, e2.last_lit++, 0 === t2 ? e2.dyn_ltree[2 * r2]++ : (e2.matches++, t2--, e2.dyn_ltree[2 * (A[r2] + u + 1)]++, e2.dyn_dtree[2 * N(t2)]++), e2.last_lit === e2.lit_bufsize - 1;\n                        }, r._tr_align = function(e2) {\n                            P(e2, 2, 3), L(e2, m, z), function(e3) {\n                                16 === e3.bi_valid ? (U(e3, e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0) : 8 <= e3.bi_valid && (e3.pending_buf[e3.pending++] = 255 & e3.bi_buf, e3.bi_buf >>= 8, e3.bi_valid -= 8);\n                            }(e2);\n                        };\n                    },\n                    {\n                        \"../utils/common\": 41\n                    }\n                ],\n                53: [\n                    function(e, t, r) {\n                        t.exports = function() {\n                            this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = \"\", this.state = null, this.data_type = 2, this.adler = 0;\n                        };\n                    },\n                    {}\n                ],\n                54: [\n                    function(e, t, r) {\n                        (function(e2) {\n                            !function(r2, n) {\n                                if (!r2.setImmediate) {\n                                    var i, s, t2, a, o = 1, h = {}, u = false, l = r2.document, e3 = Object.getPrototypeOf && Object.getPrototypeOf(r2);\n                                    e3 = e3 && e3.setTimeout ? e3 : r2, i = \"[object process]\" === ({}).toString.call(r2.process) ? function(e4) {\n                                        process$1.nextTick(function() {\n                                            c(e4);\n                                        });\n                                    } : function() {\n                                        if (r2.postMessage && !r2.importScripts) {\n                                            var e4 = true, t3 = r2.onmessage;\n                                            return r2.onmessage = function() {\n                                                e4 = false;\n                                            }, r2.postMessage(\"\", \"*\"), r2.onmessage = t3, e4;\n                                        }\n                                    }() ? (a = \"setImmediate$\" + Math.random() + \"$\", r2.addEventListener ? r2.addEventListener(\"message\", d, false) : r2.attachEvent(\"onmessage\", d), function(e4) {\n                                        r2.postMessage(a + e4, \"*\");\n                                    }) : r2.MessageChannel ? ((t2 = new MessageChannel()).port1.onmessage = function(e4) {\n                                        c(e4.data);\n                                    }, function(e4) {\n                                        t2.port2.postMessage(e4);\n                                    }) : l && \"onreadystatechange\" in l.createElement(\"script\") ? (s = l.documentElement, function(e4) {\n                                        var t3 = l.createElement(\"script\");\n                                        t3.onreadystatechange = function() {\n                                            c(e4), t3.onreadystatechange = null, s.removeChild(t3), t3 = null;\n                                        }, s.appendChild(t3);\n                                    }) : function(e4) {\n                                        setTimeout(c, 0, e4);\n                                    }, e3.setImmediate = function(e4) {\n                                        \"function\" != typeof e4 && (e4 = new Function(\"\" + e4));\n                                        for(var t3 = new Array(arguments.length - 1), r3 = 0; r3 < t3.length; r3++)t3[r3] = arguments[r3 + 1];\n                                        var n2 = {\n                                            callback: e4,\n                                            args: t3\n                                        };\n                                        return h[o] = n2, i(o), o++;\n                                    }, e3.clearImmediate = f;\n                                }\n                                function f(e4) {\n                                    delete h[e4];\n                                }\n                                function c(e4) {\n                                    if (u) setTimeout(c, 0, e4);\n                                    else {\n                                        var t3 = h[e4];\n                                        if (t3) {\n                                            u = true;\n                                            try {\n                                                !function(e5) {\n                                                    var t4 = e5.callback, r3 = e5.args;\n                                                    switch(r3.length){\n                                                        case 0:\n                                                            t4();\n                                                            break;\n                                                        case 1:\n                                                            t4(r3[0]);\n                                                            break;\n                                                        case 2:\n                                                            t4(r3[0], r3[1]);\n                                                            break;\n                                                        case 3:\n                                                            t4(r3[0], r3[1], r3[2]);\n                                                            break;\n                                                        default:\n                                                            t4.apply(n, r3);\n                                                    }\n                                                }(t3);\n                                            } finally{\n                                                f(e4), u = false;\n                                            }\n                                        }\n                                    }\n                                }\n                                function d(e4) {\n                                    e4.source === r2 && \"string\" == typeof e4.data && 0 === e4.data.indexOf(a) && c(+e4.data.slice(a.length));\n                                }\n                            }(\"undefined\" == typeof self ? void 0 === e2 ? this : e2 : self);\n                        }).call(this, \"undefined\" != typeof commonjsGlobal ? commonjsGlobal : \"undefined\" != typeof self ? self :  false ? 0 : {});\n                    },\n                    {}\n                ]\n            }, {}, [\n                10\n            ])(10);\n        });\n    })(jszip_min);\n    return jszip_min.exports;\n}\nvar jszip_minExports = requireJszip_min();\nconst JSZip = /* @__PURE__ */ getDefaultExportFromCjs$1(jszip_minExports);\nvar xml$1 = {\n    exports: {}\n};\nvar escapeForXML_1;\nvar hasRequiredEscapeForXML;\nfunction requireEscapeForXML() {\n    if (hasRequiredEscapeForXML) return escapeForXML_1;\n    hasRequiredEscapeForXML = 1;\n    var XML_CHARACTER_MAP = {\n        \"&\": \"&amp;\",\n        '\"': \"&quot;\",\n        \"'\": \"&apos;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\"\n    };\n    function escapeForXML(string) {\n        return string && string.replace ? string.replace(/([&\"<>'])/g, function(str, item) {\n            return XML_CHARACTER_MAP[item];\n        }) : string;\n    }\n    escapeForXML_1 = escapeForXML;\n    return escapeForXML_1;\n}\nvar hasRequiredXml;\nfunction requireXml() {\n    if (hasRequiredXml) return xml$1.exports;\n    hasRequiredXml = 1;\n    var escapeForXML = requireEscapeForXML();\n    var Stream = requireStreamBrowserify().Stream;\n    var DEFAULT_INDENT = \"    \";\n    function xml2(input, options) {\n        if (typeof options !== \"object\") {\n            options = {\n                indent: options\n            };\n        }\n        var stream = options.stream ? new Stream() : null, output = \"\", interrupted = false, indent = !options.indent ? \"\" : options.indent === true ? DEFAULT_INDENT : options.indent, instant = true;\n        function delay(func) {\n            if (!instant) {\n                func();\n            } else {\n                process$1.nextTick(func);\n            }\n        }\n        function append(interrupt, out) {\n            if (out !== void 0) {\n                output += out;\n            }\n            if (interrupt && !interrupted) {\n                stream = stream || new Stream();\n                interrupted = true;\n            }\n            if (interrupt && interrupted) {\n                var data = output;\n                delay(function() {\n                    stream.emit(\"data\", data);\n                });\n                output = \"\";\n            }\n        }\n        function add(value, last) {\n            format(append, resolve(value, indent, indent ? 1 : 0), last);\n        }\n        function end() {\n            if (stream) {\n                var data = output;\n                delay(function() {\n                    stream.emit(\"data\", data);\n                    stream.emit(\"end\");\n                    stream.readable = false;\n                    stream.emit(\"close\");\n                });\n            }\n        }\n        function addXmlDeclaration(declaration) {\n            var encoding = declaration.encoding || \"UTF-8\", attr = {\n                version: \"1.0\",\n                encoding\n            };\n            if (declaration.standalone) {\n                attr.standalone = declaration.standalone;\n            }\n            add({\n                \"?xml\": {\n                    _attr: attr\n                }\n            });\n            output = output.replace(\"/>\", \"?>\");\n        }\n        delay(function() {\n            instant = false;\n        });\n        if (options.declaration) {\n            addXmlDeclaration(options.declaration);\n        }\n        if (input && input.forEach) {\n            input.forEach(function(value, i) {\n                var last;\n                if (i + 1 === input.length) last = end;\n                add(value, last);\n            });\n        } else {\n            add(input, end);\n        }\n        if (stream) {\n            stream.readable = true;\n            return stream;\n        }\n        return output;\n    }\n    function element() {\n        var input = Array.prototype.slice.call(arguments), self2 = {\n            _elem: resolve(input)\n        };\n        self2.push = function(input2) {\n            if (!this.append) {\n                throw new Error(\"not assigned to a parent!\");\n            }\n            var that = this;\n            var indent = this._elem.indent;\n            format(this.append, resolve(input2, indent, this._elem.icount + (indent ? 1 : 0)), function() {\n                that.append(true);\n            });\n        };\n        self2.close = function(input2) {\n            if (input2 !== void 0) {\n                this.push(input2);\n            }\n            if (this.end) {\n                this.end();\n            }\n        };\n        return self2;\n    }\n    function create_indent(character, count) {\n        return new Array(count || 0).join(character || \"\");\n    }\n    function resolve(data, indent, indent_count) {\n        indent_count = indent_count || 0;\n        var indent_spaces = create_indent(indent, indent_count);\n        var name;\n        var values = data;\n        var interrupt = false;\n        if (typeof data === \"object\") {\n            var keys = Object.keys(data);\n            name = keys[0];\n            values = data[name];\n            if (values && values._elem) {\n                values._elem.name = name;\n                values._elem.icount = indent_count;\n                values._elem.indent = indent;\n                values._elem.indents = indent_spaces;\n                values._elem.interrupt = values;\n                return values._elem;\n            }\n        }\n        var attributes = [], content = [];\n        var isStringContent;\n        function get_attributes(obj) {\n            var keys2 = Object.keys(obj);\n            keys2.forEach(function(key) {\n                attributes.push(attribute(key, obj[key]));\n            });\n        }\n        switch(typeof values){\n            case \"object\":\n                if (values === null) break;\n                if (values._attr) {\n                    get_attributes(values._attr);\n                }\n                if (values._cdata) {\n                    content.push((\"<![CDATA[\" + values._cdata).replace(/\\]\\]>/g, \"]]]]><![CDATA[>\") + \"]]>\");\n                }\n                if (values.forEach) {\n                    isStringContent = false;\n                    content.push(\"\");\n                    values.forEach(function(value) {\n                        if (typeof value == \"object\") {\n                            var _name = Object.keys(value)[0];\n                            if (_name == \"_attr\") {\n                                get_attributes(value._attr);\n                            } else {\n                                content.push(resolve(value, indent, indent_count + 1));\n                            }\n                        } else {\n                            content.pop();\n                            isStringContent = true;\n                            content.push(escapeForXML(value));\n                        }\n                    });\n                    if (!isStringContent) {\n                        content.push(\"\");\n                    }\n                }\n                break;\n            default:\n                content.push(escapeForXML(values));\n        }\n        return {\n            name,\n            interrupt,\n            attributes,\n            content,\n            icount: indent_count,\n            indents: indent_spaces,\n            indent\n        };\n    }\n    function format(append, elem, end) {\n        if (typeof elem != \"object\") {\n            return append(false, elem);\n        }\n        var len = elem.interrupt ? 1 : elem.content.length;\n        function proceed() {\n            while(elem.content.length){\n                var value = elem.content.shift();\n                if (value === void 0) continue;\n                if (interrupt(value)) return;\n                format(append, value);\n            }\n            append(false, (len > 1 ? elem.indents : \"\") + (elem.name ? \"</\" + elem.name + \">\" : \"\") + (elem.indent && !end ? \"\\n\" : \"\"));\n            if (end) {\n                end();\n            }\n        }\n        function interrupt(value) {\n            if (value.interrupt) {\n                value.interrupt.append = append;\n                value.interrupt.end = proceed;\n                value.interrupt = false;\n                append(true);\n                return true;\n            }\n            return false;\n        }\n        append(false, elem.indents + (elem.name ? \"<\" + elem.name : \"\") + (elem.attributes.length ? \" \" + elem.attributes.join(\" \") : \"\") + (len ? elem.name ? \">\" : \"\" : elem.name ? \"/>\" : \"\") + (elem.indent && len > 1 ? \"\\n\" : \"\"));\n        if (!len) {\n            return append(false, elem.indent ? \"\\n\" : \"\");\n        }\n        if (!interrupt(elem)) {\n            proceed();\n        }\n    }\n    function attribute(key, value) {\n        return key + '=\"' + escapeForXML(value) + '\"';\n    }\n    xml$1.exports = xml2;\n    xml$1.exports.element = xml$1.exports.Element = element;\n    return xml$1.exports;\n}\nvar xmlExports = requireXml();\nconst xml = /* @__PURE__ */ getDefaultExportFromCjs$1(xmlExports);\nconst obfuscatedStartOffset = 0;\nconst obfuscatedEndOffset = 32;\nconst guidSize = 32;\nconst obfuscate = (buf, fontKey)=>{\n    const guid = fontKey.replace(/-/g, \"\");\n    if (guid.length !== guidSize) {\n        throw new Error(`Error: Cannot extract GUID from font filename: ${fontKey}`);\n    }\n    const hexStrings = guid.replace(/(..)/g, \"$1 \").trim().split(\" \");\n    const hexNumbers = hexStrings.map((hexString)=>parseInt(hexString, 16));\n    hexNumbers.reverse();\n    const bytesToObfuscate = buf.slice(obfuscatedStartOffset, obfuscatedEndOffset);\n    const obfuscatedBytes = bytesToObfuscate.map((byte, i)=>byte ^ hexNumbers[i % hexNumbers.length]);\n    const out = new Uint8Array(obfuscatedStartOffset + obfuscatedBytes.length + Math.max(0, buf.length - obfuscatedEndOffset));\n    out.set(buf.slice(0, obfuscatedStartOffset));\n    out.set(obfuscatedBytes, obfuscatedStartOffset);\n    out.set(buf.slice(obfuscatedEndOffset), obfuscatedStartOffset + obfuscatedBytes.length);\n    return out;\n};\nclass Formatter {\n    format(input, context = {\n        stack: []\n    }) {\n        const output = input.prepForXml(context);\n        if (output) {\n            return output;\n        } else {\n            throw Error(\"XMLComponent did not format correctly\");\n        }\n    }\n}\nclass ImageReplacer {\n    replace(xmlData, mediaData, offset) {\n        let currentXmlData = xmlData;\n        mediaData.forEach((image, i)=>{\n            currentXmlData = currentXmlData.replace(new RegExp(`{${image.fileName}}`, \"g\"), (offset + i).toString());\n        });\n        return currentXmlData;\n    }\n    getMediaData(xmlData, media) {\n        return media.Array.filter((image)=>xmlData.search(`{${image.fileName}}`) > 0);\n    }\n}\nclass NumberingReplacer {\n    replace(xmlData, concreteNumberings) {\n        let currentXmlData = xmlData;\n        for (const concreteNumbering of concreteNumberings){\n            currentXmlData = currentXmlData.replace(new RegExp(`{${concreteNumbering.reference}-${concreteNumbering.instance}}`, \"g\"), concreteNumbering.numId.toString());\n        }\n        return currentXmlData;\n    }\n}\nclass Compiler {\n    constructor(){\n        __publicField(this, \"formatter\");\n        __publicField(this, \"imageReplacer\");\n        __publicField(this, \"numberingReplacer\");\n        this.formatter = new Formatter();\n        this.imageReplacer = new ImageReplacer();\n        this.numberingReplacer = new NumberingReplacer();\n    }\n    compile(file, prettifyXml, overrides = []) {\n        const zip = new JSZip();\n        const xmlifiedFileMapping = this.xmlifyFile(file, prettifyXml);\n        const map = new Map(Object.entries(xmlifiedFileMapping));\n        for (const [, obj] of map){\n            if (Array.isArray(obj)) {\n                for (const subFile of obj){\n                    zip.file(subFile.path, subFile.data);\n                }\n            } else {\n                zip.file(obj.path, obj.data);\n            }\n        }\n        for (const subFile of overrides){\n            zip.file(subFile.path, subFile.data);\n        }\n        for (const data of file.Media.Array){\n            if (data.type !== \"svg\") {\n                zip.file(`word/media/${data.fileName}`, data.data);\n            } else {\n                zip.file(`word/media/${data.fileName}`, data.data);\n                zip.file(`word/media/${data.fallback.fileName}`, data.fallback.data);\n            }\n        }\n        for (const { data: buffer2, name, fontKey } of file.FontTable.fontOptionsWithKey){\n            const [nameWithoutExtension] = name.split(\".\");\n            zip.file(`word/fonts/${nameWithoutExtension}.odttf`, obfuscate(buffer2, fontKey));\n        }\n        return zip;\n    }\n    xmlifyFile(file, prettify) {\n        const documentRelationshipCount = file.Document.Relationships.RelationshipCount + 1;\n        const documentXmlData = xml(this.formatter.format(file.Document.View, {\n            viewWrapper: file.Document,\n            file,\n            stack: []\n        }), {\n            indent: prettify,\n            declaration: {\n                standalone: \"yes\",\n                encoding: \"UTF-8\"\n            }\n        });\n        const commentRelationshipCount = file.Comments.Relationships.RelationshipCount + 1;\n        const commentXmlData = xml(this.formatter.format(file.Comments, {\n            viewWrapper: {\n                View: file.Comments,\n                Relationships: file.Comments.Relationships\n            },\n            file,\n            stack: []\n        }), {\n            indent: prettify,\n            declaration: {\n                standalone: \"yes\",\n                encoding: \"UTF-8\"\n            }\n        });\n        const documentMediaDatas = this.imageReplacer.getMediaData(documentXmlData, file.Media);\n        const commentMediaDatas = this.imageReplacer.getMediaData(commentXmlData, file.Media);\n        return {\n            Relationships: {\n                data: (()=>{\n                    documentMediaDatas.forEach((mediaData, i)=>{\n                        file.Document.Relationships.createRelationship(documentRelationshipCount + i, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\", `media/${mediaData.fileName}`);\n                    });\n                    file.Document.Relationships.createRelationship(file.Document.Relationships.RelationshipCount + 1, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\", \"fontTable.xml\");\n                    return xml(this.formatter.format(file.Document.Relationships, {\n                        viewWrapper: file.Document,\n                        file,\n                        stack: []\n                    }), {\n                        indent: prettify,\n                        declaration: {\n                            encoding: \"UTF-8\"\n                        }\n                    });\n                })(),\n                path: \"word/_rels/document.xml.rels\"\n            },\n            Document: {\n                data: (()=>{\n                    const xmlData = this.imageReplacer.replace(documentXmlData, documentMediaDatas, documentRelationshipCount);\n                    const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n                    return referenedXmlData;\n                })(),\n                path: \"word/document.xml\"\n            },\n            Styles: {\n                data: (()=>{\n                    const xmlStyles = xml(this.formatter.format(file.Styles, {\n                        viewWrapper: file.Document,\n                        file,\n                        stack: []\n                    }), {\n                        indent: prettify,\n                        declaration: {\n                            standalone: \"yes\",\n                            encoding: \"UTF-8\"\n                        }\n                    });\n                    const referencedXmlStyles = this.numberingReplacer.replace(xmlStyles, file.Numbering.ConcreteNumbering);\n                    return referencedXmlStyles;\n                })(),\n                path: \"word/styles.xml\"\n            },\n            Properties: {\n                data: xml(this.formatter.format(file.CoreProperties, {\n                    viewWrapper: file.Document,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        standalone: \"yes\",\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"docProps/core.xml\"\n            },\n            Numbering: {\n                data: xml(this.formatter.format(file.Numbering, {\n                    viewWrapper: file.Document,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        standalone: \"yes\",\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"word/numbering.xml\"\n            },\n            FileRelationships: {\n                data: xml(this.formatter.format(file.FileRelationships, {\n                    viewWrapper: file.Document,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"_rels/.rels\"\n            },\n            HeaderRelationships: file.Headers.map((headerWrapper, index)=>{\n                const xmlData = xml(this.formatter.format(headerWrapper.View, {\n                    viewWrapper: headerWrapper,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        encoding: \"UTF-8\"\n                    }\n                });\n                const mediaDatas = this.imageReplacer.getMediaData(xmlData, file.Media);\n                mediaDatas.forEach((mediaData, i)=>{\n                    headerWrapper.Relationships.createRelationship(i, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\", `media/${mediaData.fileName}`);\n                });\n                return {\n                    data: xml(this.formatter.format(headerWrapper.Relationships, {\n                        viewWrapper: headerWrapper,\n                        file,\n                        stack: []\n                    }), {\n                        indent: prettify,\n                        declaration: {\n                            encoding: \"UTF-8\"\n                        }\n                    }),\n                    path: `word/_rels/header${index + 1}.xml.rels`\n                };\n            }),\n            FooterRelationships: file.Footers.map((footerWrapper, index)=>{\n                const xmlData = xml(this.formatter.format(footerWrapper.View, {\n                    viewWrapper: footerWrapper,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        encoding: \"UTF-8\"\n                    }\n                });\n                const mediaDatas = this.imageReplacer.getMediaData(xmlData, file.Media);\n                mediaDatas.forEach((mediaData, i)=>{\n                    footerWrapper.Relationships.createRelationship(i, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\", `media/${mediaData.fileName}`);\n                });\n                return {\n                    data: xml(this.formatter.format(footerWrapper.Relationships, {\n                        viewWrapper: footerWrapper,\n                        file,\n                        stack: []\n                    }), {\n                        indent: prettify,\n                        declaration: {\n                            encoding: \"UTF-8\"\n                        }\n                    }),\n                    path: `word/_rels/footer${index + 1}.xml.rels`\n                };\n            }),\n            Headers: file.Headers.map((headerWrapper, index)=>{\n                const tempXmlData = xml(this.formatter.format(headerWrapper.View, {\n                    viewWrapper: headerWrapper,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        encoding: \"UTF-8\"\n                    }\n                });\n                const mediaDatas = this.imageReplacer.getMediaData(tempXmlData, file.Media);\n                const xmlData = this.imageReplacer.replace(tempXmlData, mediaDatas, 0);\n                const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n                return {\n                    data: referenedXmlData,\n                    path: `word/header${index + 1}.xml`\n                };\n            }),\n            Footers: file.Footers.map((footerWrapper, index)=>{\n                const tempXmlData = xml(this.formatter.format(footerWrapper.View, {\n                    viewWrapper: footerWrapper,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        encoding: \"UTF-8\"\n                    }\n                });\n                const mediaDatas = this.imageReplacer.getMediaData(tempXmlData, file.Media);\n                const xmlData = this.imageReplacer.replace(tempXmlData, mediaDatas, 0);\n                const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n                return {\n                    data: referenedXmlData,\n                    path: `word/footer${index + 1}.xml`\n                };\n            }),\n            ContentTypes: {\n                data: xml(this.formatter.format(file.ContentTypes, {\n                    viewWrapper: file.Document,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"[Content_Types].xml\"\n            },\n            CustomProperties: {\n                data: xml(this.formatter.format(file.CustomProperties, {\n                    viewWrapper: file.Document,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        standalone: \"yes\",\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"docProps/custom.xml\"\n            },\n            AppProperties: {\n                data: xml(this.formatter.format(file.AppProperties, {\n                    viewWrapper: file.Document,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        standalone: \"yes\",\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"docProps/app.xml\"\n            },\n            FootNotes: {\n                data: xml(this.formatter.format(file.FootNotes.View, {\n                    viewWrapper: file.FootNotes,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"word/footnotes.xml\"\n            },\n            FootNotesRelationships: {\n                data: xml(this.formatter.format(file.FootNotes.Relationships, {\n                    viewWrapper: file.FootNotes,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"word/_rels/footnotes.xml.rels\"\n            },\n            Settings: {\n                data: xml(this.formatter.format(file.Settings, {\n                    viewWrapper: file.Document,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        standalone: \"yes\",\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"word/settings.xml\"\n            },\n            Comments: {\n                data: (()=>{\n                    const xmlData = this.imageReplacer.replace(commentXmlData, commentMediaDatas, commentRelationshipCount);\n                    const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);\n                    return referenedXmlData;\n                })(),\n                path: \"word/comments.xml\"\n            },\n            CommentsRelationships: {\n                data: (()=>{\n                    commentMediaDatas.forEach((mediaData, i)=>{\n                        file.Comments.Relationships.createRelationship(commentRelationshipCount + i, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\", `media/${mediaData.fileName}`);\n                    });\n                    return xml(this.formatter.format(file.Comments.Relationships, {\n                        viewWrapper: {\n                            View: file.Comments,\n                            Relationships: file.Comments.Relationships\n                        },\n                        file,\n                        stack: []\n                    }), {\n                        indent: prettify,\n                        declaration: {\n                            encoding: \"UTF-8\"\n                        }\n                    });\n                })(),\n                path: \"word/_rels/comments.xml.rels\"\n            },\n            FontTable: {\n                data: xml(this.formatter.format(file.FontTable.View, {\n                    viewWrapper: file.Document,\n                    file,\n                    stack: []\n                }), {\n                    indent: prettify,\n                    declaration: {\n                        standalone: \"yes\",\n                        encoding: \"UTF-8\"\n                    }\n                }),\n                path: \"word/fontTable.xml\"\n            },\n            FontTableRelationships: {\n                data: (()=>xml(this.formatter.format(file.FontTable.Relationships, {\n                        viewWrapper: file.Document,\n                        file,\n                        stack: []\n                    }), {\n                        indent: prettify,\n                        declaration: {\n                            encoding: \"UTF-8\"\n                        }\n                    }))(),\n                path: \"word/_rels/fontTable.xml.rels\"\n            }\n        };\n    }\n}\nconst PrettifyType = {\n    NONE: \"\",\n    WITH_2_BLANKS: \"  \",\n    WITH_4_BLANKS: \"    \",\n    WITH_TAB: \"\t\"\n};\nconst convertPrettifyType = (prettify)=>prettify === true ? PrettifyType.WITH_2_BLANKS : prettify === false ? void 0 : prettify;\nconst _Packer = class _Packer {\n    // eslint-disable-next-line require-await\n    static pack(_0, _12, _2) {\n        return __async(this, arguments, function*(file, type2, prettify, overrides = []) {\n            const zip = this.compiler.compile(file, convertPrettifyType(prettify), overrides);\n            return zip.generateAsync({\n                type: type2,\n                mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n                compression: \"DEFLATE\"\n            });\n        });\n    }\n    static toString(file, prettify, overrides = []) {\n        return _Packer.pack(file, \"string\", prettify, overrides);\n    }\n    static toBuffer(file, prettify, overrides = []) {\n        return _Packer.pack(file, \"nodebuffer\", prettify, overrides);\n    }\n    static toBase64String(file, prettify, overrides = []) {\n        return _Packer.pack(file, \"base64\", prettify, overrides);\n    }\n    static toBlob(file, prettify, overrides = []) {\n        return _Packer.pack(file, \"blob\", prettify, overrides);\n    }\n    static toArrayBuffer(file, prettify, overrides = []) {\n        return _Packer.pack(file, \"arraybuffer\", prettify, overrides);\n    }\n    static toStream(file, prettify, overrides = []) {\n        const stream = new streamBrowserifyExports.Stream();\n        const zip = this.compiler.compile(file, convertPrettifyType(prettify), overrides);\n        zip.generateAsync({\n            type: \"nodebuffer\",\n            mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n            compression: \"DEFLATE\"\n        }).then((z)=>{\n            stream.emit(\"data\", z);\n            stream.emit(\"end\");\n        });\n        return stream;\n    }\n};\n__publicField(_Packer, \"compiler\", new Compiler());\nlet Packer = _Packer;\nconst formatter$1 = new Formatter();\nconst toJson = (xmlData)=>{\n    const xmlObj = libExports.xml2js(xmlData, {\n        compact: false,\n        captureSpacesBetweenElements: true\n    });\n    return xmlObj;\n};\nconst createTextElementContents = (text)=>{\n    var _a;\n    const textJson = toJson(xml(formatter$1.format(new Text({\n        text\n    }))));\n    return (_a = textJson.elements[0].elements) != null ? _a : [];\n};\nconst patchSpaceAttribute = (element)=>__spreadProps(__spreadValues({}, element), {\n        attributes: {\n            \"xml:space\": \"preserve\"\n        }\n    });\nconst getFirstLevelElements = (relationships, id)=>{\n    var _a, _b;\n    return (_b = (_a = relationships.elements) == null ? void 0 : _a.filter((e)=>e.name === id)[0].elements) != null ? _b : [];\n};\nconst appendContentType = (element, contentType, extension)=>{\n    const relationshipElements = getFirstLevelElements(element, \"Types\");\n    const exist = relationshipElements.some((el)=>{\n        var _a, _b;\n        return el.type === \"element\" && el.name === \"Default\" && ((_a = el == null ? void 0 : el.attributes) == null ? void 0 : _a.ContentType) === contentType && ((_b = el == null ? void 0 : el.attributes) == null ? void 0 : _b.Extension) === extension;\n    });\n    if (exist) {\n        return;\n    }\n    relationshipElements.push({\n        attributes: {\n            ContentType: contentType,\n            Extension: extension\n        },\n        name: \"Default\",\n        type: \"element\"\n    });\n};\nconst getIdFromRelationshipId = (relationshipId)=>{\n    const output = parseInt(relationshipId.substring(3), 10);\n    return isNaN(output) ? 0 : output;\n};\nconst getNextRelationshipIndex = (relationships)=>{\n    const relationshipElements = getFirstLevelElements(relationships, \"Relationships\");\n    return relationshipElements.map((e)=>{\n        var _a, _b, _c;\n        return getIdFromRelationshipId((_c = (_b = (_a = e.attributes) == null ? void 0 : _a.Id) == null ? void 0 : _b.toString()) != null ? _c : \"\");\n    }).reduce((acc, curr)=>Math.max(acc, curr), 0) + 1;\n};\nconst appendRelationship = (relationships, id, type2, target, targetMode)=>{\n    const relationshipElements = getFirstLevelElements(relationships, \"Relationships\");\n    relationshipElements.push({\n        attributes: {\n            Id: `rId${id}`,\n            Type: type2,\n            Target: target,\n            TargetMode: targetMode\n        },\n        name: \"Relationship\",\n        type: \"element\"\n    });\n    return relationshipElements;\n};\nconst findRunElementIndexWithToken = (paragraphElement, token)=>{\n    var _a, _b, _c, _d;\n    for(let i = 0; i < ((_a = paragraphElement.elements) != null ? _a : []).length; i++){\n        const element = paragraphElement.elements[i];\n        if (element.type === \"element\" && element.name === \"w:r\") {\n            const textElement = ((_b = element.elements) != null ? _b : []).filter((e)=>e.type === \"element\" && e.name === \"w:t\");\n            for (const text of textElement){\n                if (!((_c = text.elements) == null ? void 0 : _c[0])) {\n                    continue;\n                }\n                if ((_d = text.elements[0].text) == null ? void 0 : _d.includes(token)) {\n                    return i;\n                }\n            }\n        }\n    }\n    throw new Error(\"Token not found\");\n};\nconst splitRunElement = (runElement, token)=>{\n    var _a, _b;\n    let splitIndex = 0;\n    const splitElements = (_b = (_a = runElement.elements) == null ? void 0 : _a.map((e, i)=>{\n        var _a2, _b2, _c;\n        if (e.type === \"element\" && e.name === \"w:t\") {\n            const text = (_c = (_b2 = (_a2 = e.elements) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.text) != null ? _c : \"\";\n            const splitText = text.split(token);\n            const newElements = splitText.map((t)=>__spreadProps(__spreadValues(__spreadValues({}, e), patchSpaceAttribute(e)), {\n                    elements: createTextElementContents(t)\n                }));\n            splitIndex = i;\n            return newElements;\n        } else {\n            return e;\n        }\n    }).flat()) != null ? _b : [];\n    const leftRunElement = __spreadProps(__spreadValues({}, JSON.parse(JSON.stringify(runElement))), {\n        elements: splitElements.slice(0, splitIndex + 1)\n    });\n    const rightRunElement = __spreadProps(__spreadValues({}, JSON.parse(JSON.stringify(runElement))), {\n        elements: splitElements.slice(splitIndex + 1)\n    });\n    return {\n        left: leftRunElement,\n        right: rightRunElement\n    };\n};\nconst ReplaceMode = {\n    START: 0,\n    MIDDLE: 1,\n    END: 2\n};\nconst replaceTokenInParagraphElement = ({ paragraphElement, renderedParagraph, originalText, replacementText })=>{\n    const startIndex = renderedParagraph.text.indexOf(originalText);\n    const endIndex = startIndex + originalText.length - 1;\n    let replaceMode = ReplaceMode.START;\n    for (const run of renderedParagraph.runs){\n        for (const { text, index, start, end } of run.parts){\n            switch(replaceMode){\n                case ReplaceMode.START:\n                    if (startIndex >= start) {\n                        const offsetStartIndex = startIndex - start;\n                        const offsetEndIndex = Math.min(endIndex, end) - start;\n                        const partToReplace = run.text.substring(offsetStartIndex, offsetEndIndex + 1);\n                        if (partToReplace === \"\") {\n                            continue;\n                        }\n                        const firstPart = text.replace(partToReplace, replacementText);\n                        patchTextElement(paragraphElement.elements[run.index].elements[index], firstPart);\n                        replaceMode = ReplaceMode.MIDDLE;\n                        continue;\n                    }\n                    break;\n                case ReplaceMode.MIDDLE:\n                    if (endIndex <= end) {\n                        const lastPart = text.substring(endIndex - start + 1);\n                        patchTextElement(paragraphElement.elements[run.index].elements[index], lastPart);\n                        const currentElement = paragraphElement.elements[run.index].elements[index];\n                        paragraphElement.elements[run.index].elements[index] = patchSpaceAttribute(currentElement);\n                        replaceMode = ReplaceMode.END;\n                    } else {\n                        patchTextElement(paragraphElement.elements[run.index].elements[index], \"\");\n                    }\n                    break;\n            }\n        }\n    }\n    return paragraphElement;\n};\nconst patchTextElement = (element, text)=>{\n    element.elements = createTextElementContents(text);\n    return element;\n};\nconst renderParagraphNode = (node)=>{\n    if (node.element.name !== \"w:p\") {\n        throw new Error(`Invalid node type: ${node.element.name}`);\n    }\n    if (!node.element.elements) {\n        return {\n            text: \"\",\n            runs: [],\n            index: -1,\n            pathToParagraph: []\n        };\n    }\n    let currentRunStringLength = 0;\n    const runs = node.element.elements.map((element, i)=>({\n            element,\n            i\n        })).filter(({ element })=>element.name === \"w:r\").map(({ element, i })=>{\n        const renderedRunNode = renderRunNode(element, i, currentRunStringLength);\n        currentRunStringLength += renderedRunNode.text.length;\n        return renderedRunNode;\n    }).filter((e)=>!!e);\n    const text = runs.reduce((acc, curr)=>acc + curr.text, \"\");\n    return {\n        text,\n        runs,\n        index: node.index,\n        pathToParagraph: buildNodePath(node)\n    };\n};\nconst renderRunNode = (node, index, currentRunStringIndex)=>{\n    if (!node.elements) {\n        return {\n            text: \"\",\n            parts: [],\n            index: -1,\n            start: currentRunStringIndex,\n            end: currentRunStringIndex\n        };\n    }\n    let currentTextStringIndex = currentRunStringIndex;\n    const parts = node.elements.map((element, i)=>{\n        var _a, _b;\n        return element.name === \"w:t\" && element.elements && element.elements.length > 0 ? {\n            text: (_b = (_a = element.elements[0].text) == null ? void 0 : _a.toString()) != null ? _b : \"\",\n            index: i,\n            start: currentTextStringIndex,\n            end: (()=>{\n                var _a2, _b2;\n                currentTextStringIndex += ((_b2 = (_a2 = element.elements[0].text) == null ? void 0 : _a2.toString()) != null ? _b2 : \"\").length - 1;\n                return currentTextStringIndex;\n            })()\n        } : void 0;\n    }).filter((e)=>!!e).map((e)=>e);\n    const text = parts.reduce((acc, curr)=>acc + curr.text, \"\");\n    return {\n        text,\n        parts,\n        index,\n        start: currentRunStringIndex,\n        end: currentTextStringIndex\n    };\n};\nconst buildNodePath = (node)=>node.parent ? [\n        ...buildNodePath(node.parent),\n        node.index\n    ] : [\n        node.index\n    ];\nconst elementsToWrapper = (wrapper)=>{\n    var _a, _b;\n    return (_b = (_a = wrapper.element.elements) == null ? void 0 : _a.map((e, i)=>({\n            element: e,\n            index: i,\n            parent: wrapper\n        }))) != null ? _b : [];\n};\nconst traverse = (node)=>{\n    let renderedParagraphs = [];\n    const queue2 = [\n        ...elementsToWrapper({\n            element: node,\n            index: 0,\n            parent: void 0\n        })\n    ];\n    let currentNode;\n    while(queue2.length > 0){\n        currentNode = queue2.shift();\n        if (currentNode.element.name === \"w:p\") {\n            renderedParagraphs = [\n                ...renderedParagraphs,\n                renderParagraphNode(currentNode)\n            ];\n        }\n        queue2.push(...elementsToWrapper(currentNode));\n    }\n    return renderedParagraphs;\n};\nconst findLocationOfText = (node, text)=>traverse(node).filter((p)=>p.text.includes(text));\nconst formatter = new Formatter();\nconst SPLIT_TOKEN = \"ɵ\";\nconst replacer = ({ json, patch, patchText, context, keepOriginalStyles = true })=>{\n    const renderedParagraphs = findLocationOfText(json, patchText);\n    if (renderedParagraphs.length === 0) {\n        return {\n            element: json,\n            didFindOccurrence: false\n        };\n    }\n    for (const renderedParagraph of renderedParagraphs){\n        const textJson = patch.children.map((c)=>toJson(xml(formatter.format(c, context)))).map((c)=>c.elements[0]);\n        switch(patch.type){\n            case PatchType.DOCUMENT:\n                {\n                    const parentElement = goToParentElementFromPath(json, renderedParagraph.pathToParagraph);\n                    const elementIndex = getLastElementIndexFromPath(renderedParagraph.pathToParagraph);\n                    parentElement.elements.splice(elementIndex, 1, ...textJson);\n                    break;\n                }\n            case PatchType.PARAGRAPH:\n            default:\n                {\n                    const paragraphElement = goToElementFromPath(json, renderedParagraph.pathToParagraph);\n                    replaceTokenInParagraphElement({\n                        paragraphElement,\n                        renderedParagraph,\n                        originalText: patchText,\n                        replacementText: SPLIT_TOKEN\n                    });\n                    const index = findRunElementIndexWithToken(paragraphElement, SPLIT_TOKEN);\n                    const runElementToBeReplaced = paragraphElement.elements[index];\n                    const { left, right } = splitRunElement(runElementToBeReplaced, SPLIT_TOKEN);\n                    let newRunElements = textJson;\n                    let patchedRightElement = right;\n                    if (keepOriginalStyles) {\n                        const runElementNonTextualElements = runElementToBeReplaced.elements.filter((e)=>e.type === \"element\" && e.name === \"w:rPr\");\n                        newRunElements = textJson.map((e)=>{\n                            var _a;\n                            return __spreadProps(__spreadValues({}, e), {\n                                elements: [\n                                    ...runElementNonTextualElements,\n                                    ...(_a = e.elements) != null ? _a : []\n                                ]\n                            });\n                        });\n                        patchedRightElement = __spreadProps(__spreadValues({}, right), {\n                            elements: [\n                                ...runElementNonTextualElements,\n                                ...right.elements\n                            ]\n                        });\n                    }\n                    paragraphElement.elements.splice(index, 1, left, ...newRunElements, patchedRightElement);\n                    break;\n                }\n        }\n    }\n    return {\n        element: json,\n        didFindOccurrence: true\n    };\n};\nconst goToElementFromPath = (json, path)=>{\n    let element = json;\n    for(let i = 1; i < path.length; i++){\n        const index = path[i];\n        const nextElements = element.elements;\n        element = nextElements[index];\n    }\n    return element;\n};\nconst goToParentElementFromPath = (json, path)=>goToElementFromPath(json, path.slice(0, path.length - 1));\nconst getLastElementIndexFromPath = (path)=>path[path.length - 1];\nconst PatchType = {\n    DOCUMENT: \"file\",\n    PARAGRAPH: \"paragraph\"\n};\nconst imageReplacer = new ImageReplacer();\nconst UTF16LE = new Uint8Array([\n    255,\n    254\n]);\nconst UTF16BE = new Uint8Array([\n    254,\n    255\n]);\nconst compareByteArrays = (a, b)=>{\n    if (a.length !== b.length) {\n        return false;\n    }\n    for(let i = 0; i < a.length; i++){\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst patchDocument = (_0)=>__async(void 0, [\n        _0\n    ], function*({ outputType, data, patches, keepOriginalStyles, placeholderDelimiters = {\n        start: \"{{\",\n        end: \"}}\"\n    }, /**\n   * Search for occurrences over patched document\n   */ recursive = true }) {\n        var _a, _b, _c;\n        const zipContent = data instanceof JSZip ? data : yield JSZip.loadAsync(data);\n        const contexts = /* @__PURE__ */ new Map();\n        const file = {\n            Media: new Media()\n        };\n        const map = /* @__PURE__ */ new Map();\n        const imageRelationshipAdditions = [];\n        const hyperlinkRelationshipAdditions = [];\n        let hasMedia = false;\n        const binaryContentMap = /* @__PURE__ */ new Map();\n        for (const [key, value] of Object.entries(zipContent.files)){\n            const binaryValue = yield value.async(\"uint8array\");\n            const startBytes = binaryValue.slice(0, 2);\n            if (compareByteArrays(startBytes, UTF16LE) || compareByteArrays(startBytes, UTF16BE)) {\n                binaryContentMap.set(key, binaryValue);\n                continue;\n            }\n            if (!key.endsWith(\".xml\") && !key.endsWith(\".rels\")) {\n                binaryContentMap.set(key, binaryValue);\n                continue;\n            }\n            const json = toJson((yield value.async(\"text\")));\n            if (key === \"word/document.xml\") {\n                const document2 = (_a = json.elements) == null ? void 0 : _a.find((i)=>i.name === \"w:document\");\n                if (document2 && document2.attributes) {\n                    for (const ns of [\n                        \"mc\",\n                        \"wp\",\n                        \"r\",\n                        \"w15\",\n                        \"m\"\n                    ]){\n                        document2.attributes[`xmlns:${ns}`] = DocumentAttributeNamespaces[ns];\n                    }\n                    document2.attributes[\"mc:Ignorable\"] = `${document2.attributes[\"mc:Ignorable\"] || \"\"} w15`.trim();\n                }\n            }\n            if (key.startsWith(\"word/\") && !key.endsWith(\".xml.rels\")) {\n                const context = {\n                    file,\n                    viewWrapper: {\n                        Relationships: {\n                            createRelationship: (linkId, _, target, __)=>{\n                                hyperlinkRelationshipAdditions.push({\n                                    key,\n                                    hyperlink: {\n                                        id: linkId,\n                                        link: target\n                                    }\n                                });\n                            }\n                        }\n                    },\n                    stack: []\n                };\n                contexts.set(key, context);\n                if (!(placeholderDelimiters == null ? void 0 : placeholderDelimiters.start.trim()) || !(placeholderDelimiters == null ? void 0 : placeholderDelimiters.end.trim())) {\n                    throw new Error(\"Both start and end delimiters must be non-empty strings.\");\n                }\n                const { start, end } = placeholderDelimiters;\n                for (const [patchKey, patchValue] of Object.entries(patches)){\n                    const patchText = `${start}${patchKey}${end}`;\n                    while(true){\n                        const { didFindOccurrence } = replacer({\n                            json,\n                            patch: __spreadProps(__spreadValues({}, patchValue), {\n                                children: patchValue.children.map((element)=>{\n                                    if (element instanceof ExternalHyperlink) {\n                                        const concreteHyperlink = new ConcreteHyperlink(element.options.children, uniqueId());\n                                        hyperlinkRelationshipAdditions.push({\n                                            key,\n                                            hyperlink: {\n                                                id: concreteHyperlink.linkId,\n                                                link: element.options.link\n                                            }\n                                        });\n                                        return concreteHyperlink;\n                                    } else {\n                                        return element;\n                                    }\n                                })\n                            }),\n                            patchText,\n                            context,\n                            keepOriginalStyles\n                        });\n                        if (!recursive || !didFindOccurrence) {\n                            break;\n                        }\n                    }\n                }\n                const mediaDatas = imageReplacer.getMediaData(JSON.stringify(json), context.file.Media);\n                if (mediaDatas.length > 0) {\n                    hasMedia = true;\n                    imageRelationshipAdditions.push({\n                        key,\n                        mediaDatas\n                    });\n                }\n            }\n            map.set(key, json);\n        }\n        for (const { key, mediaDatas } of imageRelationshipAdditions){\n            const relationshipKey = `word/_rels/${key.split(\"/\").pop()}.rels`;\n            const relationshipsJson = (_b = map.get(relationshipKey)) != null ? _b : createRelationshipFile();\n            map.set(relationshipKey, relationshipsJson);\n            const index = getNextRelationshipIndex(relationshipsJson);\n            const newJson = imageReplacer.replace(JSON.stringify(map.get(key)), mediaDatas, index);\n            map.set(key, JSON.parse(newJson));\n            for(let i = 0; i < mediaDatas.length; i++){\n                const { fileName } = mediaDatas[i];\n                appendRelationship(relationshipsJson, index + i, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\", `media/${fileName}`);\n            }\n        }\n        for (const { key, hyperlink } of hyperlinkRelationshipAdditions){\n            const relationshipKey = `word/_rels/${key.split(\"/\").pop()}.rels`;\n            const relationshipsJson = (_c = map.get(relationshipKey)) != null ? _c : createRelationshipFile();\n            map.set(relationshipKey, relationshipsJson);\n            appendRelationship(relationshipsJson, hyperlink.id, \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\", hyperlink.link, TargetModeType.EXTERNAL);\n        }\n        if (hasMedia) {\n            const contentTypesJson = map.get(\"[Content_Types].xml\");\n            if (!contentTypesJson) {\n                throw new Error(\"Could not find content types file\");\n            }\n            appendContentType(contentTypesJson, \"image/png\", \"png\");\n            appendContentType(contentTypesJson, \"image/jpeg\", \"jpeg\");\n            appendContentType(contentTypesJson, \"image/jpeg\", \"jpg\");\n            appendContentType(contentTypesJson, \"image/bmp\", \"bmp\");\n            appendContentType(contentTypesJson, \"image/gif\", \"gif\");\n            appendContentType(contentTypesJson, \"image/svg+xml\", \"svg\");\n        }\n        const zip = new JSZip();\n        for (const [key, value] of map){\n            const output = toXml(value);\n            zip.file(key, output);\n        }\n        for (const [key, value] of binaryContentMap){\n            zip.file(key, value);\n        }\n        for (const { data: stream, fileName } of file.Media.Array){\n            zip.file(`word/media/${fileName}`, stream);\n        }\n        return zip.generateAsync({\n            type: outputType,\n            mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n            compression: \"DEFLATE\"\n        });\n    });\nconst toXml = (jsonObj)=>{\n    const output = libExports.js2xml(jsonObj, {\n        attributeValueFn: (str)=>String(str).replace(/&(?!amp;|lt;|gt;|quot;|apos;)/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\")\n    });\n    return output;\n};\nconst createRelationshipFile = ()=>({\n        declaration: {\n            attributes: {\n                version: \"1.0\",\n                encoding: \"UTF-8\",\n                standalone: \"yes\"\n            }\n        },\n        elements: [\n            {\n                type: \"element\",\n                name: \"Relationships\",\n                attributes: {\n                    xmlns: \"http://schemas.openxmlformats.org/package/2006/relationships\"\n                },\n                elements: []\n            }\n        ]\n    });\nconst patchDetector = (_0)=>__async(void 0, [\n        _0\n    ], function*({ data }) {\n        const zipContent = data instanceof JSZip ? data : yield JSZip.loadAsync(data);\n        const patches = /* @__PURE__ */ new Set();\n        for (const [key, value] of Object.entries(zipContent.files)){\n            if (!key.endsWith(\".xml\") && !key.endsWith(\".rels\")) {\n                continue;\n            }\n            if (key.startsWith(\"word/\") && !key.endsWith(\".xml.rels\")) {\n                const json = toJson((yield value.async(\"text\")));\n                traverse(json).forEach((p)=>findPatchKeys(p.text).forEach((patch)=>patches.add(patch)));\n            }\n        }\n        return Array.from(patches);\n    });\nconst findPatchKeys = (text)=>{\n    var _a;\n    const pattern = new RegExp(\"(?<=\\\\{\\\\{).+?(?=\\\\}\\\\})\", \"gs\");\n    return (_a = text.match(pattern)) != null ? _a : [];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/docx/dist/index.mjs\n");

/***/ })

};
;